[
    {
        "id": "f12",
        "type": "tab",
        "label": "เช็คการค้างท่อ mqtt tu",
        "disabled": false,
        "info": ""
    },
    {
        "id": "96f306faac18dafe",
        "type": "tab",
        "label": "control tu",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8116f63f.e78778",
        "type": "mqtt-broker",
        "name": "DECC_Bigdata",
        "broker": "203.154.83.117",
        "port": "4563",
        "clientid": "node-red___v0.3",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "n12",
        "type": "inject",
        "z": "f12",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 9999,
        "y": 9999,
        "wires": [
            []
        ]
    },
    {
        "id": "n22",
        "type": "exec",
        "z": "f12",
        "command": "curl http://104.168.35.227:55555/ghj",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 9999,
        "y": 9999,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "cb1b905769405406",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT001/control/loads/mode",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 230,
        "y": 140,
        "wires": [
            [
                "1b378315fbb60b5b"
            ]
        ]
    },
    {
        "id": "03936c63766ab321",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT001/control/set_config",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 220,
        "wires": [
            [
                "48d4dbab5046e10a"
            ]
        ]
    },
    {
        "id": "d65ccc5288f5342e",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT001/control/response",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 240,
        "y": 180,
        "wires": [
            [
                "d7b0c05cfd00b007"
            ]
        ]
    },
    {
        "id": "b63a83c4de672901",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT001/control/loads_auto/dripper_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 460,
        "wires": [
            [
                "7509a3afa197c105"
            ]
        ]
    },
    {
        "id": "51ab05f35210e914",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT001/control/loads/dripper",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 260,
        "wires": [
            [
                "51b27a7c0e88f18a"
            ]
        ]
    },
    {
        "id": "463732e30c0b5714",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT001/control/loads_auto/dripper_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 500,
        "wires": [
            [
                "c5aebee0cb0fc275"
            ]
        ]
    },
    {
        "id": "442e03643befbc27",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT001/control/loads_auto/dripper_3",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 540,
        "wires": [
            [
                "99ebec7eaddabb92"
            ]
        ]
    },
    {
        "id": "9c30423c231b77ad",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT001/control/loads_auto/dripper_4",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 580,
        "wires": [
            [
                "bb369f5e45880ca1"
            ]
        ]
    },
    {
        "id": "3c328a7f263d1971",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT001/control/loads/fan",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 300,
        "wires": [
            [
                "5a5d7e81100f44ed"
            ]
        ]
    },
    {
        "id": "992bba895b82ddea",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT001/control/loads/foggy",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 340,
        "wires": [
            [
                "57f41c908808de49"
            ]
        ]
    },
    {
        "id": "f1a2565066d3bf57",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT001/control/loads/spray",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 380,
        "wires": [
            [
                "cb72f5b521e9ecec"
            ]
        ]
    },
    {
        "id": "df728e2f52b727b5",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT001/control/loads/shading",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 420,
        "wires": [
            [
                "678ab91a46e735a9"
            ]
        ]
    },
    {
        "id": "db4b0170058f32f5",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT001/control/loads_auto/fan_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 620,
        "wires": [
            [
                "850bf0d0fbf2fda0"
            ]
        ]
    },
    {
        "id": "587f61c24e6c80aa",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT001/control/loads_auto/fan_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 660,
        "wires": [
            [
                "29381d410af54073"
            ]
        ]
    },
    {
        "id": "0a84ee6281830d07",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT001/control/loads_auto/fan_3",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 700,
        "wires": [
            [
                "1206ebe6d5e00206"
            ]
        ]
    },
    {
        "id": "7693f0e80c06a978",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT001/control/loads_auto/fan_4",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 740,
        "wires": [
            [
                "764e88e4bbd196ec"
            ]
        ]
    },
    {
        "id": "1214a03983e35125",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT001/control/loads_auto/foggy_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 780,
        "wires": [
            [
                "9d0e323e904b6a9c"
            ]
        ]
    },
    {
        "id": "dc2f4ebb98751ec4",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT001/control/loads_auto/foggy_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 820,
        "wires": [
            [
                "8ab0b6a93fdf359d"
            ]
        ]
    },
    {
        "id": "a62461cfb550a054",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT001/control/loads_auto/spray",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 860,
        "wires": [
            [
                "64cdea6019c8b3e4"
            ]
        ]
    },
    {
        "id": "9c2edc93f722203c",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT001/control/loads_auto/shading",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 900,
        "wires": [
            [
                "14424aac0154894f"
            ]
        ]
    },
    {
        "id": "1b378315fbb60b5b",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "let output = msg.payload;\nmsg.topic = \"get_mode\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 140,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "476c0f82b9f9ce4a",
        "type": "function",
        "z": "f12",
        "name": "function 1",
        "func": "if (msg.topic == \"get_time\") {\n    context.set('get_time', msg.timer);\n}\nif (msg.topic == \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic == \"get_mode\") {\n    context.set('get_mode', msg.payload);\n}\nif (msg.topic == \"response\") {\n    context.set('response', msg.payload);\n}\nif (msg.topic == \"set_config\") {\n    context.set('set_config', msg.payload);\n}\nif (msg.topic == \"M_dp\") {\n    context.set('M_dp', msg.payload);\n}\nif (msg.topic == \"M_fan\") {\n    context.set('M_fan', msg.payload);\n}\nif (msg.topic == \"M_fg\") {\n    context.set('M_fg', msg.payload);\n}\nif (msg.topic == \"M_sp\") {\n    context.set('M_sp', msg.payload);\n}\nif (msg.topic == \"M_sh\") {\n    context.set('M_sh', msg.payload);\n}\n// ---------------------------------\nif (msg.topic == \"A_dp_1\") {\n    context.set('A_dp_1', msg.payload);\n}\nif (msg.topic == \"A_dp_2\") {\n    context.set('A_dp_2', msg.payload);\n}\nif (msg.topic == \"A_dp_3\") {\n    context.set('A_dp_3', msg.payload);\n}\nif (msg.topic == \"A_dp_4\") {\n    context.set('A_dp_4', msg.payload);\n}\nif (msg.topic == \"A_fn_1\") {\n    context.set('A_fn_1', msg.payload);\n}\nif (msg.topic == \"A_fn_2\") {\n    context.set('A_fn_2', msg.payload);\n}\nif (msg.topic == \"A_fn_3\") {\n    context.set('A_fn_3', msg.payload);\n}\nif (msg.topic == \"A_fn_4\") {\n    context.set('A_fn_4', msg.payload);\n}\nif (msg.topic == \"A_fg_1\") {\n    context.set('A_fg_1', msg.payload);\n}\nif (msg.topic == \"A_fg_2\") {\n    context.set('A_fg_2', msg.payload);\n}\nif (msg.topic == \"A_sp\") {\n    context.set('A_sp', msg.payload);\n}\nif (msg.topic == \"A_sh\") {\n    context.set('A_sh', msg.payload);\n}\nlet timestamp = context.get('get_time') || 0;\nlet get_status = context.get('get_status') || 0;\n\n// let timestamp = msg.timer;\nlet ntime = timestamp.split(\" \");\nlet nowtime = ntime[1];\nlet nminute = nowtime.split(\":\");\nlet nowminute = Number(nminute[1]);\nlet old_minute = context.get('old_nowminute') || 0;\nold_minute = Number(old_minute)\n\nif (old_minute != nowminute) {\n    context.set('old_nowminute', nowminute);\n\n    let get_mode = context.get('get_mode') || 0;\n    let response = context.get('response') || 0;\n    if (get_status == 0) { return false; }\n    if (get_mode == 0) { return false; }\n    if (response == 0) { return false; }\n    if (get_status === \"online\") {\n\n        // msg.payload = old_minute+\" \"+get_status // JSON.stringify(jsonstring);\n        // return msg;\n\n        if (response.mode !== get_mode) {\n            msg.payload = {\n                status: 'false',\n                sn: response.serial_id,\n                mode: get_mode,\n                response: 'mode : False',\n                time: nowminute\n            }\n            return msg;\n        } else { // กรณีโหมดตรง\n            if (response.mode === \"Manual\") {\n\n                let set_config = context.get('set_config') || 0;\n                let M_dp = context.get('M_dp') || 0;\n                let M_fan = context.get('M_fan') || 0;\n                let M_fg = context.get('M_fg') || 0;\n                let M_sp = context.get('M_sp') || 0;\n                let M_sh = context.get('M_sh') || 0;\n\n                if (set_config == 0) { return false; }\n                if (M_dp == 0) { return false; }\n                if (M_fan == 0) { return false; }\n                if (M_fg == 0) { return false; }\n                if (M_sp == 0) { return false; }\n                if (M_sh == 0) { return false; }\n\n                // msg.payload = old_minute + \" \" + get_status + \" \" + get_mode // JSON.stringify(jsonstring);\n                // return msg;\n                let check_dp = [], check_fan = [], check_fg = [];\n\n                for (let i = 1; i < 5; i++) {\n                    if (set_config.config_manual['dripper_' + i] === \"ON\") {\n                        if (response['dripper_' + i] !== M_dp) {\n                            check_dp.push(1)\n                        } else {\n                            check_dp.push(0)\n                        }\n                    }\n                    if (set_config.config_manual['fan_' + i] === \"ON\") {\n                        if (response['fan_' + i] !== M_fan) {\n                            check_fan.push(1)\n                        } else {\n                            check_fan.push(0)\n                        }\n                    }\n                    if (i < 3) {\n                        if (set_config.config_manual['foggy_' + i] === \"ON\") {\n                            if (response['foggy_' + i] !== M_fan) {\n                                check_fg.push(1)\n                            } else {\n                                check_fg.push(0)\n                            }\n                        }\n                    }\n                }\n                if (check_dp.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (check_fan.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (check_fg.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        mode: response.mode,\n                        sn: response.serial_id,\n                        response: 'foggy : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['spray'] !== M_sp) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'spray : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['shading'] !== M_sh) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'shading : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                else {\n                    msg.payload = {\n                        status: 'true',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'success',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n            }\n            else { // mode Auto\n                let A_dp_1 = context.get('A_dp_1') || 0;\n                let A_dp_2 = context.get('A_dp_2') || 0;\n                let A_dp_3 = context.get('A_dp_3') || 0;\n                let A_dp_4 = context.get('A_dp_4') || 0;\n                let A_fn_1 = context.get('A_fn_1') || 0;\n                let A_fn_2 = context.get('A_fn_2') || 0;\n                let A_fn_3 = context.get('A_fn_3') || 0;\n                let A_fn_4 = context.get('A_fn_4') || 0;\n                let A_fg_1 = context.get('A_fg_1') || 0;\n                let A_fg_2 = context.get('A_fg_2') || 0;\n                let A_sp = context.get('M_sp') || 0;\n                let A_sh = context.get('M_sh') || 0;\n\n                if (A_dp_1 == 0) { return false; }\n                if (A_dp_2 == 0) { return false; }\n                if (A_dp_3 == 0) { return false; }\n                if (A_dp_4 == 0) { return false; }\n                if (A_fn_1 == 0) { return false; }\n                if (A_fn_2 == 0) { return false; }\n                if (A_fn_3 == 0) { return false; }\n                if (A_fn_4 == 0) { return false; }\n                if (A_fg_1 == 0) { return false; }\n                if (A_fg_2 == 0) { return false; }\n                if (A_sp == 0) { return false; }\n                if (A_sh == 0) { return false; }\n\n                if (response.dripper_1 !== A_dp_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_2 !== A_dp_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_3 !== A_dp_3) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 3 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_4 !== A_dp_4) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 4 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_1 !== A_fn_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_2 !== A_fn_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_3 !== A_fn_3) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 3 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_4 !== A_fn_4) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 4 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n\n                if (response.foggy_1 !== A_fg_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.foggy_2 !== A_fg_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['spray'] !== A_sp) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'spray : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['shading'] !== A_sh) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'shading : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                else {\n                    msg.payload = {\n                        status: 'true',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'success',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n            }\n        }\n\n    }\n    // else{\n    //     msg.payload = old_minute + \" \" + get_status // JSON.stringify(jsonstring);\n    //     return msg;\n    // }\n}\n// else{\n//     msg.payload = old_minute\n//     return msg\n// }\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 320,
        "wires": [
            [
                "12f3d97db83089dc",
                "645d46cfb2ad3151"
            ]
        ]
    },
    {
        "id": "48d4dbab5046e10a",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"set_config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 220,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "d7b0c05cfd00b007",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"response\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 180,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "7509a3afa197c105",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 460,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "51b27a7c0e88f18a",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_dp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 260,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "c5aebee0cb0fc275",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 500,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "99ebec7eaddabb92",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_3\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 540,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "bb369f5e45880ca1",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_4\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 580,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "5a5d7e81100f44ed",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_fan\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 300,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "57f41c908808de49",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_fg\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 340,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "cb72f5b521e9ecec",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_sp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 380,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "678ab91a46e735a9",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_sh\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 420,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "850bf0d0fbf2fda0",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 620,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "29381d410af54073",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 660,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "1206ebe6d5e00206",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_3\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 700,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "764e88e4bbd196ec",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_4\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 740,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "9d0e323e904b6a9c",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fg_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 780,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "8ab0b6a93fdf359d",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fg_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 820,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "64cdea6019c8b3e4",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_sp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 860,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "14424aac0154894f",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_sh\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 900,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "9418b2074fc374f9",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"get_status\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 100,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "e8390a9bc83c762b",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "connect/status/TUSMT001",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 250,
        "y": 100,
        "wires": [
            [
                "9418b2074fc374f9"
            ]
        ]
    },
    {
        "id": "4097d23a823a88ad",
        "type": "debug",
        "z": "f12",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 360,
        "wires": []
    },
    {
        "id": "12f3d97db83089dc",
        "type": "function",
        "z": "f12",
        "name": "function 4",
        "func": "let output = msg.payload\nif (output.status === \"false\"){\n    msg.payload = output\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 320,
        "wires": [
            [
                "284644ece9e4c521",
                "c9199bafd10f8514",
                "b2f9a74d8bd756f4"
            ]
        ]
    },
    {
        "id": "645d46cfb2ad3151",
        "type": "function",
        "z": "f12",
        "name": "function 5",
        "func": "msg.topic = \"get_time\";\nmsg.payload = msg.payload\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 360,
        "wires": [
            [
                "4097d23a823a88ad",
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "284644ece9e4c521",
        "type": "debug",
        "z": "f12",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 320,
        "wires": []
    },
    {
        "id": "ab0970442c375789",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT002/control/loads/mode",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 230,
        "y": 1060,
        "wires": [
            [
                "4026eaed0e796d5c"
            ]
        ]
    },
    {
        "id": "d03782e30f4337f1",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT002/control/set_config",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 1140,
        "wires": [
            [
                "dee5449d83b369fe"
            ]
        ]
    },
    {
        "id": "e350667d18b3bd98",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT002/control/response",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 240,
        "y": 1100,
        "wires": [
            [
                "c010baf7661745c4"
            ]
        ]
    },
    {
        "id": "94e9f5e0f68c89f4",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT002/control/loads_auto/dripper_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 1380,
        "wires": [
            [
                "38e0f960449b71df"
            ]
        ]
    },
    {
        "id": "434c6a56f79b7db8",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT002/control/loads/dripper",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 1180,
        "wires": [
            [
                "cb8f77504a63aca2"
            ]
        ]
    },
    {
        "id": "1c0defa1544d1961",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT002/control/loads_auto/dripper_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 1420,
        "wires": [
            [
                "69bdeb327f78c250"
            ]
        ]
    },
    {
        "id": "46d8bc7369350809",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT002/control/loads_auto/dripper_3",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 1460,
        "wires": [
            [
                "7fc3f78e0d44bf37"
            ]
        ]
    },
    {
        "id": "8e078aaf31fbc409",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT002/control/loads_auto/dripper_4",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 1500,
        "wires": [
            [
                "15b8b3e85cfb7e6a"
            ]
        ]
    },
    {
        "id": "9bb718439038a15d",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT002/control/loads/fan",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 1220,
        "wires": [
            [
                "06c5e581996f9a2a"
            ]
        ]
    },
    {
        "id": "c2c36c5e3449d9d3",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT002/control/loads/foggy",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 1260,
        "wires": [
            [
                "27e3d5b21fbac13a"
            ]
        ]
    },
    {
        "id": "96ebb98538d20bbe",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT002/control/loads/spray",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 1300,
        "wires": [
            [
                "167e7ffc4f8e8476"
            ]
        ]
    },
    {
        "id": "e112f2f6341d20b9",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT002/control/loads/shading",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 1340,
        "wires": [
            [
                "9603086110962007"
            ]
        ]
    },
    {
        "id": "4ee62a8086212875",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT002/control/loads_auto/fan_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 1540,
        "wires": [
            [
                "9ce50e837b7e6fec"
            ]
        ]
    },
    {
        "id": "6196f8aba4bf1ce0",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT002/control/loads_auto/fan_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 1580,
        "wires": [
            [
                "106d6bb49ad26a50"
            ]
        ]
    },
    {
        "id": "f73b71456a6a710e",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT002/control/loads_auto/fan_3",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 1620,
        "wires": [
            [
                "d2df46e5f56a2c4b"
            ]
        ]
    },
    {
        "id": "0e4e2330fed05749",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT002/control/loads_auto/fan_4",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 1660,
        "wires": [
            [
                "a81b39554d9c6eb4"
            ]
        ]
    },
    {
        "id": "2963e6ea966a55df",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT002/control/loads_auto/foggy_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 1700,
        "wires": [
            [
                "1c828256840172f6"
            ]
        ]
    },
    {
        "id": "92ae8025d0f29a9e",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT002/control/loads_auto/foggy_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 1740,
        "wires": [
            [
                "5438176630d699d6"
            ]
        ]
    },
    {
        "id": "9fb7f15cc612897d",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT002/control/loads_auto/spray",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 1780,
        "wires": [
            [
                "83e7f4b77a72eebd"
            ]
        ]
    },
    {
        "id": "11fcbe8110a88be1",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT002/control/loads_auto/shading",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 1820,
        "wires": [
            [
                "162ac34d3f1cf74f"
            ]
        ]
    },
    {
        "id": "3527682bb7664dbe",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT004/control/loads/mode",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 230,
        "y": 2920,
        "wires": [
            [
                "a395734cf446c183"
            ]
        ]
    },
    {
        "id": "b2bc79ac5f06b585",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT004/control/set_config",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 3000,
        "wires": [
            [
                "f964f3230549eff1"
            ]
        ]
    },
    {
        "id": "07a8a7d90d84142b",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT004/control/response",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 240,
        "y": 2960,
        "wires": [
            [
                "58d326024055fed4"
            ]
        ]
    },
    {
        "id": "2507c8c2772d8b78",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT004/control/loads_auto/dripper_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 3240,
        "wires": [
            [
                "997f484e7b8fe73b"
            ]
        ]
    },
    {
        "id": "a0439514a61f2cb9",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT004/control/loads/dripper",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 3040,
        "wires": [
            [
                "0916a47a275bde98"
            ]
        ]
    },
    {
        "id": "eb617adf299ae06a",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT004/control/loads_auto/dripper_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 3280,
        "wires": [
            [
                "c36db9a5a7689a84"
            ]
        ]
    },
    {
        "id": "5092cf93dd3f482c",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT004/control/loads_auto/dripper_3",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 3320,
        "wires": [
            [
                "ef3f603db76bdcae"
            ]
        ]
    },
    {
        "id": "ae8616995741f1fa",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT004/control/loads_auto/dripper_4",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 3360,
        "wires": [
            [
                "6ea233fa1d19c0fa"
            ]
        ]
    },
    {
        "id": "dc61da91d9a2da89",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT004/control/loads/fan",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 3080,
        "wires": [
            [
                "66ded0e05dfc1c29"
            ]
        ]
    },
    {
        "id": "ed06b2f0dd359987",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT004/control/loads/foggy",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 3120,
        "wires": [
            [
                "3af480b4767a9967"
            ]
        ]
    },
    {
        "id": "2c11b46bab91085b",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT004/control/loads/spray",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 3160,
        "wires": [
            [
                "e3562eca92cdf463"
            ]
        ]
    },
    {
        "id": "66cf29f9c58a239e",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT004/control/loads/shading",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 3200,
        "wires": [
            [
                "59037450b6280995"
            ]
        ]
    },
    {
        "id": "2405549f9c8dca02",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT004/control/loads_auto/fan_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 3400,
        "wires": [
            [
                "34072f4409602553"
            ]
        ]
    },
    {
        "id": "9fcd95cc4ece15a8",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT004/control/loads_auto/fan_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 3440,
        "wires": [
            [
                "efe6123293e8b138"
            ]
        ]
    },
    {
        "id": "3b5cf97b1fc08c1a",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT004/control/loads_auto/fan_3",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 3480,
        "wires": [
            [
                "fc5b849ee5c0c69b"
            ]
        ]
    },
    {
        "id": "8257fc3906201560",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT004/control/loads_auto/fan_4",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 3520,
        "wires": [
            [
                "7a44e66a4186a5be"
            ]
        ]
    },
    {
        "id": "19a09cf941483215",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT004/control/loads_auto/foggy_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 3560,
        "wires": [
            [
                "a3e00909cedf8098"
            ]
        ]
    },
    {
        "id": "17777b69e70e231c",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT004/control/loads_auto/foggy_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 3600,
        "wires": [
            [
                "e1ce6f3e3e8308d4"
            ]
        ]
    },
    {
        "id": "8c8bef469005882a",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT004/control/loads_auto/spray",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 3640,
        "wires": [
            [
                "9b4f09c4156b23ff"
            ]
        ]
    },
    {
        "id": "5a36cdc361b3104e",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT004/control/loads_auto/shading",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 3680,
        "wires": [
            [
                "5029056bb8383026"
            ]
        ]
    },
    {
        "id": "5606f601c8acb755",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT003/control/loads/mode",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 230,
        "y": 2000,
        "wires": [
            [
                "bfd3bcb0575be9a4"
            ]
        ]
    },
    {
        "id": "1b3e6760c47db94e",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT003/control/set_config",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 2080,
        "wires": [
            [
                "00e0777aae26963d"
            ]
        ]
    },
    {
        "id": "ac45baa593ae1d80",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT003/control/response",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 240,
        "y": 2040,
        "wires": [
            [
                "08a0d74da5aabd8e"
            ]
        ]
    },
    {
        "id": "31b7c34e3666082e",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT003/control/loads_auto/dripper_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 2320,
        "wires": [
            [
                "1f989b997e3445cc"
            ]
        ]
    },
    {
        "id": "1ca2b35fa65b2d14",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT003/control/loads/dripper",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 2120,
        "wires": [
            [
                "b38ab27a1d06f988"
            ]
        ]
    },
    {
        "id": "8b2f74ae1efbc5d3",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT003/control/loads_auto/dripper_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 2360,
        "wires": [
            [
                "5376a0a9e2fa96f9"
            ]
        ]
    },
    {
        "id": "af7097c471410552",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT003/control/loads_auto/dripper_3",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 2400,
        "wires": [
            [
                "5b1b374d45e0406f"
            ]
        ]
    },
    {
        "id": "99e7e68506b7e59f",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT003/control/loads_auto/dripper_4",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 2440,
        "wires": [
            [
                "a10a79747723e21d"
            ]
        ]
    },
    {
        "id": "b0412dc4b685c832",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT003/control/loads/fan",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 2160,
        "wires": [
            [
                "5529b6d4cbe974db"
            ]
        ]
    },
    {
        "id": "92ca80d58510f295",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT003/control/loads/foggy",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 2200,
        "wires": [
            [
                "5ca994021183c11b"
            ]
        ]
    },
    {
        "id": "0d936893ed8ada3b",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT003/control/loads/spray",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 2240,
        "wires": [
            [
                "934d309e3b8ec1d2"
            ]
        ]
    },
    {
        "id": "c0681277e92cb9fe",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT003/control/loads/shading",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 2280,
        "wires": [
            [
                "e6412881cf6ea6dc"
            ]
        ]
    },
    {
        "id": "3442150819af4978",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT003/control/loads_auto/fan_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 2480,
        "wires": [
            [
                "abbd475b68a7c98c"
            ]
        ]
    },
    {
        "id": "5bb842e48225fdc9",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT003/control/loads_auto/fan_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 2520,
        "wires": [
            [
                "c9d0e4b887c4b941"
            ]
        ]
    },
    {
        "id": "06bf247ee9248226",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT003/control/loads_auto/fan_3",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 2560,
        "wires": [
            [
                "3f5d1ac960e3cfa0"
            ]
        ]
    },
    {
        "id": "deeabfefb6393236",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT003/control/loads_auto/fan_4",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 2600,
        "wires": [
            [
                "208b66fa068d4d38"
            ]
        ]
    },
    {
        "id": "2f151bcfedc731a3",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT003/control/loads_auto/foggy_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 2640,
        "wires": [
            [
                "166e659fcc5a9ebc"
            ]
        ]
    },
    {
        "id": "363ae3b4a95642c4",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT003/control/loads_auto/foggy_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 2680,
        "wires": [
            [
                "ce5c12f2de771f3c"
            ]
        ]
    },
    {
        "id": "fea8195410223055",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT003/control/loads_auto/spray",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 2720,
        "wires": [
            [
                "6a55e68774e097df"
            ]
        ]
    },
    {
        "id": "93626a8cc3efa11b",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT003/control/loads_auto/shading",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 2760,
        "wires": [
            [
                "71c2ed5d0c6a41b3"
            ]
        ]
    },
    {
        "id": "4026eaed0e796d5c",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "let output = msg.payload;\nmsg.topic = \"get_mode\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1060,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "5c5fff3ffaa4adca",
        "type": "function",
        "z": "f12",
        "name": "function 61",
        "func": "if (msg.topic == \"get_time\") {\n    context.set('get_time', msg.payload);\n}\nif (msg.topic == \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic == \"get_mode\") {\n    context.set('get_mode', msg.payload);\n}\nif (msg.topic == \"response\") {\n    context.set('response', msg.payload);\n}\nif (msg.topic == \"set_config\") {\n    context.set('set_config', msg.payload);\n}\nif (msg.topic == \"M_dp\") {\n    context.set('M_dp', msg.payload);\n}\nif (msg.topic == \"M_fan\") {\n    context.set('M_fan', msg.payload);\n}\nif (msg.topic == \"M_fg\") {\n    context.set('M_fg', msg.payload);\n}\nif (msg.topic == \"M_sp\") {\n    context.set('M_sp', msg.payload);\n}\nif (msg.topic == \"M_sh\") {\n    context.set('M_sh', msg.payload);\n}\n// ---------------------------------\nif (msg.topic == \"A_dp_1\") {\n    context.set('A_dp_1', msg.payload);\n}\nif (msg.topic == \"A_dp_2\") {\n    context.set('A_dp_2', msg.payload);\n}\nif (msg.topic == \"A_dp_3\") {\n    context.set('A_dp_3', msg.payload);\n}\nif (msg.topic == \"A_dp_4\") {\n    context.set('A_dp_4', msg.payload);\n}\nif (msg.topic == \"A_fn_1\") {\n    context.set('A_fn_1', msg.payload);\n}\nif (msg.topic == \"A_fn_2\") {\n    context.set('A_fn_2', msg.payload);\n}\nif (msg.topic == \"A_fn_3\") {\n    context.set('A_fn_3', msg.payload);\n}\nif (msg.topic == \"A_fn_4\") {\n    context.set('A_fn_4', msg.payload);\n}\nif (msg.topic == \"A_fg_1\") {\n    context.set('A_fg_1', msg.payload);\n}\nif (msg.topic == \"A_fg_2\") {\n    context.set('A_fg_2', msg.payload);\n}\nif (msg.topic == \"A_sp\") {\n    context.set('A_sp', msg.payload);\n}\nif (msg.topic == \"A_sh\") {\n    context.set('A_sh', msg.payload);\n}\nlet timestamp = context.get('get_time') || \"NO\";\nlet get_status = context.get('get_status') || 0;\n\nlet nowminute = Number(timestamp.time);\nlet old_minute = context.get('old_nowminute') || 0;\nold_minute = Number(old_minute)\nif (timestamp === \"NO\") { return false; }\nif (old_minute != nowminute) {\n    context.set('old_nowminute', nowminute);\n\n    let get_mode = context.get('get_mode') || 0;\n    let response = context.get('response') || 0;\n    if (get_status == 0) { return false; }\n    if (get_mode == 0) { return false; }\n    if (response == 0) { return false; }\n    if (get_status === \"online\") {\n\n        // msg.payload = old_minute+\" \"+get_status // JSON.stringify(jsonstring);\n        // return msg;\n\n        if (response.mode !== get_mode) {\n            msg.payload = {\n                status: 'false',\n                sn: response.serial_id,\n                mode: get_mode,\n                response: 'mode : False',\n                time: nowminute\n            }\n            return msg;\n        } else { // กรณีโหมดตรง\n            if (response.mode === \"Manual\") {\n\n                let set_config = context.get('set_config') || 0;\n                let M_dp = context.get('M_dp') || 0;\n                let M_fan = context.get('M_fan') || 0;\n                let M_fg = context.get('M_fg') || 0;\n                let M_sp = context.get('M_sp') || 0;\n                let M_sh = context.get('M_sh') || 0;\n\n                if (set_config == 0) { return false; }\n                if (M_dp == 0) { return false; }\n                if (M_fan == 0) { return false; }\n                if (M_fg == 0) { return false; }\n                if (M_sp == 0) { return false; }\n                if (M_sh == 0) { return false; }\n\n                // msg.payload = old_minute + \" \" + get_status + \" \" + get_mode // JSON.stringify(jsonstring);\n                // return msg;\n                let check_dp = [], check_fan = [], check_fg = [];\n\n                for (let i = 1; i < 5; i++) {\n                    if (set_config.config_manual['dripper_' + i] === \"ON\") {\n                        if (response['dripper_' + i] !== M_dp) {\n                            check_dp.push(1)\n                        } else {\n                            check_dp.push(0)\n                        }\n                    }\n                    if (set_config.config_manual['fan_' + i] === \"ON\") {\n                        if (response['fan_' + i] !== M_fan) {\n                            check_fan.push(1)\n                        } else {\n                            check_fan.push(0)\n                        }\n                    }\n                    if (i < 3) {\n                        if (set_config.config_manual['foggy_' + i] === \"ON\") {\n                            if (response['foggy_' + i] !== M_fan) {\n                                check_fg.push(1)\n                            } else {\n                                check_fg.push(0)\n                            }\n                        }\n                    }\n                }\n                if (check_dp.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (check_fan.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (check_fg.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['spray'] !== M_sp) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'spray : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['shading'] !== M_sh) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'shading : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                else {\n                    msg.payload = {\n                        status: 'true',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'success',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n            }\n            else { // mode Auto\n                let A_dp_1 = context.get('A_dp_1') || 0;\n                let A_dp_2 = context.get('A_dp_2') || 0;\n                let A_dp_3 = context.get('A_dp_3') || 0;\n                let A_dp_4 = context.get('A_dp_4') || 0;\n                let A_fn_1 = context.get('A_fn_1') || 0;\n                let A_fn_2 = context.get('A_fn_2') || 0;\n                let A_fn_3 = context.get('A_fn_3') || 0;\n                let A_fn_4 = context.get('A_fn_4') || 0;\n                let A_fg_1 = context.get('A_fg_1') || 0;\n                let A_fg_2 = context.get('A_fg_2') || 0;\n                let A_sp = context.get('M_sp') || 0;\n                let A_sh = context.get('M_sh') || 0;\n\n                if (A_dp_1 == 0) { return false; }\n                if (A_dp_2 == 0) { return false; }\n                if (A_dp_3 == 0) { return false; }\n                if (A_dp_4 == 0) { return false; }\n                if (A_fn_1 == 0) { return false; }\n                if (A_fn_2 == 0) { return false; }\n                if (A_fn_3 == 0) { return false; }\n                if (A_fn_4 == 0) { return false; }\n                if (A_fg_1 == 0) { return false; }\n                if (A_fg_2 == 0) { return false; }\n                if (A_sp == 0) { return false; }\n                if (A_sh == 0) { return false; }\n\n                if (response.dripper_1 !== A_dp_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_2 !== A_dp_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_3 !== A_dp_3) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 3 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_4 !== A_dp_4) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 4 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_1 !== A_fn_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_2 !== A_fn_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_3 !== A_fn_3) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 3 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_4 !== A_fn_4) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 4 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n\n                if (response.foggy_1 !== A_fg_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.foggy_2 !== A_fg_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['spray'] !== A_sp) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'spray : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['shading'] !== A_sh) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'shading : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                else {\n                    msg.payload = {\n                        status: 'true',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'success',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n            }\n        }\n\n    }\n}\n// else{\n//     msg.payload = old_minute\n//     return msg\n// }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1240,
        "wires": [
            [
                "89f5fcc057597451",
                "1efcfeaa22a1351e"
            ]
        ]
    },
    {
        "id": "dee5449d83b369fe",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"set_config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1140,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "c010baf7661745c4",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"response\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1100,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "38e0f960449b71df",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1380,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "cb8f77504a63aca2",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_dp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1180,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "69bdeb327f78c250",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1420,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "7fc3f78e0d44bf37",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_3\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1460,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "15b8b3e85cfb7e6a",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_4\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1500,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "06c5e581996f9a2a",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_fan\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1220,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "27e3d5b21fbac13a",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_fg\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1260,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "167e7ffc4f8e8476",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_sp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1300,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "9603086110962007",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_sh\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1340,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "9ce50e837b7e6fec",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1540,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "106d6bb49ad26a50",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1580,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "d2df46e5f56a2c4b",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_3\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1620,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "a81b39554d9c6eb4",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_4\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1660,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "1c828256840172f6",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fg_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1700,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "5438176630d699d6",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fg_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1740,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "83e7f4b77a72eebd",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_sp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1780,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "162ac34d3f1cf74f",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_sh\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1820,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "5a411314290fd0aa",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"get_status\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1020,
        "wires": [
            [
                "5c5fff3ffaa4adca"
            ]
        ]
    },
    {
        "id": "b31043b2c33064da",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "connect/status/TUSMT002",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 250,
        "y": 1020,
        "wires": [
            [
                "5a411314290fd0aa"
            ]
        ]
    },
    {
        "id": "bfd3bcb0575be9a4",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "let output = msg.payload;\nmsg.topic = \"get_mode\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2000,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "9a74fab9ee9450cd",
        "type": "function",
        "z": "f12",
        "name": "function 62",
        "func": "if (msg.topic == \"get_time\") {\n    context.set('get_time', msg.payload);\n}\nif (msg.topic == \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic == \"get_mode\") {\n    context.set('get_mode', msg.payload);\n}\nif (msg.topic == \"response\") {\n    context.set('response', msg.payload);\n}\nif (msg.topic == \"set_config\") {\n    context.set('set_config', msg.payload);\n}\nif (msg.topic == \"M_dp\") {\n    context.set('M_dp', msg.payload);\n}\nif (msg.topic == \"M_fan\") {\n    context.set('M_fan', msg.payload);\n}\nif (msg.topic == \"M_fg\") {\n    context.set('M_fg', msg.payload);\n}\nif (msg.topic == \"M_sp\") {\n    context.set('M_sp', msg.payload);\n}\nif (msg.topic == \"M_sh\") {\n    context.set('M_sh', msg.payload);\n}\n// ---------------------------------\nif (msg.topic == \"A_dp_1\") {\n    context.set('A_dp_1', msg.payload);\n}\nif (msg.topic == \"A_dp_2\") {\n    context.set('A_dp_2', msg.payload);\n}\nif (msg.topic == \"A_dp_3\") {\n    context.set('A_dp_3', msg.payload);\n}\nif (msg.topic == \"A_dp_4\") {\n    context.set('A_dp_4', msg.payload);\n}\nif (msg.topic == \"A_fn_1\") {\n    context.set('A_fn_1', msg.payload);\n}\nif (msg.topic == \"A_fn_2\") {\n    context.set('A_fn_2', msg.payload);\n}\nif (msg.topic == \"A_fn_3\") {\n    context.set('A_fn_3', msg.payload);\n}\nif (msg.topic == \"A_fn_4\") {\n    context.set('A_fn_4', msg.payload);\n}\nif (msg.topic == \"A_fg_1\") {\n    context.set('A_fg_1', msg.payload);\n}\nif (msg.topic == \"A_fg_2\") {\n    context.set('A_fg_2', msg.payload);\n}\nif (msg.topic == \"A_sp\") {\n    context.set('A_sp', msg.payload);\n}\nif (msg.topic == \"A_sh\") {\n    context.set('A_sh', msg.payload);\n}\nlet timestamp = context.get('get_time') || \"NO\";\nlet get_status = context.get('get_status') || 0;\n\nlet nowminute = Number(timestamp.time);\nlet old_minute = context.get('old_nowminute') || 0;\nold_minute = Number(old_minute)\nif (timestamp === \"NO\") { return false; }\nif (old_minute != nowminute) {\n    context.set('old_nowminute', nowminute);\n\n    let get_mode = context.get('get_mode') || 0;\n    let response = context.get('response') || 0;\n    if (get_status == 0) { return false; }\n    if (get_mode == 0) { return false; }\n    if (response == 0) { return false; }\n    if (get_status === \"online\") {\n\n        // msg.payload = old_minute+\" \"+get_status // JSON.stringify(jsonstring);\n        // return msg;\n\n        if (response.mode !== get_mode) {\n            msg.payload = {\n                status: 'false',\n                sn: response.serial_id,\n                mode: get_mode,\n                response: 'mode : False',\n                time: nowminute\n            }\n            return msg;\n        } else { // กรณีโหมดตรง\n            if (response.mode === \"Manual\") {\n\n                let set_config = context.get('set_config') || 0;\n                let M_dp = context.get('M_dp') || 0;\n                let M_fan = context.get('M_fan') || 0;\n                let M_fg = context.get('M_fg') || 0;\n                let M_sp = context.get('M_sp') || 0;\n                let M_sh = context.get('M_sh') || 0;\n\n                if (set_config == 0) { return false; }\n                if (M_dp == 0) { return false; }\n                if (M_fan == 0) { return false; }\n                if (M_fg == 0) { return false; }\n                if (M_sp == 0) { return false; }\n                if (M_sh == 0) { return false; }\n\n                // msg.payload = old_minute + \" \" + get_status + \" \" + get_mode // JSON.stringify(jsonstring);\n                // return msg;\n                let check_dp = [], check_fan = [], check_fg = [];\n\n                for (let i = 1; i < 5; i++) {\n                    if (set_config.config_manual['dripper_' + i] === \"ON\") {\n                        if (response['dripper_' + i] !== M_dp) {\n                            check_dp.push(1)\n                        } else {\n                            check_dp.push(0)\n                        }\n                    }\n                    if (set_config.config_manual['fan_' + i] === \"ON\") {\n                        if (response['fan_' + i] !== M_fan) {\n                            check_fan.push(1)\n                        } else {\n                            check_fan.push(0)\n                        }\n                    }\n                    if (i < 3) {\n                        if (set_config.config_manual['foggy_' + i] === \"ON\") {\n                            if (response['foggy_' + i] !== M_fan) {\n                                check_fg.push(1)\n                            } else {\n                                check_fg.push(0)\n                            }\n                        }\n                    }\n                }\n                if (check_dp.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (check_fan.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (check_fg.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['spray'] !== M_sp) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'spray : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['shading'] !== M_sh) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'shading : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                else {\n                    msg.payload = {\n                        status: 'true',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'success',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n            }\n            else { // mode Auto\n                let A_dp_1 = context.get('A_dp_1') || 0;\n                let A_dp_2 = context.get('A_dp_2') || 0;\n                let A_dp_3 = context.get('A_dp_3') || 0;\n                let A_dp_4 = context.get('A_dp_4') || 0;\n                let A_fn_1 = context.get('A_fn_1') || 0;\n                let A_fn_2 = context.get('A_fn_2') || 0;\n                let A_fn_3 = context.get('A_fn_3') || 0;\n                let A_fn_4 = context.get('A_fn_4') || 0;\n                let A_fg_1 = context.get('A_fg_1') || 0;\n                let A_fg_2 = context.get('A_fg_2') || 0;\n                let A_sp = context.get('M_sp') || 0;\n                let A_sh = context.get('M_sh') || 0;\n\n                if (A_dp_1 == 0) { return false; }\n                if (A_dp_2 == 0) { return false; }\n                if (A_dp_3 == 0) { return false; }\n                if (A_dp_4 == 0) { return false; }\n                if (A_fn_1 == 0) { return false; }\n                if (A_fn_2 == 0) { return false; }\n                if (A_fn_3 == 0) { return false; }\n                if (A_fn_4 == 0) { return false; }\n                if (A_fg_1 == 0) { return false; }\n                if (A_fg_2 == 0) { return false; }\n                if (A_sp == 0) { return false; }\n                if (A_sh == 0) { return false; }\n\n                if (response.dripper_1 !== A_dp_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_2 !== A_dp_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_3 !== A_dp_3) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 3 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_4 !== A_dp_4) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 4 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_1 !== A_fn_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_2 !== A_fn_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_3 !== A_fn_3) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 3 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_4 !== A_fn_4) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 4 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n\n                if (response.foggy_1 !== A_fg_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.foggy_2 !== A_fg_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['spray'] !== A_sp) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'spray : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['shading'] !== A_sh) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'shading : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                else {\n                    msg.payload = {\n                        status: 'true',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'success',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n            }\n        }\n\n    }\n}\n// else{\n//     msg.payload = old_minute\n//     return msg\n// }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 2180,
        "wires": [
            [
                "3c2bba7835e1b45a",
                "52aa4dc299a76c56"
            ]
        ]
    },
    {
        "id": "00e0777aae26963d",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"set_config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2080,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "08a0d74da5aabd8e",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"response\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2040,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "1f989b997e3445cc",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2320,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "b38ab27a1d06f988",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_dp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2120,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "5376a0a9e2fa96f9",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2360,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "5b1b374d45e0406f",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_3\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2400,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "a10a79747723e21d",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_4\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2440,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "5529b6d4cbe974db",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_fan\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2160,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "5ca994021183c11b",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_fg\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2200,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "934d309e3b8ec1d2",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_sp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2240,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "e6412881cf6ea6dc",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_sh\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2280,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "abbd475b68a7c98c",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2480,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "c9d0e4b887c4b941",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2520,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "3f5d1ac960e3cfa0",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_3\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2560,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "208b66fa068d4d38",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_4\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2600,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "166e659fcc5a9ebc",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fg_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2640,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "ce5c12f2de771f3c",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fg_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2680,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "6a55e68774e097df",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_sp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2720,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "71c2ed5d0c6a41b3",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_sh\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2760,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "d4e13055599e8164",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"get_status\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1960,
        "wires": [
            [
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "d9e3e2cb82377d09",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "connect/status/TUSMT003",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 250,
        "y": 1960,
        "wires": [
            [
                "d4e13055599e8164"
            ]
        ]
    },
    {
        "id": "a395734cf446c183",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "let output = msg.payload;\nmsg.topic = \"get_mode\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2920,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "7e72ee83310f095e",
        "type": "function",
        "z": "f12",
        "name": "function 63",
        "func": "if (msg.topic == \"get_time\") {\n    context.set('get_time', msg.payload);\n}\nif (msg.topic == \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic == \"get_mode\") {\n    context.set('get_mode', msg.payload);\n}\nif (msg.topic == \"response\") {\n    context.set('response', msg.payload);\n}\nif (msg.topic == \"set_config\") {\n    context.set('set_config', msg.payload);\n}\nif (msg.topic == \"M_dp\") {\n    context.set('M_dp', msg.payload);\n}\nif (msg.topic == \"M_fan\") {\n    context.set('M_fan', msg.payload);\n}\nif (msg.topic == \"M_fg\") {\n    context.set('M_fg', msg.payload);\n}\nif (msg.topic == \"M_sp\") {\n    context.set('M_sp', msg.payload);\n}\nif (msg.topic == \"M_sh\") {\n    context.set('M_sh', msg.payload);\n}\n// ---------------------------------\nif (msg.topic == \"A_dp_1\") {\n    context.set('A_dp_1', msg.payload);\n}\nif (msg.topic == \"A_dp_2\") {\n    context.set('A_dp_2', msg.payload);\n}\nif (msg.topic == \"A_dp_3\") {\n    context.set('A_dp_3', msg.payload);\n}\nif (msg.topic == \"A_dp_4\") {\n    context.set('A_dp_4', msg.payload);\n}\nif (msg.topic == \"A_fn_1\") {\n    context.set('A_fn_1', msg.payload);\n}\nif (msg.topic == \"A_fn_2\") {\n    context.set('A_fn_2', msg.payload);\n}\nif (msg.topic == \"A_fn_3\") {\n    context.set('A_fn_3', msg.payload);\n}\nif (msg.topic == \"A_fn_4\") {\n    context.set('A_fn_4', msg.payload);\n}\nif (msg.topic == \"A_fg_1\") {\n    context.set('A_fg_1', msg.payload);\n}\nif (msg.topic == \"A_fg_2\") {\n    context.set('A_fg_2', msg.payload);\n}\nif (msg.topic == \"A_sp\") {\n    context.set('A_sp', msg.payload);\n}\nif (msg.topic == \"A_sh\") {\n    context.set('A_sh', msg.payload);\n}\nlet timestamp = context.get('get_time') || \"NO\";\nlet get_status = context.get('get_status') || 0;\n\nlet nowminute = Number(timestamp.time);\nlet old_minute = context.get('old_nowminute') || 0;\nold_minute = Number(old_minute)\nif (timestamp === \"NO\") { return false; }\nif (old_minute != nowminute) {\n    context.set('old_nowminute', nowminute);\n\n    let get_mode = context.get('get_mode') || 0;\n    let response = context.get('response') || 0;\n    if (get_status == 0) { return false; }\n    if (get_mode == 0) { return false; }\n    if (response == 0) { return false; }\n    if (get_status === \"online\") {\n\n        // msg.payload = old_minute+\" \"+get_status // JSON.stringify(jsonstring);\n        // return msg;\n\n        if (response.mode !== get_mode) {\n            msg.payload = {\n                status: 'false',\n                sn: response.serial_id,\n                mode: get_mode,\n                response: 'mode : False',\n                time: nowminute\n            }\n            return msg;\n        } else { // กรณีโหมดตรง\n            if (response.mode === \"Manual\") {\n\n                let set_config = context.get('set_config') || 0;\n                let M_dp = context.get('M_dp') || 0;\n                let M_fan = context.get('M_fan') || 0;\n                let M_fg = context.get('M_fg') || 0;\n                let M_sp = context.get('M_sp') || 0;\n                let M_sh = context.get('M_sh') || 0;\n\n                if (set_config == 0) { return false; }\n                if (M_dp == 0) { return false; }\n                if (M_fan == 0) { return false; }\n                if (M_fg == 0) { return false; }\n                if (M_sp == 0) { return false; }\n                if (M_sh == 0) { return false; }\n\n                // msg.payload = old_minute + \" \" + get_status + \" \" + get_mode // JSON.stringify(jsonstring);\n                // return msg;\n                let check_dp = [], check_fan = [], check_fg = [];\n\n                for (let i = 1; i < 5; i++) {\n                    if (set_config.config_manual['dripper_' + i] === \"ON\") {\n                        if (response['dripper_' + i] !== M_dp) {\n                            check_dp.push(1)\n                        } else {\n                            check_dp.push(0)\n                        }\n                    }\n                    if (set_config.config_manual['fan_' + i] === \"ON\") {\n                        if (response['fan_' + i] !== M_fan) {\n                            check_fan.push(1)\n                        } else {\n                            check_fan.push(0)\n                        }\n                    }\n                    if (i < 3) {\n                        if (set_config.config_manual['foggy_' + i] === \"ON\") {\n                            if (response['foggy_' + i] !== M_fan) {\n                                check_fg.push(1)\n                            } else {\n                                check_fg.push(0)\n                            }\n                        }\n                    }\n                }\n                if (check_dp.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (check_fan.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (check_fg.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['spray'] !== M_sp) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'spray : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['shading'] !== M_sh) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'shading : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                else {\n                    msg.payload = {\n                        status: 'true',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'success',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n            }\n            else { // mode Auto\n                let A_dp_1 = context.get('A_dp_1') || 0;\n                let A_dp_2 = context.get('A_dp_2') || 0;\n                let A_dp_3 = context.get('A_dp_3') || 0;\n                let A_dp_4 = context.get('A_dp_4') || 0;\n                let A_fn_1 = context.get('A_fn_1') || 0;\n                let A_fn_2 = context.get('A_fn_2') || 0;\n                let A_fn_3 = context.get('A_fn_3') || 0;\n                let A_fn_4 = context.get('A_fn_4') || 0;\n                let A_fg_1 = context.get('A_fg_1') || 0;\n                let A_fg_2 = context.get('A_fg_2') || 0;\n                let A_sp = context.get('M_sp') || 0;\n                let A_sh = context.get('M_sh') || 0;\n\n                if (A_dp_1 == 0) { return false; }\n                if (A_dp_2 == 0) { return false; }\n                if (A_dp_3 == 0) { return false; }\n                if (A_dp_4 == 0) { return false; }\n                if (A_fn_1 == 0) { return false; }\n                if (A_fn_2 == 0) { return false; }\n                if (A_fn_3 == 0) { return false; }\n                if (A_fn_4 == 0) { return false; }\n                if (A_fg_1 == 0) { return false; }\n                if (A_fg_2 == 0) { return false; }\n                if (A_sp == 0) { return false; }\n                if (A_sh == 0) { return false; }\n\n                if (response.dripper_1 !== A_dp_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_2 !== A_dp_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_3 !== A_dp_3) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 3 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_4 !== A_dp_4) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 4 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_1 !== A_fn_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_2 !== A_fn_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_3 !== A_fn_3) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 3 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_4 !== A_fn_4) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 4 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n\n                if (response.foggy_1 !== A_fg_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.foggy_2 !== A_fg_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['spray'] !== A_sp) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'spray : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['shading'] !== A_sh) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'shading : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                else {\n                    msg.payload = {\n                        status: 'true',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'success',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n            }\n        }\n\n    }\n}\n// else{\n//     msg.payload = old_minute\n//     return msg\n// }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 3100,
        "wires": [
            [
                "b3e088c89095d43e",
                "27ee4b8ac28e2806"
            ]
        ]
    },
    {
        "id": "f964f3230549eff1",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"set_config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 3000,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "58d326024055fed4",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"response\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2960,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "997f484e7b8fe73b",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 3240,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "0916a47a275bde98",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_dp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 3040,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "c36db9a5a7689a84",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 3280,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "ef3f603db76bdcae",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_3\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 3320,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "6ea233fa1d19c0fa",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_4\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 3360,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "66ded0e05dfc1c29",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_fan\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 3080,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "3af480b4767a9967",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_fg\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 3120,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "e3562eca92cdf463",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_sp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 3160,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "59037450b6280995",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_sh\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 3200,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "34072f4409602553",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 3400,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "efe6123293e8b138",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 3440,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "fc5b849ee5c0c69b",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_3\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 3480,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "7a44e66a4186a5be",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_4\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 3520,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "a3e00909cedf8098",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fg_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 3560,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "e1ce6f3e3e8308d4",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fg_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 3600,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "9b4f09c4156b23ff",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_sp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 3640,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "5029056bb8383026",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_sh\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 3680,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "1e880c68688710ca",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"get_status\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 2880,
        "wires": [
            [
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "8804a603cf301bdf",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "connect/status/TUSMT004",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 250,
        "y": 2880,
        "wires": [
            [
                "1e880c68688710ca"
            ]
        ]
    },
    {
        "id": "1f1fc31e2c3b0a8a",
        "type": "inject",
        "z": "f12",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "20",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 60,
        "wires": [
            [
                "1e2d5ff26b16faa3"
            ]
        ]
    },
    {
        "id": "1e2d5ff26b16faa3",
        "type": "moment",
        "z": "f12",
        "name": "timmer",
        "topic": "get_time",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "hours",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "C",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 450,
        "y": 60,
        "wires": [
            [
                "476c0f82b9f9ce4a"
            ]
        ]
    },
    {
        "id": "ce215b8eac2f138f",
        "type": "debug",
        "z": "f12",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 1280,
        "wires": []
    },
    {
        "id": "89f5fcc057597451",
        "type": "function",
        "z": "f12",
        "name": "function 64",
        "func": "let output = msg.payload\nif (output.status === \"false\"){\n    msg.payload = output\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1240,
        "wires": [
            [
                "042f2ecb7252c27d",
                "c9199bafd10f8514",
                "0291854a49f6c8a5"
            ]
        ]
    },
    {
        "id": "1efcfeaa22a1351e",
        "type": "function",
        "z": "f12",
        "name": "function 65",
        "func": "msg.topic = \"get_time\";\nmsg.payload = msg.payload\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1280,
        "wires": [
            [
                "ce215b8eac2f138f",
                "9a74fab9ee9450cd"
            ]
        ]
    },
    {
        "id": "042f2ecb7252c27d",
        "type": "debug",
        "z": "f12",
        "name": "debug 9",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 1240,
        "wires": []
    },
    {
        "id": "1a103edef1af8015",
        "type": "debug",
        "z": "f12",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 2220,
        "wires": []
    },
    {
        "id": "3c2bba7835e1b45a",
        "type": "function",
        "z": "f12",
        "name": "function 66",
        "func": "let output = msg.payload\nif (output.status === \"false\"){\n    msg.payload = output\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 2180,
        "wires": [
            [
                "9cc3a6750029be6f",
                "c9199bafd10f8514",
                "de255d4ae3139b81"
            ]
        ]
    },
    {
        "id": "52aa4dc299a76c56",
        "type": "function",
        "z": "f12",
        "name": "function 67",
        "func": "msg.topic = \"get_time\";\nmsg.payload = msg.payload\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 2220,
        "wires": [
            [
                "1a103edef1af8015",
                "7e72ee83310f095e"
            ]
        ]
    },
    {
        "id": "9cc3a6750029be6f",
        "type": "debug",
        "z": "f12",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 2180,
        "wires": []
    },
    {
        "id": "a43eff6318887cc2",
        "type": "debug",
        "z": "f12",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 3060,
        "wires": []
    },
    {
        "id": "b3e088c89095d43e",
        "type": "function",
        "z": "f12",
        "name": "function 68",
        "func": "let output = msg.payload\nif (output.status === \"false\"){\n    msg.payload = output\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 3100,
        "wires": [
            [
                "6c737918b3d1a2da",
                "c9199bafd10f8514",
                "55c7d8de793db07c"
            ]
        ]
    },
    {
        "id": "27ee4b8ac28e2806",
        "type": "function",
        "z": "f12",
        "name": "function 69",
        "func": "msg.topic = \"get_time\";\nmsg.payload = msg.payload\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 3060,
        "wires": [
            [
                "a43eff6318887cc2",
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "6c737918b3d1a2da",
        "type": "debug",
        "z": "f12",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 3100,
        "wires": []
    },
    {
        "id": "42fd964d76cc2aa7",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT005/control/loads/mode",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1610,
        "y": 120,
        "wires": [
            [
                "9e54b61f6fde7642"
            ]
        ]
    },
    {
        "id": "d9b098d932d98267",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT005/control/set_config",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1620,
        "y": 200,
        "wires": [
            [
                "075e6f0866c67e58"
            ]
        ]
    },
    {
        "id": "00ed1cefd397f9f4",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT005/control/response",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1620,
        "y": 160,
        "wires": [
            [
                "b75399c541447157"
            ]
        ]
    },
    {
        "id": "b826e0ef3a618653",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT005/control/loads_auto/dripper_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1580,
        "y": 440,
        "wires": [
            [
                "cbdc8e8e928d74d7"
            ]
        ]
    },
    {
        "id": "bdf9eb50ab2b7df1",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT005/control/loads/dripper",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1610,
        "y": 240,
        "wires": [
            [
                "88dcde65c6100a6b"
            ]
        ]
    },
    {
        "id": "ebcb8375075ad87b",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT005/control/loads_auto/dripper_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1580,
        "y": 480,
        "wires": [
            [
                "252adcb6187f4703"
            ]
        ]
    },
    {
        "id": "4abf598bde017dcb",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT005/control/loads_auto/dripper_3",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1580,
        "y": 520,
        "wires": [
            [
                "54eb2f044f2045ba"
            ]
        ]
    },
    {
        "id": "e81281967e3ee9f1",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT005/control/loads_auto/dripper_4",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1580,
        "y": 560,
        "wires": [
            [
                "72329ce5945350db"
            ]
        ]
    },
    {
        "id": "f73e01268754aba4",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT005/control/loads/fan",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1620,
        "y": 280,
        "wires": [
            [
                "28b220c3b6c2918b"
            ]
        ]
    },
    {
        "id": "d8846e87f6c61c9b",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT005/control/loads/foggy",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1610,
        "y": 320,
        "wires": [
            [
                "ad934edd39f48ac7"
            ]
        ]
    },
    {
        "id": "706d08fec1305731",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT005/control/loads/spray",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1610,
        "y": 360,
        "wires": [
            [
                "ca2de62c42783089"
            ]
        ]
    },
    {
        "id": "c70b3fc55abf592e",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT005/control/loads/shading",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1610,
        "y": 400,
        "wires": [
            [
                "3836607d2f2b5a4c"
            ]
        ]
    },
    {
        "id": "fc532b30654b4e21",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT005/control/loads_auto/fan_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1600,
        "y": 600,
        "wires": [
            [
                "74efd290bce9f210"
            ]
        ]
    },
    {
        "id": "9ffea63c716a551e",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT005/control/loads_auto/fan_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1600,
        "y": 640,
        "wires": [
            [
                "18f20ea340eeb437"
            ]
        ]
    },
    {
        "id": "aadf138d150b7dd4",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT005/control/loads_auto/fan_3",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1600,
        "y": 680,
        "wires": [
            [
                "2a4c4c370c7cd9d5"
            ]
        ]
    },
    {
        "id": "5fd8207c22934992",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT005/control/loads_auto/fan_4",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1600,
        "y": 720,
        "wires": [
            [
                "f5aa5ec412696c19"
            ]
        ]
    },
    {
        "id": "23703f073613aa1f",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT005/control/loads_auto/foggy_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1590,
        "y": 760,
        "wires": [
            [
                "9c7be0a4c954ded5"
            ]
        ]
    },
    {
        "id": "d3440741d3004939",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT005/control/loads_auto/foggy_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1590,
        "y": 800,
        "wires": [
            [
                "e166401fe6fa30d6"
            ]
        ]
    },
    {
        "id": "bd132b7f29f4f755",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT005/control/loads_auto/spray",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1600,
        "y": 840,
        "wires": [
            [
                "b213fb98d07a0a04"
            ]
        ]
    },
    {
        "id": "d5a28dc3426e3ac1",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT005/control/loads_auto/shading",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1590,
        "y": 880,
        "wires": [
            [
                "376831ac618f0997"
            ]
        ]
    },
    {
        "id": "9e54b61f6fde7642",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "let output = msg.payload;\nmsg.topic = \"get_mode\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 120,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "c503df109e3ff00c",
        "type": "function",
        "z": "f12",
        "name": "function 64",
        "func": "if (msg.topic == \"get_time\") {\n    context.set('get_time', msg.payload);\n}\nif (msg.topic == \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic == \"get_mode\") {\n    context.set('get_mode', msg.payload);\n}\nif (msg.topic == \"response\") {\n    context.set('response', msg.payload);\n}\nif (msg.topic == \"set_config\") {\n    context.set('set_config', msg.payload);\n}\nif (msg.topic == \"M_dp\") {\n    context.set('M_dp', msg.payload);\n}\nif (msg.topic == \"M_fan\") {\n    context.set('M_fan', msg.payload);\n}\nif (msg.topic == \"M_fg\") {\n    context.set('M_fg', msg.payload);\n}\nif (msg.topic == \"M_sp\") {\n    context.set('M_sp', msg.payload);\n}\nif (msg.topic == \"M_sh\") {\n    context.set('M_sh', msg.payload);\n}\n// ---------------------------------\nif (msg.topic == \"A_dp_1\") {\n    context.set('A_dp_1', msg.payload);\n}\nif (msg.topic == \"A_dp_2\") {\n    context.set('A_dp_2', msg.payload);\n}\nif (msg.topic == \"A_dp_3\") {\n    context.set('A_dp_3', msg.payload);\n}\nif (msg.topic == \"A_dp_4\") {\n    context.set('A_dp_4', msg.payload);\n}\nif (msg.topic == \"A_fn_1\") {\n    context.set('A_fn_1', msg.payload);\n}\nif (msg.topic == \"A_fn_2\") {\n    context.set('A_fn_2', msg.payload);\n}\nif (msg.topic == \"A_fn_3\") {\n    context.set('A_fn_3', msg.payload);\n}\nif (msg.topic == \"A_fn_4\") {\n    context.set('A_fn_4', msg.payload);\n}\nif (msg.topic == \"A_fg_1\") {\n    context.set('A_fg_1', msg.payload);\n}\nif (msg.topic == \"A_fg_2\") {\n    context.set('A_fg_2', msg.payload);\n}\nif (msg.topic == \"A_sp\") {\n    context.set('A_sp', msg.payload);\n}\nif (msg.topic == \"A_sh\") {\n    context.set('A_sh', msg.payload);\n}\nlet timestamp = context.get('get_time') || \"NO\";\nlet get_status = context.get('get_status') || 0;\n\nlet nowminute = Number(timestamp.time);\nlet old_minute = context.get('old_nowminute') || 0;\nold_minute = Number(old_minute)\nif (timestamp === \"NO\") { return false; }\nif (old_minute != nowminute) {\n    context.set('old_nowminute', nowminute);\n\n    let get_mode = context.get('get_mode') || 0;\n    let response = context.get('response') || 0;\n    if (get_status == 0) { return false; }\n    if (get_mode == 0) { return false; }\n    if (response == 0) { return false; }\n    if (get_status === \"online\") {\n\n        // msg.payload = old_minute+\" \"+get_status // JSON.stringify(jsonstring);\n        // return msg;\n\n        if (response.mode !== get_mode) {\n            msg.payload = {\n                status: 'false',\n                sn: response.serial_id,\n                mode: get_mode,\n                response: 'mode : False',\n                time: nowminute\n            }\n            return msg;\n        } else { // กรณีโหมดตรง\n            if (response.mode === \"Manual\") {\n\n                let set_config = context.get('set_config') || 0;\n                let M_dp = context.get('M_dp') || 0;\n                let M_fan = context.get('M_fan') || 0;\n                let M_fg = context.get('M_fg') || 0;\n                let M_sp = context.get('M_sp') || 0;\n                let M_sh = context.get('M_sh') || 0;\n\n                if (set_config == 0) { return false; }\n                if (M_dp == 0) { return false; }\n                if (M_fan == 0) { return false; }\n                if (M_fg == 0) { return false; }\n                if (M_sp == 0) { return false; }\n                if (M_sh == 0) { return false; }\n\n                // msg.payload = old_minute + \" \" + get_status + \" \" + get_mode // JSON.stringify(jsonstring);\n                // return msg;\n                let check_dp = [], check_fan = [], check_fg = [];\n\n                for (let i = 1; i < 5; i++) {\n                    if (set_config.config_manual['dripper_' + i] === \"ON\") {\n                        if (response['dripper_' + i] !== M_dp) {\n                            check_dp.push(1)\n                        } else {\n                            check_dp.push(0)\n                        }\n                    }\n                    if (set_config.config_manual['fan_' + i] === \"ON\") {\n                        if (response['fan_' + i] !== M_fan) {\n                            check_fan.push(1)\n                        } else {\n                            check_fan.push(0)\n                        }\n                    }\n                    if (i < 3) {\n                        if (set_config.config_manual['foggy_' + i] === \"ON\") {\n                            if (response['foggy_' + i] !== M_fan) {\n                                check_fg.push(1)\n                            } else {\n                                check_fg.push(0)\n                            }\n                        }\n                    }\n                }\n                if (check_dp.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (check_fan.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (check_fg.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['spray'] !== M_sp) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'spray : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['shading'] !== M_sh) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'shading : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                else {\n                    msg.payload = {\n                        status: 'true',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'success',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n            }\n            else { // mode Auto\n                let A_dp_1 = context.get('A_dp_1') || 0;\n                let A_dp_2 = context.get('A_dp_2') || 0;\n                let A_dp_3 = context.get('A_dp_3') || 0;\n                let A_dp_4 = context.get('A_dp_4') || 0;\n                let A_fn_1 = context.get('A_fn_1') || 0;\n                let A_fn_2 = context.get('A_fn_2') || 0;\n                let A_fn_3 = context.get('A_fn_3') || 0;\n                let A_fn_4 = context.get('A_fn_4') || 0;\n                let A_fg_1 = context.get('A_fg_1') || 0;\n                let A_fg_2 = context.get('A_fg_2') || 0;\n                let A_sp = context.get('M_sp') || 0;\n                let A_sh = context.get('M_sh') || 0;\n\n                if (A_dp_1 == 0) { return false; }\n                if (A_dp_2 == 0) { return false; }\n                if (A_dp_3 == 0) { return false; }\n                if (A_dp_4 == 0) { return false; }\n                if (A_fn_1 == 0) { return false; }\n                if (A_fn_2 == 0) { return false; }\n                if (A_fn_3 == 0) { return false; }\n                if (A_fn_4 == 0) { return false; }\n                if (A_fg_1 == 0) { return false; }\n                if (A_fg_2 == 0) { return false; }\n                if (A_sp == 0) { return false; }\n                if (A_sh == 0) { return false; }\n\n                if (response.dripper_1 !== A_dp_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_2 !== A_dp_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_3 !== A_dp_3) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 3 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_4 !== A_dp_4) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 4 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_1 !== A_fn_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_2 !== A_fn_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_3 !== A_fn_3) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 3 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_4 !== A_fn_4) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 4 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n\n                if (response.foggy_1 !== A_fg_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.foggy_2 !== A_fg_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['spray'] !== A_sp) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'spray : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['shading'] !== A_sh) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'shading : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                else {\n                    msg.payload = {\n                        status: 'true',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'success',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n            }\n        }\n\n    }\n}\n// else{\n//     msg.payload = old_minute\n//     return msg\n// }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 300,
        "wires": [
            [
                "620fa3a1906235d2",
                "a1c98f44cf29e2f8"
            ]
        ]
    },
    {
        "id": "075e6f0866c67e58",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"set_config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 200,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "b75399c541447157",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"response\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 160,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "cbdc8e8e928d74d7",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 440,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "88dcde65c6100a6b",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_dp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 240,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "252adcb6187f4703",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 480,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "54eb2f044f2045ba",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_3\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 520,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "72329ce5945350db",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_4\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 560,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "28b220c3b6c2918b",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_fan\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 280,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "ad934edd39f48ac7",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_fg\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 320,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "ca2de62c42783089",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_sp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 360,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "3836607d2f2b5a4c",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_sh\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 400,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "74efd290bce9f210",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 600,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "18f20ea340eeb437",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 640,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "2a4c4c370c7cd9d5",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_3\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 680,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "f5aa5ec412696c19",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_4\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 720,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "9c7be0a4c954ded5",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fg_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 760,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "e166401fe6fa30d6",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fg_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 800,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "b213fb98d07a0a04",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_sp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 840,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "376831ac618f0997",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_sh\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 880,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "26fea91da468407e",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"get_status\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 80,
        "wires": [
            [
                "c503df109e3ff00c"
            ]
        ]
    },
    {
        "id": "acda1e291730a41a",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "connect/status/TUSMT005",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1630,
        "y": 80,
        "wires": [
            [
                "26fea91da468407e"
            ]
        ]
    },
    {
        "id": "a7020f7e4968a1c2",
        "type": "debug",
        "z": "f12",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2480,
        "y": 340,
        "wires": []
    },
    {
        "id": "620fa3a1906235d2",
        "type": "function",
        "z": "f12",
        "name": "function 70",
        "func": "let output = msg.payload\nif (output.status === \"false\"){\n    msg.payload = output\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 300,
        "wires": [
            [
                "26252548da79e894",
                "c9199bafd10f8514",
                "15e98d5050f5aa07"
            ]
        ]
    },
    {
        "id": "a1c98f44cf29e2f8",
        "type": "function",
        "z": "f12",
        "name": "function 71",
        "func": "msg.topic = \"get_time\";\nmsg.payload = msg.payload\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 340,
        "wires": [
            [
                "a7020f7e4968a1c2",
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "26252548da79e894",
        "type": "debug",
        "z": "f12",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2480,
        "y": 300,
        "wires": []
    },
    {
        "id": "4f4f4646d62c854f",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT006/control/loads/mode",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1610,
        "y": 1080,
        "wires": [
            [
                "b79bd482c12f31c8"
            ]
        ]
    },
    {
        "id": "2ae2bff2c63bd6f0",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT006/control/set_config",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1620,
        "y": 1160,
        "wires": [
            [
                "b988d71e79e0d755"
            ]
        ]
    },
    {
        "id": "5270598a7e58423b",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT006/control/response",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1620,
        "y": 1120,
        "wires": [
            [
                "992a25f210f74fac"
            ]
        ]
    },
    {
        "id": "0b6f1ded3426f066",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT006/control/loads_auto/dripper_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1580,
        "y": 1400,
        "wires": [
            [
                "2516ea17fb97ddad"
            ]
        ]
    },
    {
        "id": "ea9687ff1aa784fc",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT006/control/loads/dripper",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1610,
        "y": 1200,
        "wires": [
            [
                "fa7cead274f1ddfd"
            ]
        ]
    },
    {
        "id": "15dbed40e29584fe",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT006/control/loads_auto/dripper_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1580,
        "y": 1440,
        "wires": [
            [
                "e9033fa190253fdf"
            ]
        ]
    },
    {
        "id": "d0913da52b30fce1",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT006/control/loads_auto/dripper_3",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1580,
        "y": 1480,
        "wires": [
            [
                "7fec61755ea8936e"
            ]
        ]
    },
    {
        "id": "7ff5247991b17925",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT006/control/loads_auto/dripper_4",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1580,
        "y": 1520,
        "wires": [
            [
                "f76472d910f250f5"
            ]
        ]
    },
    {
        "id": "3a235c9da5f3778a",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT006/control/loads/fan",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1620,
        "y": 1240,
        "wires": [
            [
                "6214c32a81d60271"
            ]
        ]
    },
    {
        "id": "43673c7ffab04029",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT006/control/loads/foggy",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1610,
        "y": 1280,
        "wires": [
            [
                "07356a05725dd73e"
            ]
        ]
    },
    {
        "id": "6f0ea56af24bef49",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT006/control/loads/spray",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1610,
        "y": 1320,
        "wires": [
            [
                "2ee5f4046b721774"
            ]
        ]
    },
    {
        "id": "6d51f516d9fe2db3",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT006/control/loads/shading",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1610,
        "y": 1360,
        "wires": [
            [
                "e71b138a1ed82eb1"
            ]
        ]
    },
    {
        "id": "e2c4eba91258e9c6",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT006/control/loads_auto/fan_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1600,
        "y": 1560,
        "wires": [
            [
                "b0b9406b82b116bf"
            ]
        ]
    },
    {
        "id": "05cca501226bcc16",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT006/control/loads_auto/fan_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1600,
        "y": 1600,
        "wires": [
            [
                "1fe467f07a9d4ef0"
            ]
        ]
    },
    {
        "id": "e59ae4406cbb5b1e",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT006/control/loads_auto/fan_3",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1600,
        "y": 1640,
        "wires": [
            [
                "4bc51d4ed767d349"
            ]
        ]
    },
    {
        "id": "6ecd2f3926b84c71",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT006/control/loads_auto/fan_4",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1600,
        "y": 1680,
        "wires": [
            [
                "e95c38a885b48dfb"
            ]
        ]
    },
    {
        "id": "57a95185b58777f0",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT006/control/loads_auto/foggy_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1590,
        "y": 1720,
        "wires": [
            [
                "11d7269b2cf60707"
            ]
        ]
    },
    {
        "id": "735c201aa358c3fc",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT006/control/loads_auto/foggy_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1590,
        "y": 1760,
        "wires": [
            [
                "b5dde9fd14cec220"
            ]
        ]
    },
    {
        "id": "c93df63504099476",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT006/control/loads_auto/spray",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1600,
        "y": 1800,
        "wires": [
            [
                "b493e989990e3f4c"
            ]
        ]
    },
    {
        "id": "c09075538a0ccdb6",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT006/control/loads_auto/shading",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1590,
        "y": 1840,
        "wires": [
            [
                "2d44669664a8c4f0"
            ]
        ]
    },
    {
        "id": "72a90e6f68b13e93",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT007/control/loads/mode",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1610,
        "y": 2000,
        "wires": [
            [
                "d313615886b9f06c"
            ]
        ]
    },
    {
        "id": "a9217b3b779d6e10",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT007/control/set_config",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1620,
        "y": 2080,
        "wires": [
            [
                "0c36bf2d182ec4a7"
            ]
        ]
    },
    {
        "id": "ee2ec3bea208c76d",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT007/control/response",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1620,
        "y": 2040,
        "wires": [
            [
                "98e27522bb243957"
            ]
        ]
    },
    {
        "id": "a345f714ebf7bb13",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT007/control/loads_auto/dripper_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1580,
        "y": 2320,
        "wires": [
            [
                "be6313f43a23561f"
            ]
        ]
    },
    {
        "id": "f7853011371fb84b",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT007/control/loads/dripper",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1610,
        "y": 2120,
        "wires": [
            [
                "3e7680e23afcac32"
            ]
        ]
    },
    {
        "id": "3cbaec8a4813d388",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT007/control/loads_auto/dripper_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1580,
        "y": 2360,
        "wires": [
            [
                "3763801e7a03e229"
            ]
        ]
    },
    {
        "id": "c3288c7f2115a093",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT007/control/loads_auto/dripper_3",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1580,
        "y": 2400,
        "wires": [
            [
                "624a07ba666432b9"
            ]
        ]
    },
    {
        "id": "e910fd09609f67e6",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT007/control/loads_auto/dripper_4",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1580,
        "y": 2440,
        "wires": [
            [
                "9abaada904f0cd16"
            ]
        ]
    },
    {
        "id": "8af690adc67e7270",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT007/control/loads/fan",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1620,
        "y": 2160,
        "wires": [
            [
                "8a3a0d701e0161e8"
            ]
        ]
    },
    {
        "id": "af93a17c379e01df",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT007/control/loads/foggy",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1610,
        "y": 2200,
        "wires": [
            [
                "cad865008e08f8e0"
            ]
        ]
    },
    {
        "id": "839d72a73352f681",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT007/control/loads/spray",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1610,
        "y": 2240,
        "wires": [
            [
                "9685a5be20d44971"
            ]
        ]
    },
    {
        "id": "63f7aab05a259e90",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT007/control/loads/shading",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1610,
        "y": 2280,
        "wires": [
            [
                "a19b82cf525a6fa9"
            ]
        ]
    },
    {
        "id": "5804f56c529f870b",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT007/control/loads_auto/fan_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1600,
        "y": 2480,
        "wires": [
            [
                "92f500e1e3cfc839"
            ]
        ]
    },
    {
        "id": "fba2b52e6e34f5a6",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT007/control/loads_auto/fan_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1600,
        "y": 2520,
        "wires": [
            [
                "48b51a963781a676"
            ]
        ]
    },
    {
        "id": "31788161ce02ae43",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT007/control/loads_auto/fan_3",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1600,
        "y": 2560,
        "wires": [
            [
                "b6f36d142fca70e7"
            ]
        ]
    },
    {
        "id": "f7175a7401028251",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT007/control/loads_auto/fan_4",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1600,
        "y": 2600,
        "wires": [
            [
                "bba842bfc11105a1"
            ]
        ]
    },
    {
        "id": "e7c62a75a3234caf",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT007/control/loads_auto/foggy_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1590,
        "y": 2640,
        "wires": [
            [
                "0485262d43eb6f36"
            ]
        ]
    },
    {
        "id": "a838ce477fc2d279",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT007/control/loads_auto/foggy_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1590,
        "y": 2680,
        "wires": [
            [
                "1a6b3bdcf1f670a9"
            ]
        ]
    },
    {
        "id": "fc089f31a34964d6",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT007/control/loads_auto/spray",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1600,
        "y": 2720,
        "wires": [
            [
                "fe283483b440eef6"
            ]
        ]
    },
    {
        "id": "14babefa46550a61",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT007/control/loads_auto/shading",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1590,
        "y": 2760,
        "wires": [
            [
                "1067c1b7674fb5c9"
            ]
        ]
    },
    {
        "id": "b79bd482c12f31c8",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "let output = msg.payload;\nmsg.topic = \"get_mode\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1080,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "8f52e2926936463b",
        "type": "function",
        "z": "f12",
        "name": "function 65",
        "func": "if (msg.topic == \"get_time\") {\n    context.set('get_time', msg.payload);\n}\nif (msg.topic == \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic == \"get_mode\") {\n    context.set('get_mode', msg.payload);\n}\nif (msg.topic == \"response\") {\n    context.set('response', msg.payload);\n}\nif (msg.topic == \"set_config\") {\n    context.set('set_config', msg.payload);\n}\nif (msg.topic == \"M_dp\") {\n    context.set('M_dp', msg.payload);\n}\nif (msg.topic == \"M_fan\") {\n    context.set('M_fan', msg.payload);\n}\nif (msg.topic == \"M_fg\") {\n    context.set('M_fg', msg.payload);\n}\nif (msg.topic == \"M_sp\") {\n    context.set('M_sp', msg.payload);\n}\nif (msg.topic == \"M_sh\") {\n    context.set('M_sh', msg.payload);\n}\n// ---------------------------------\nif (msg.topic == \"A_dp_1\") {\n    context.set('A_dp_1', msg.payload);\n}\nif (msg.topic == \"A_dp_2\") {\n    context.set('A_dp_2', msg.payload);\n}\nif (msg.topic == \"A_dp_3\") {\n    context.set('A_dp_3', msg.payload);\n}\nif (msg.topic == \"A_dp_4\") {\n    context.set('A_dp_4', msg.payload);\n}\nif (msg.topic == \"A_fn_1\") {\n    context.set('A_fn_1', msg.payload);\n}\nif (msg.topic == \"A_fn_2\") {\n    context.set('A_fn_2', msg.payload);\n}\nif (msg.topic == \"A_fn_3\") {\n    context.set('A_fn_3', msg.payload);\n}\nif (msg.topic == \"A_fn_4\") {\n    context.set('A_fn_4', msg.payload);\n}\nif (msg.topic == \"A_fg_1\") {\n    context.set('A_fg_1', msg.payload);\n}\nif (msg.topic == \"A_fg_2\") {\n    context.set('A_fg_2', msg.payload);\n}\nif (msg.topic == \"A_sp\") {\n    context.set('A_sp', msg.payload);\n}\nif (msg.topic == \"A_sh\") {\n    context.set('A_sh', msg.payload);\n}\nlet timestamp = context.get('get_time') || \"NO\";\nlet get_status = context.get('get_status') || 0;\n\nlet nowminute = Number(timestamp.time);\nlet old_minute = context.get('old_nowminute') || 0;\nold_minute = Number(old_minute)\nif (timestamp === \"NO\") { return false; }\nif (old_minute != nowminute) {\n    context.set('old_nowminute', nowminute);\n\n    let get_mode = context.get('get_mode') || 0;\n    let response = context.get('response') || 0;\n    if (get_status == 0) { return false; }\n    if (get_mode == 0) { return false; }\n    if (response == 0) { return false; }\n    if (get_status === \"online\") {\n\n        // msg.payload = old_minute+\" \"+get_status // JSON.stringify(jsonstring);\n        // return msg;\n\n        if (response.mode !== get_mode) {\n            msg.payload = {\n                status: 'false',\n                sn: response.serial_id,\n                mode: get_mode,\n                response: 'mode : False',\n                time: nowminute\n            }\n            return msg;\n        } else { // กรณีโหมดตรง\n            if (response.mode === \"Manual\") {\n\n                let set_config = context.get('set_config') || 0;\n                let M_dp = context.get('M_dp') || 0;\n                let M_fan = context.get('M_fan') || 0;\n                let M_fg = context.get('M_fg') || 0;\n                let M_sp = context.get('M_sp') || 0;\n                let M_sh = context.get('M_sh') || 0;\n\n                if (set_config == 0) { return false; }\n                if (M_dp == 0) { return false; }\n                if (M_fan == 0) { return false; }\n                if (M_fg == 0) { return false; }\n                if (M_sp == 0) { return false; }\n                if (M_sh == 0) { return false; }\n\n                // msg.payload = old_minute + \" \" + get_status + \" \" + get_mode // JSON.stringify(jsonstring);\n                // return msg;\n                let check_dp = [], check_fan = [], check_fg = [];\n\n                for (let i = 1; i < 5; i++) {\n                    if (set_config.config_manual['dripper_' + i] === \"ON\") {\n                        if (response['dripper_' + i] !== M_dp) {\n                            check_dp.push(1)\n                        } else {\n                            check_dp.push(0)\n                        }\n                    }\n                    if (set_config.config_manual['fan_' + i] === \"ON\") {\n                        if (response['fan_' + i] !== M_fan) {\n                            check_fan.push(1)\n                        } else {\n                            check_fan.push(0)\n                        }\n                    }\n                    if (i < 3) {\n                        if (set_config.config_manual['foggy_' + i] === \"ON\") {\n                            if (response['foggy_' + i] !== M_fan) {\n                                check_fg.push(1)\n                            } else {\n                                check_fg.push(0)\n                            }\n                        }\n                    }\n                }\n                if (check_dp.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (check_fan.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (check_fg.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['spray'] !== M_sp) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'spray : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['shading'] !== M_sh) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'shading : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                else {\n                    msg.payload = {\n                        status: 'true',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'success',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n            }\n            else { // mode Auto\n                let A_dp_1 = context.get('A_dp_1') || 0;\n                let A_dp_2 = context.get('A_dp_2') || 0;\n                let A_dp_3 = context.get('A_dp_3') || 0;\n                let A_dp_4 = context.get('A_dp_4') || 0;\n                let A_fn_1 = context.get('A_fn_1') || 0;\n                let A_fn_2 = context.get('A_fn_2') || 0;\n                let A_fn_3 = context.get('A_fn_3') || 0;\n                let A_fn_4 = context.get('A_fn_4') || 0;\n                let A_fg_1 = context.get('A_fg_1') || 0;\n                let A_fg_2 = context.get('A_fg_2') || 0;\n                let A_sp = context.get('M_sp') || 0;\n                let A_sh = context.get('M_sh') || 0;\n\n                if (A_dp_1 == 0) { return false; }\n                if (A_dp_2 == 0) { return false; }\n                if (A_dp_3 == 0) { return false; }\n                if (A_dp_4 == 0) { return false; }\n                if (A_fn_1 == 0) { return false; }\n                if (A_fn_2 == 0) { return false; }\n                if (A_fn_3 == 0) { return false; }\n                if (A_fn_4 == 0) { return false; }\n                if (A_fg_1 == 0) { return false; }\n                if (A_fg_2 == 0) { return false; }\n                if (A_sp == 0) { return false; }\n                if (A_sh == 0) { return false; }\n\n                if (response.dripper_1 !== A_dp_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_2 !== A_dp_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_3 !== A_dp_3) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 3 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_4 !== A_dp_4) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 4 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_1 !== A_fn_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_2 !== A_fn_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_3 !== A_fn_3) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 3 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_4 !== A_fn_4) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 4 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n\n                if (response.foggy_1 !== A_fg_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.foggy_2 !== A_fg_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['spray'] !== A_sp) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'spray : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['shading'] !== A_sh) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'shading : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                else {\n                    msg.payload = {\n                        status: 'true',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'success',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n            }\n        }\n\n    }\n}\n// else{\n//     msg.payload = old_minute\n//     return msg\n// }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 1260,
        "wires": [
            [
                "6a071a87e56480ce",
                "239057148dfa11a6"
            ]
        ]
    },
    {
        "id": "b988d71e79e0d755",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"set_config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1160,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "992a25f210f74fac",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"response\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1120,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "2516ea17fb97ddad",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1400,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "fa7cead274f1ddfd",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_dp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1200,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "e9033fa190253fdf",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1440,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "7fec61755ea8936e",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_3\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1480,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "f76472d910f250f5",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_4\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1520,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "6214c32a81d60271",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_fan\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1240,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "07356a05725dd73e",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_fg\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1280,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "2ee5f4046b721774",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_sp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1320,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "e71b138a1ed82eb1",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_sh\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1360,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "b0b9406b82b116bf",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1560,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "1fe467f07a9d4ef0",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1600,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "4bc51d4ed767d349",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_3\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1640,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "e95c38a885b48dfb",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_4\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1680,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "11d7269b2cf60707",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fg_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1720,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "b5dde9fd14cec220",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fg_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1760,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "b493e989990e3f4c",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_sp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1800,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "2d44669664a8c4f0",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_sh\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1840,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "e014bfa1244be7bc",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"get_status\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1040,
        "wires": [
            [
                "8f52e2926936463b"
            ]
        ]
    },
    {
        "id": "27007c87f1308bb6",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "connect/status/TUSMT006",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1630,
        "y": 1040,
        "wires": [
            [
                "e014bfa1244be7bc"
            ]
        ]
    },
    {
        "id": "d313615886b9f06c",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "let output = msg.payload;\nmsg.topic = \"get_mode\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2000,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "7a1d8a875890e60e",
        "type": "function",
        "z": "f12",
        "name": "function 66",
        "func": "if (msg.topic == \"get_time\") {\n    context.set('get_time', msg.payload);\n}\nif (msg.topic == \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic == \"get_mode\") {\n    context.set('get_mode', msg.payload);\n}\nif (msg.topic == \"response\") {\n    context.set('response', msg.payload);\n}\nif (msg.topic == \"set_config\") {\n    context.set('set_config', msg.payload);\n}\nif (msg.topic == \"M_dp\") {\n    context.set('M_dp', msg.payload);\n}\nif (msg.topic == \"M_fan\") {\n    context.set('M_fan', msg.payload);\n}\nif (msg.topic == \"M_fg\") {\n    context.set('M_fg', msg.payload);\n}\nif (msg.topic == \"M_sp\") {\n    context.set('M_sp', msg.payload);\n}\nif (msg.topic == \"M_sh\") {\n    context.set('M_sh', msg.payload);\n}\n// ---------------------------------\nif (msg.topic == \"A_dp_1\") {\n    context.set('A_dp_1', msg.payload);\n}\nif (msg.topic == \"A_dp_2\") {\n    context.set('A_dp_2', msg.payload);\n}\nif (msg.topic == \"A_dp_3\") {\n    context.set('A_dp_3', msg.payload);\n}\nif (msg.topic == \"A_dp_4\") {\n    context.set('A_dp_4', msg.payload);\n}\nif (msg.topic == \"A_fn_1\") {\n    context.set('A_fn_1', msg.payload);\n}\nif (msg.topic == \"A_fn_2\") {\n    context.set('A_fn_2', msg.payload);\n}\nif (msg.topic == \"A_fn_3\") {\n    context.set('A_fn_3', msg.payload);\n}\nif (msg.topic == \"A_fn_4\") {\n    context.set('A_fn_4', msg.payload);\n}\nif (msg.topic == \"A_fg_1\") {\n    context.set('A_fg_1', msg.payload);\n}\nif (msg.topic == \"A_fg_2\") {\n    context.set('A_fg_2', msg.payload);\n}\nif (msg.topic == \"A_sp\") {\n    context.set('A_sp', msg.payload);\n}\nif (msg.topic == \"A_sh\") {\n    context.set('A_sh', msg.payload);\n}\nlet timestamp = context.get('get_time') || \"NO\";\nlet get_status = context.get('get_status') || 0;\n\nlet nowminute = Number(timestamp.time);\nlet old_minute = context.get('old_nowminute') || 0;\nold_minute = Number(old_minute)\nif (timestamp === \"NO\") { return false; }\nif (old_minute != nowminute) {\n    context.set('old_nowminute', nowminute);\n\n    let get_mode = context.get('get_mode') || 0;\n    let response = context.get('response') || 0;\n    if (get_status == 0) { return false; }\n    if (get_mode == 0) { return false; }\n    if (response == 0) { return false; }\n    if (get_status === \"online\") {\n\n        // msg.payload = old_minute+\" \"+get_status // JSON.stringify(jsonstring);\n        // return msg;\n\n        if (response.mode !== get_mode) {\n            msg.payload = {\n                status: 'false',\n                sn: response.serial_id,\n                mode: get_mode,\n                response: 'mode : False',\n                time: nowminute\n            }\n            return msg;\n        } else { // กรณีโหมดตรง\n            if (response.mode === \"Manual\") {\n\n                let set_config = context.get('set_config') || 0;\n                let M_dp = context.get('M_dp') || 0;\n                let M_fan = context.get('M_fan') || 0;\n                let M_fg = context.get('M_fg') || 0;\n                let M_sp = context.get('M_sp') || 0;\n                let M_sh = context.get('M_sh') || 0;\n\n                if (set_config == 0) { return false; }\n                if (M_dp == 0) { return false; }\n                if (M_fan == 0) { return false; }\n                if (M_fg == 0) { return false; }\n                if (M_sp == 0) { return false; }\n                if (M_sh == 0) { return false; }\n\n                // msg.payload = old_minute + \" \" + get_status + \" \" + get_mode // JSON.stringify(jsonstring);\n                // return msg;\n                let check_dp = [], check_fan = [], check_fg = [];\n\n                for (let i = 1; i < 5; i++) {\n                    if (set_config.config_manual['dripper_' + i] === \"ON\") {\n                        if (response['dripper_' + i] !== M_dp) {\n                            check_dp.push(1)\n                        } else {\n                            check_dp.push(0)\n                        }\n                    }\n                    if (set_config.config_manual['fan_' + i] === \"ON\") {\n                        if (response['fan_' + i] !== M_fan) {\n                            check_fan.push(1)\n                        } else {\n                            check_fan.push(0)\n                        }\n                    }\n                    if (i < 3) {\n                        if (set_config.config_manual['foggy_' + i] === \"ON\") {\n                            if (response['foggy_' + i] !== M_fan) {\n                                check_fg.push(1)\n                            } else {\n                                check_fg.push(0)\n                            }\n                        }\n                    }\n                }\n                if (check_dp.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (check_fan.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (check_fg.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['spray'] !== M_sp) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'spray : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['shading'] !== M_sh) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'shading : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                else {\n                    msg.payload = {\n                        status: 'true',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'success',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n            }\n            else { // mode Auto\n                let A_dp_1 = context.get('A_dp_1') || 0;\n                let A_dp_2 = context.get('A_dp_2') || 0;\n                let A_dp_3 = context.get('A_dp_3') || 0;\n                let A_dp_4 = context.get('A_dp_4') || 0;\n                let A_fn_1 = context.get('A_fn_1') || 0;\n                let A_fn_2 = context.get('A_fn_2') || 0;\n                let A_fn_3 = context.get('A_fn_3') || 0;\n                let A_fn_4 = context.get('A_fn_4') || 0;\n                let A_fg_1 = context.get('A_fg_1') || 0;\n                let A_fg_2 = context.get('A_fg_2') || 0;\n                let A_sp = context.get('M_sp') || 0;\n                let A_sh = context.get('M_sh') || 0;\n\n                if (A_dp_1 == 0) { return false; }\n                if (A_dp_2 == 0) { return false; }\n                if (A_dp_3 == 0) { return false; }\n                if (A_dp_4 == 0) { return false; }\n                if (A_fn_1 == 0) { return false; }\n                if (A_fn_2 == 0) { return false; }\n                if (A_fn_3 == 0) { return false; }\n                if (A_fn_4 == 0) { return false; }\n                if (A_fg_1 == 0) { return false; }\n                if (A_fg_2 == 0) { return false; }\n                if (A_sp == 0) { return false; }\n                if (A_sh == 0) { return false; }\n\n                if (response.dripper_1 !== A_dp_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_2 !== A_dp_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_3 !== A_dp_3) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 3 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_4 !== A_dp_4) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 4 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_1 !== A_fn_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_2 !== A_fn_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_3 !== A_fn_3) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 3 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_4 !== A_fn_4) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 4 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n\n                if (response.foggy_1 !== A_fg_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.foggy_2 !== A_fg_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['spray'] !== A_sp) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'spray : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['shading'] !== A_sh) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'shading : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                else {\n                    msg.payload = {\n                        status: 'true',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'success',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n            }\n        }\n\n    }\n}\n// else{\n//     msg.payload = old_minute\n//     return msg\n// }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 2180,
        "wires": [
            [
                "5dc9b3e9d195cbb5",
                "4e187a0e73f32620"
            ]
        ]
    },
    {
        "id": "0c36bf2d182ec4a7",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"set_config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2080,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "98e27522bb243957",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"response\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2040,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "be6313f43a23561f",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2320,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "3e7680e23afcac32",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_dp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2120,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "3763801e7a03e229",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2360,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "624a07ba666432b9",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_3\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2400,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "9abaada904f0cd16",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_4\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2440,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "8a3a0d701e0161e8",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_fan\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2160,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "cad865008e08f8e0",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_fg\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2200,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "9685a5be20d44971",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_sp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2240,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "a19b82cf525a6fa9",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_sh\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2280,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "92f500e1e3cfc839",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2480,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "48b51a963781a676",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2520,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "b6f36d142fca70e7",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_3\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2560,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "bba842bfc11105a1",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_4\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2600,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "0485262d43eb6f36",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fg_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2640,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "1a6b3bdcf1f670a9",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fg_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2680,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "fe283483b440eef6",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_sp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2720,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "1067c1b7674fb5c9",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_sh\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2760,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "7ab04952e15b2c76",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"get_status\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 1960,
        "wires": [
            [
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "d1e67357e358cce0",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "connect/status/TUSMT007",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1630,
        "y": 1960,
        "wires": [
            [
                "7ab04952e15b2c76"
            ]
        ]
    },
    {
        "id": "9a5ed0ac4c602dd5",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT008/control/loads/mode",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1610,
        "y": 2920,
        "wires": [
            [
                "2c4bac97386b8091"
            ]
        ]
    },
    {
        "id": "2c4bac97386b8091",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "let output = msg.payload;\nmsg.topic = \"get_mode\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2920,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "a1cb01dae27b0415",
        "type": "function",
        "z": "f12",
        "name": "function 1",
        "func": "if (msg.topic == \"get_time\") {\n    context.set('get_time', msg.payload);\n}\nif (msg.topic == \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic == \"get_mode\") {\n    context.set('get_mode', msg.payload);\n}\nif (msg.topic == \"response\") {\n    context.set('response', msg.payload);\n}\nif (msg.topic == \"set_config\") {\n    context.set('set_config', msg.payload);\n}\nif (msg.topic == \"M_dp\") {\n    context.set('M_dp', msg.payload);\n}\nif (msg.topic == \"M_fan\") {\n    context.set('M_fan', msg.payload);\n}\nif (msg.topic == \"M_fg\") {\n    context.set('M_fg', msg.payload);\n}\nif (msg.topic == \"M_sp\") {\n    context.set('M_sp', msg.payload);\n}\nif (msg.topic == \"M_sh\") {\n    context.set('M_sh', msg.payload);\n}\n// ---------------------------------\nif (msg.topic == \"A_dp_1\") {\n    context.set('A_dp_1', msg.payload);\n}\nif (msg.topic == \"A_dp_2\") {\n    context.set('A_dp_2', msg.payload);\n}\nif (msg.topic == \"A_dp_3\") {\n    context.set('A_dp_3', msg.payload);\n}\nif (msg.topic == \"A_dp_4\") {\n    context.set('A_dp_4', msg.payload);\n}\nif (msg.topic == \"A_fn_1\") {\n    context.set('A_fn_1', msg.payload);\n}\nif (msg.topic == \"A_fn_2\") {\n    context.set('A_fn_2', msg.payload);\n}\nif (msg.topic == \"A_fn_3\") {\n    context.set('A_fn_3', msg.payload);\n}\nif (msg.topic == \"A_fn_4\") {\n    context.set('A_fn_4', msg.payload);\n}\nif (msg.topic == \"A_fg_1\") {\n    context.set('A_fg_1', msg.payload);\n}\nif (msg.topic == \"A_fg_2\") {\n    context.set('A_fg_2', msg.payload);\n}\nif (msg.topic == \"A_sp\") {\n    context.set('A_sp', msg.payload);\n}\nif (msg.topic == \"A_sh\") {\n    context.set('A_sh', msg.payload);\n}\nlet timestamp = context.get('get_time') || \"NO\";\nlet get_status = context.get('get_status') || 0;\n\nlet nowminute = Number(timestamp.time);\nlet old_minute = context.get('old_nowminute') || 0;\nold_minute = Number(old_minute)\nif (timestamp === \"NO\") { return false; }\nif (old_minute != nowminute) {\n    context.set('old_nowminute', nowminute);\n\n    let get_mode = context.get('get_mode') || 0;\n    let response = context.get('response') || 0;\n    if (get_status == 0) { return false; }\n    if (get_mode == 0) { return false; }\n    if (response == 0) { return false; }\n    if (get_status === \"online\") {\n\n        // msg.payload = old_minute+\" \"+get_status // JSON.stringify(jsonstring);\n        // return msg;\n\n        if (response.mode !== get_mode) {\n            msg.payload = {\n                status: 'false',\n                sn: response.serial_id,\n                mode: get_mode,\n                response: 'mode : False',\n                time: nowminute\n            }\n            return msg;\n        } else { // กรณีโหมดตรง\n            if (response.mode === \"Manual\") {\n\n                let set_config = context.get('set_config') || 0;\n                let M_dp = context.get('M_dp') || 0;\n                let M_fan = context.get('M_fan') || 0;\n                let M_fg = context.get('M_fg') || 0;\n                let M_sp = context.get('M_sp') || 0;\n                let M_sh = context.get('M_sh') || 0;\n\n                if (set_config == 0) { return false; }\n                if (M_dp == 0) { return false; }\n                if (M_fan == 0) { return false; }\n                if (M_fg == 0) { return false; }\n                if (M_sp == 0) { return false; }\n                if (M_sh == 0) { return false; }\n\n                // msg.payload = old_minute + \" \" + get_status + \" \" + get_mode // JSON.stringify(jsonstring);\n                // return msg;\n                let check_dp = [], check_fan = [], check_fg = [];\n\n                for (let i = 1; i < 5; i++) {\n                    if (set_config.config_manual['dripper_' + i] === \"ON\") {\n                        if (response['dripper_' + i] !== M_dp) {\n                            check_dp.push(1)\n                        } else {\n                            check_dp.push(0)\n                        }\n                    }\n                    if (set_config.config_manual['fan_' + i] === \"ON\") {\n                        if (response['fan_' + i] !== M_fan) {\n                            check_fan.push(1)\n                        } else {\n                            check_fan.push(0)\n                        }\n                    }\n                    if (i < 3) {\n                        if (set_config.config_manual['foggy_' + i] === \"ON\") {\n                            if (response['foggy_' + i] !== M_fan) {\n                                check_fg.push(1)\n                            } else {\n                                check_fg.push(0)\n                            }\n                        }\n                    }\n                }\n                if (check_dp.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (check_fan.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (check_fg.filter(function (value) { return value == 1; }).length > 0) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['spray'] !== M_sp) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'spray : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['shading'] !== M_sh) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'shading : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                else {\n                    msg.payload = {\n                        status: 'true',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'success',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n            }\n            else { // mode Auto\n                let A_dp_1 = context.get('A_dp_1') || 0;\n                let A_dp_2 = context.get('A_dp_2') || 0;\n                let A_dp_3 = context.get('A_dp_3') || 0;\n                let A_dp_4 = context.get('A_dp_4') || 0;\n                let A_fn_1 = context.get('A_fn_1') || 0;\n                let A_fn_2 = context.get('A_fn_2') || 0;\n                let A_fn_3 = context.get('A_fn_3') || 0;\n                let A_fn_4 = context.get('A_fn_4') || 0;\n                let A_fg_1 = context.get('A_fg_1') || 0;\n                let A_fg_2 = context.get('A_fg_2') || 0;\n                let A_sp = context.get('A_sp') || 0;\n                let A_sh = context.get('A_sh') || 0;\n\n                if (A_dp_1 == 0) { return false; }\n                if (A_dp_2 == 0) { return false; }\n                if (A_dp_3 == 0) { return false; }\n                if (A_dp_4 == 0) { return false; }\n                if (A_fn_1 == 0) { return false; }\n                if (A_fn_2 == 0) { return false; }\n                if (A_fn_3 == 0) { return false; }\n                if (A_fn_4 == 0) { return false; }\n                if (A_fg_1 == 0) { return false; }\n                if (A_fg_2 == 0) { return false; }\n                if (A_sp == 0) { return false; }\n                if (A_sh == 0) { return false; }\n\n                if (response.dripper_1 !== A_dp_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_2 !== A_dp_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_3 !== A_dp_3) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 3 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.dripper_4 !== A_dp_4) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'dripper 4 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_1 !== A_fn_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_2 !== A_fn_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_3 !== A_fn_3) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 3 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.fan_4 !== A_fn_4) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'fan 4 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n\n                if (response.foggy_1 !== A_fg_1) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy 1 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response.foggy_2 !== A_fg_2) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'foggy 2 : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['spray'] !== A_sp) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'spray : False',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n                if (response['shading'] !== A_sh) {\n                    msg.payload = {\n                        status: 'false',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'shading : False',\n                        time: nowminute,\n                        r:response['shading'] ,\n                         a:A_sh\n                    }\n                    return msg;\n                }\n                else {\n                    msg.payload = {\n                        status: 'true',\n                        sn: response.serial_id,\n                        mode: response.mode,\n                        response: 'success',\n                        time: nowminute\n                    }\n                    return msg;\n                }\n            }\n        }\n\n    }\n}\n// else{\n//     msg.payload = old_minute\n//     return msg\n// }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2100,
        "y": 3100,
        "wires": [
            [
                "ac862ac3c0e952ea",
                "222f7bbd314459cd"
            ]
        ]
    },
    {
        "id": "a189fb21cb5b4313",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT008/control/set_config",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1620,
        "y": 3000,
        "wires": [
            [
                "a2a52a4d17df6017"
            ]
        ]
    },
    {
        "id": "a2a52a4d17df6017",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"set_config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 3000,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "6b434d51d225831b",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT008/control/response",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1620,
        "y": 2960,
        "wires": [
            [
                "ff0594267e2b1697"
            ]
        ]
    },
    {
        "id": "ff0594267e2b1697",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"response\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2960,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "bdf4b77870a9e26f",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT008/control/loads_auto/dripper_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1580,
        "y": 3240,
        "wires": [
            [
                "4d961b53a797cbc7"
            ]
        ]
    },
    {
        "id": "4d961b53a797cbc7",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 3240,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "5f9395a81bc7cbae",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT008/control/loads/dripper",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1610,
        "y": 3040,
        "wires": [
            [
                "638aa96deecb9f64"
            ]
        ]
    },
    {
        "id": "638aa96deecb9f64",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_dp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 3040,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "f13c6f3fdc8dd69b",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT008/control/loads_auto/dripper_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1580,
        "y": 3280,
        "wires": [
            [
                "1a10687e6a0823f5"
            ]
        ]
    },
    {
        "id": "1a10687e6a0823f5",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 3280,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "b3ce62fd0c014d3e",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT008/control/loads_auto/dripper_3",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1580,
        "y": 3320,
        "wires": [
            [
                "9fd0937d44f9843c"
            ]
        ]
    },
    {
        "id": "9fd0937d44f9843c",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_3\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 3320,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "849ba60388e6afbf",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT008/control/loads_auto/dripper_4",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1580,
        "y": 3360,
        "wires": [
            [
                "a8200c52b77ff2c2"
            ]
        ]
    },
    {
        "id": "a8200c52b77ff2c2",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_dp_4\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 3360,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "2a49e467488af8b4",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_fan\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 3080,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "375a21cccf63fe69",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT008/control/loads/fan",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1620,
        "y": 3080,
        "wires": [
            [
                "2a49e467488af8b4"
            ]
        ]
    },
    {
        "id": "4a25100e8a1f45fe",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT008/control/loads/foggy",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1610,
        "y": 3120,
        "wires": [
            [
                "649a4fc1c7b3926c"
            ]
        ]
    },
    {
        "id": "649a4fc1c7b3926c",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_fg\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 3120,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "fed4fd447e83ab9e",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT008/control/loads/spray",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1610,
        "y": 3160,
        "wires": [
            [
                "eed8ac9ff04edc0f"
            ]
        ]
    },
    {
        "id": "eed8ac9ff04edc0f",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_sp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 3160,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "8772660ec6c2f3e4",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT008/control/loads/shading",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1610,
        "y": 3200,
        "wires": [
            [
                "a787a5235e855786"
            ]
        ]
    },
    {
        "id": "a787a5235e855786",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"M_sh\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 3200,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "2cacc4d0bbdc0491",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT008/control/loads_auto/fan_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1600,
        "y": 3400,
        "wires": [
            [
                "0829882c7c235fb0"
            ]
        ]
    },
    {
        "id": "0829882c7c235fb0",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 3400,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "966cf5d809eba4de",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT008/control/loads_auto/fan_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1600,
        "y": 3440,
        "wires": [
            [
                "5c06c7c8c6072c2c"
            ]
        ]
    },
    {
        "id": "5c06c7c8c6072c2c",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 3440,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "bb325598bac8f0db",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT008/control/loads_auto/fan_3",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1600,
        "y": 3480,
        "wires": [
            [
                "d48743fa4b49d84a"
            ]
        ]
    },
    {
        "id": "d48743fa4b49d84a",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_3\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 3480,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "1d0c6b2404c8d56a",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT008/control/loads_auto/fan_4",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1600,
        "y": 3520,
        "wires": [
            [
                "a7ebdf2b0ae561ec"
            ]
        ]
    },
    {
        "id": "a7ebdf2b0ae561ec",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fn_4\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 3520,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "853ea5b013211478",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT008/control/loads_auto/foggy_1",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1590,
        "y": 3560,
        "wires": [
            [
                "158a64655ad29d3a"
            ]
        ]
    },
    {
        "id": "158a64655ad29d3a",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fg_1\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 3560,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "d8063d6c413a83f2",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_fg_2\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 3600,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "8e98d3dcd562afe9",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT008/control/loads_auto/foggy_2",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1590,
        "y": 3600,
        "wires": [
            [
                "d8063d6c413a83f2"
            ]
        ]
    },
    {
        "id": "3e5b86b6261d266b",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT008/control/loads_auto/spray",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1600,
        "y": 3640,
        "wires": [
            [
                "ed186a23311f5b5a"
            ]
        ]
    },
    {
        "id": "ed186a23311f5b5a",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_sp\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 3640,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "e1aba0f19585acca",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "TUSMT008/control/loads_auto/shading",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1590,
        "y": 3680,
        "wires": [
            [
                "1868e7c71c9d9686"
            ]
        ]
    },
    {
        "id": "1868e7c71c9d9686",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"A_sh\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 3680,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "11c4f226a1a1c7e3",
        "type": "mqtt in",
        "z": "f12",
        "name": "",
        "topic": "connect/status/TUSMT008",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1630,
        "y": 2880,
        "wires": [
            [
                "e8bee947e59b47fd"
            ]
        ]
    },
    {
        "id": "e8bee947e59b47fd",
        "type": "function",
        "z": "f12",
        "name": "topic",
        "func": "msg.topic = \"get_status\";\nmsg.payload = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 2880,
        "wires": [
            [
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "b3598de46b2662b6",
        "type": "debug",
        "z": "f12",
        "name": "debug 20",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 1300,
        "wires": []
    },
    {
        "id": "6a071a87e56480ce",
        "type": "function",
        "z": "f12",
        "name": "function 78",
        "func": "let output = msg.payload\nif (output.status === \"false\"){\n    msg.payload = output\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2280,
        "y": 1260,
        "wires": [
            [
                "e9fa3ddc4a8979a9",
                "c9199bafd10f8514",
                "ec5469b67fc111c0"
            ]
        ]
    },
    {
        "id": "239057148dfa11a6",
        "type": "function",
        "z": "f12",
        "name": "function 79",
        "func": "msg.topic = \"get_time\";\nmsg.payload = msg.payload\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2280,
        "y": 1300,
        "wires": [
            [
                "b3598de46b2662b6",
                "7a1d8a875890e60e"
            ]
        ]
    },
    {
        "id": "e9fa3ddc4a8979a9",
        "type": "debug",
        "z": "f12",
        "name": "debug 21",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 1260,
        "wires": []
    },
    {
        "id": "b7c61e5a69471b89",
        "type": "debug",
        "z": "f12",
        "name": "debug 22",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 2220,
        "wires": []
    },
    {
        "id": "5dc9b3e9d195cbb5",
        "type": "function",
        "z": "f12",
        "name": "function 80",
        "func": "let output = msg.payload\nif (output.status === \"false\"){\n    msg.payload = output\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2280,
        "y": 2180,
        "wires": [
            [
                "2c2743311b4f2423",
                "c9199bafd10f8514",
                "dd9ccb0fc292b59f"
            ]
        ]
    },
    {
        "id": "4e187a0e73f32620",
        "type": "function",
        "z": "f12",
        "name": "function 81",
        "func": "msg.topic = \"get_time\";\nmsg.payload = msg.payload\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2280,
        "y": 2220,
        "wires": [
            [
                "b7c61e5a69471b89",
                "a1cb01dae27b0415"
            ]
        ]
    },
    {
        "id": "2c2743311b4f2423",
        "type": "debug",
        "z": "f12",
        "name": "debug 23",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 2180,
        "wires": []
    },
    {
        "id": "0d167d6ae6909032",
        "type": "debug",
        "z": "f12",
        "name": "debug 24",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 3140,
        "wires": []
    },
    {
        "id": "ac862ac3c0e952ea",
        "type": "function",
        "z": "f12",
        "name": "function 82",
        "func": "let output = msg.payload\nif (output.status === \"false\"){\n    msg.payload = output\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2280,
        "y": 3100,
        "wires": [
            [
                "757f110ded0e19e7",
                "c9199bafd10f8514",
                "c590c97799602be9"
            ]
        ]
    },
    {
        "id": "222f7bbd314459cd",
        "type": "function",
        "z": "f12",
        "name": "function 83",
        "func": "msg.topic = \"get_time\";\nmsg.payload = msg.payload\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2280,
        "y": 3140,
        "wires": [
            [
                "0d167d6ae6909032"
            ]
        ]
    },
    {
        "id": "757f110ded0e19e7",
        "type": "debug",
        "z": "f12",
        "name": "debug 25",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2460,
        "y": 3100,
        "wires": []
    },
    {
        "id": "b2f9a74d8bd756f4",
        "type": "http request",
        "z": "f12",
        "name": "",
        "method": "DELETE",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://203.154.83.117:10235/api/v5/clients/idTUSMT001_cpu0000000083bc1784",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 1090,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "c9199bafd10f8514",
        "type": "file",
        "z": "f12",
        "name": "",
        "filename": "log_re_c_id.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1340,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "0291854a49f6c8a5",
        "type": "http request",
        "z": "f12",
        "name": "",
        "method": "DELETE",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://203.154.83.117:10235/api/v5/clients/idTUSMT002_cpu00000000979aeae7",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 1090,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "de255d4ae3139b81",
        "type": "http request",
        "z": "f12",
        "name": "",
        "method": "DELETE",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://203.154.83.117:10235/api/v5/clients/idTUSMT003_cpu00000000856e84cd",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 1090,
        "y": 2140,
        "wires": [
            []
        ]
    },
    {
        "id": "55c7d8de793db07c",
        "type": "http request",
        "z": "f12",
        "name": "",
        "method": "DELETE",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://203.154.83.117:10235/api/v5/clients/idTUSMT004_cpu00000000f3f8e2b5",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 1090,
        "y": 3140,
        "wires": [
            []
        ]
    },
    {
        "id": "15e98d5050f5aa07",
        "type": "http request",
        "z": "f12",
        "name": "",
        "method": "DELETE",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://203.154.83.117:10235/api/v5/clients/idTUSMT005_cpu00000000636618f3",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 2490,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "ec5469b67fc111c0",
        "type": "http request",
        "z": "f12",
        "name": "",
        "method": "DELETE",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://203.154.83.117:10235/api/v5/clients/idTUSMT006_cpu00000000fff708fa",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 2470,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "dd9ccb0fc292b59f",
        "type": "http request",
        "z": "f12",
        "name": "",
        "method": "DELETE",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://203.154.83.117:10235/api/v5/clients/idTUSMT007_cpu000000001ad583ed",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 2470,
        "y": 2140,
        "wires": [
            []
        ]
    },
    {
        "id": "c590c97799602be9",
        "type": "http request",
        "z": "f12",
        "name": "",
        "method": "DELETE",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://203.154.83.117:10235/api/v5/clients/idTUSMT008_cpu00000000a6ded788",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "basic",
        "senderr": false,
        "headers": [],
        "x": 2470,
        "y": 3060,
        "wires": [
            []
        ]
    },
    {
        "id": "364027964fd8effc",
        "type": "inject",
        "z": "96f306faac18dafe",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1430,
        "y": 420,
        "wires": [
            [
                "4e9f566769811c26"
            ]
        ]
    },
    {
        "id": "4e9f566769811c26",
        "type": "moment",
        "z": "96f306faac18dafe",
        "name": "timmer",
        "topic": "timer",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "minutes",
        "adjDir": "subtract",
        "format": "HH:mm:ss",
        "locale": "th_TH",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 1590,
        "y": 420,
        "wires": [
            [
                "216852755f2908be"
            ]
        ]
    },
    {
        "id": "0bc01a98a440030b",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT001/control/config/time_auto",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1360,
        "y": 380,
        "wires": [
            [
                "3d4f7abc8b0cbfd6"
            ]
        ]
    },
    {
        "id": "f6780d53e5fe9ffc",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT001/control/loads/mode",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1359.0000038146973,
        "y": 99.0000057220459,
        "wires": [
            [
                "e45a647e589527f6"
            ]
        ]
    },
    {
        "id": "e45a647e589527f6",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"get_mode\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 99.0000057220459,
        "wires": [
            [
                "7039da8f5a5e6edd"
            ]
        ]
    },
    {
        "id": "3d4f7abc8b0cbfd6",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "// var result = JSON.parse(msg.payload);\n\nmsg.payload = msg.payload;\nmsg.topic = \"get_timeAuto\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 380,
        "wires": [
            [
                "216852755f2908be"
            ]
        ]
    },
    {
        "id": "bf98b8fdc09e3f61",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT001/control/set_config",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1369.0000038146973,
        "y": 59.0000057220459,
        "wires": [
            [
                "f47484e916684913"
            ]
        ]
    },
    {
        "id": "f47484e916684913",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"set_config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 59.0000057220459,
        "wires": [
            [
                "7039da8f5a5e6edd",
                "216852755f2908be",
                "c8acc5de975f86b6"
            ]
        ]
    },
    {
        "id": "216852755f2908be",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Timer",
        "func": "if (msg.topic === \"timer\"){\n    context.set('timer',msg.timer);\n}\nif (msg.topic === \"set_config\"){\n    context.set('set_config',msg.payload);\n}\nif (msg.topic === \"get_timeAuto\"){\n    context.set('get_timeAuto',msg.payload);\n}\nif (msg.topic === \"response\"){\n    context.set('response',msg.payload);\n}\n\nlet get_timer = context.get('timer') || 0;\nlet set_config = context.get('set_config') || 0;\nlet get_timeAuto = context.get('get_timeAuto') || 0;\nlet response = context.get('response') || 0;\nif (get_timer == 0) {\n    return false;\n}\nif (set_config == 0) {\n    return false;\n}\nif (get_timeAuto == 0) {\n    return false;\n}\nif (response == 0) {\n    return false;\n}\nif (response.mode === 'Auto'){\n    if (set_config.sub_mode.sub_mode === 'Timer') {\n        msg.payload = {\n                time :  get_timer,\n                set_config: set_config,\n                time_auto : get_timeAuto,\n                response: response\n            };\n        // msg.topic = 'config';\n        return msg;\n    }\n}\n// else{\n//     msg.payload = set_config.sub_mode.sub_mode\n//     return msg\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1759.0000038146973,
        "y": 379.0000057220459,
        "wires": [
            [
                "dc9122a5a39722bd",
                "8fc12c20a0a5fefd",
                "dab555282585138b",
                "dae7308ece50267c",
                "6d2501ae6ef62312",
                "82aa704f703ee0b0",
                "719e6c3204e24869",
                "1db5da4b9ef5aac1",
                "10babfe11c579a83",
                "a81144f1070664ad",
                "636ed135e2d8aba2",
                "b38613c0dd28719d"
            ]
        ]
    },
    {
        "id": "7039da8f5a5e6edd",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Mode",
        "func": "if (msg.topic == \"get_mode\") {\n    context.set('get_mode', msg.payload);\n}\nif (msg.topic == \"set_config\") {\n    context.set('get_submode', msg.payload);\n}\n\nvar get_mode = context.get('get_mode') || 0;\nvar get_submode = context.get('get_submode') || 0;\nvar log_control = context.get('log_control') || 'No';\n\nif (get_mode == 0) {\n    return false;\n}\nif (get_submode == 0) {\n    return false;\n}\nif (log_control === 'No') {\n    context.set('log_control', get_mode)\n}else{\n    if (get_mode !== log_control){\n        // msg.headers = {};\n        // msg.method = \"POST\";\n        // msg.url = \"http://localhost/smartfarm/server/insert_data/tu/mode.php\";\n        // msg.payload = {\n        //     output: get_mode,\n        //     get_: get_submode.sub_mode.sn\n        // }\n        // msg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n        // msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n        get_submode['mode'] = get_mode;\n        msg.payload = get_submode;\n        context.set('log_control', get_mode);\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 100,
        "wires": [
            [
                "aa47ccad304a7413"
            ]
        ]
    },
    {
        "id": "aa47ccad304a7413",
        "type": "mqtt out",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT001/control/set_config",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 2510,
        "y": 100,
        "wires": []
    },
    {
        "id": "1db5da4b9ef5aac1",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 4",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_8;\nlet user = set_config.config_timeSet.load_8.user_control;\nlet load = 'fan_4';\nlet log_control = res.response.fan_4;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 660,
        "wires": [
            [
                "d2501e67aa624750"
            ]
        ]
    },
    {
        "id": "a81144f1070664ad",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Foggy 2",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_10;\nlet user, load = 'foggy_2';\nlet log_control = res.response.foggy_2;\nif (sub_mode.sub_mode_10 === 'Time_set') {\n    user = set_config.config_timeSet.load_10.user_control;\n} else {\n    user = set_config.config_timeLoop.load_10.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 740,
        "wires": [
            [
                "d2501e67aa624750"
            ]
        ]
    },
    {
        "id": "636ed135e2d8aba2",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Spray",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_11;\nlet user, load = 'spray';\nlet log_control = res.response.spray;\nif (sub_mode.sub_mode_11 === 'Time_set') {\n    user = set_config.config_timeSet.load_11.user_control;\n} else {\n    user = set_config.config_timeLoop.load_11.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 780,
        "wires": [
            [
                "d2501e67aa624750"
            ]
        ]
    },
    {
        "id": "b38613c0dd28719d",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Shading",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_12;\nlet user = set_config.config_timeSet.load_12.user_control;\nlet load = 'shading';\nlet log_control = res.response.shading; //context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto'){\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user,\n                log_control:log_control\n            };\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 820,
        "wires": [
            [
                "d2501e67aa624750"
            ]
        ]
    },
    {
        "id": "783ed9e1d4d72a9d",
        "type": "http request",
        "z": "96f306faac18dafe",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2470,
        "y": 180,
        "wires": [
            [
                "ae6948ee7886587d"
            ]
        ]
    },
    {
        "id": "ae6948ee7886587d",
        "type": "debug",
        "z": "96f306faac18dafe",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2470,
        "y": 220,
        "wires": []
    },
    {
        "id": "719e6c3204e24869",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 3",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_7;\nlet user = set_config.config_timeSet.load_7.user_control;\nlet load = 'fan_3';\nlet log_control = res.response.fan_3;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 620,
        "wires": [
            [
                "d2501e67aa624750"
            ]
        ]
    },
    {
        "id": "6d2501ae6ef62312",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 1",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_5;\nlet user = set_config.config_timeSet.load_5.user_control;\nlet load = 'fan_1';\nlet log_control = res.response.fan_1;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto'){\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 540,
        "wires": [
            [
                "d2501e67aa624750"
            ]
        ]
    },
    {
        "id": "82aa704f703ee0b0",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 2",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_6;\nlet user = set_config.config_timeSet.load_6.user_control;\nlet load = 'fan_2';\nlet log_control = res.response.fan_2;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 580,
        "wires": [
            [
                "d2501e67aa624750"
            ]
        ]
    },
    {
        "id": "dae7308ece50267c",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 4",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_4;\nlet user, load = 'dripper_4';\nlet log_control = res.response.dripper_4;\nif (sub_mode.sub_mode_4 === 'Time_set') {\n    user = set_config.config_timeSet.load_4.user_control;\n} else {\n    user = set_config.config_timeLoop.load_4.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 500,
        "wires": [
            [
                "d2501e67aa624750"
            ]
        ]
    },
    {
        "id": "dab555282585138b",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 3",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_3;\nlet user, load = 'dripper_3';\nlet log_control = res.response.dripper_3;\nif (sub_mode.sub_mode_3 === 'Time_set') {\n    user = set_config.config_timeSet.load_3.user_control;\n} else {\n    user = set_config.config_timeLoop.load_3.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 460,
        "wires": [
            [
                "d2501e67aa624750"
            ]
        ]
    },
    {
        "id": "8fc12c20a0a5fefd",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 2",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_2;\nlet user, load = 'dripper_2';\nlet log_control = res.response.dripper_2;\nif (sub_mode.sub_mode_2 === 'Time_set') {\n    user = set_config.config_timeSet.load_2.user_control;\n} else {\n    user = set_config.config_timeLoop.load_2.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 420,
        "wires": [
            [
                "d2501e67aa624750"
            ]
        ]
    },
    {
        "id": "dc9122a5a39722bd",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 1",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_1;\nlet user, load = 'dripper_1';\nlet log_control = res.response.dripper_1;\nif (sub_mode.sub_mode_1 === 'Time_set') {\n    user = set_config.config_timeSet.load_1.user_control;\n} else {\n    user = set_config.config_timeLoop.load_1.user_control;\n}\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        // msg.payload = Object.keys(time_auto).length/2 \n        // msg.payload = sub_mode\n        // return msg;\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 380,
        "wires": [
            [
                "d2501e67aa624750"
            ]
        ]
    },
    {
        "id": "c8acc5de975f86b6",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_config",
        "func": "if (msg.topic === \"set_config\"){\n    context.set('config',msg.payload);\n}\nif (msg.topic === \"filter_raw\"){\n    context.set('filter_raw',msg.payload);\n}\nif (msg.topic === \"filter_eq\"){\n    context.set('filter_eq',msg.payload);\n}\nif (msg.topic === \"response\"){\n    context.set('response',msg.payload);\n}\n\n// var get_date_timer = context.get('timer') || 0;\nlet set_config = context.get('config') || 0;\nlet filter_raw = context.get('filter_raw') || 0;\nlet filter_eq = context.get('filter_eq') || 0;\nlet response = context.get('response') || 0;\n\nif(set_config == 0){\n    return false;\n}\nif(filter_raw == 0){\n    return false;\n}\nif(filter_eq == 0){\n    return false;\n}\nif(response == 0){\n    return false;\n}\nlet sub_mode = set_config.sub_mode;\nlet tracking = set_config.config_tracking;\nlet data_;\nif (response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Tracking') {\n        if(set_config.eq == 0){ // ไม่ผ่านสมการ\n            data_ = filter_raw;\n        }else{\n            data_ = filter_eq;\n        }\n        msg.payload = {\n            // date_time : get_date_timer,\n            tracking : tracking,\n            data_ : data_,\n            response : response,\n            eq: set_config.eq,\n            sub_mode: sub_mode.sub_mode,\n            control_v: set_config.control_V\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1789.0000038146973,
        "y": 179.0000057220459,
        "wires": [
            [
                "f1cc2102f98b0962"
            ]
        ]
    },
    {
        "id": "d0ca4503f934d08e",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT001/data_sensor/filter",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1369.0000038146973,
        "y": 179.0000057220459,
        "wires": [
            [
                "e251694b87162f66"
            ]
        ]
    },
    {
        "id": "e251694b87162f66",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"filter_raw\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 179.0000057220459,
        "wires": [
            [
                "c8acc5de975f86b6"
            ]
        ]
    },
    {
        "id": "814b33b77fa3b81c",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT001/data_sensor/filter_eq",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1359.0000038146973,
        "y": 219.0000057220459,
        "wires": [
            [
                "8e7898de206c673f"
            ]
        ]
    },
    {
        "id": "8e7898de206c673f",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"filter_eq\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 219.0000057220459,
        "wires": [
            [
                "c8acc5de975f86b6"
            ]
        ]
    },
    {
        "id": "d2501e67aa624750",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "// var result = JSON.parse(msg.payload);\n\nmsg.payload = msg.payload;\nmsg.topic = \"get_data\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2259.0000038146973,
        "y": 379.0000057220459,
        "wires": [
            [
                "887d9d87e8e718b5"
            ]
        ]
    },
    {
        "id": "10babfe11c579a83",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Foggy 1",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_9;\nlet user, load = 'foggy_1';\nlet log_control = res.response.foggy_1;\nif (sub_mode.sub_mode_9 === 'Time_set') {\n    user = set_config.config_timeSet.load_9.user_control;\n} else {\n    user = set_config.config_timeLoop.load_9.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 700,
        "wires": [
            [
                "d2501e67aa624750"
            ]
        ]
    },
    {
        "id": "2e2e229f4c8e8623",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT001/control/response",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1369.0000038146973,
        "y": 259.0000057220459,
        "wires": [
            [
                "fc311ad46b661bfc"
            ]
        ]
    },
    {
        "id": "fc311ad46b661bfc",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"response\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 259.0000057220459,
        "wires": [
            [
                "c8acc5de975f86b6",
                "216852755f2908be"
            ]
        ]
    },
    {
        "id": "f1cc2102f98b0962",
        "type": "moment",
        "z": "96f306faac18dafe",
        "name": "timer",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "months",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "th_TH",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 1839.0000038146973,
        "y": 259.0000057220459,
        "wires": [
            [
                "613bfb743028b71e",
                "04934f1a558962f7",
                "ba6797a671eda7fd",
                "be6afd1f928e23ce",
                "b82ab7b44a1c9db2"
            ]
        ]
    },
    {
        "id": "613bfb743028b71e",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_dripper",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        let status, load=[], load_res=[], msg_status = [], log_control=[],  res_status, stop_time;\n        for (let i = 1; i <= 4; i++) {\n            if (tracking['dripper_' + i] == \"ON\") {\n                load_res.push(response['dripper_' + i]);\n            }\n            load.push('dripper_' + i);\n            log_control.push(response['dripper_' + i]);\n        }\n        if (load_res.filter(function (value) { return value == 'ON'; }).length > 0) {\n            res_status = 'ON';\n        } else {\n            res_status = 'OFF';\n        }\n\n        if (tracking.status_1 == 0) {\n            status = 'OFF';\n        } else {\n            if (control_v == \"2\"){ // V อ.อร\n                stop_time = '16:00:00'\n            }else{\n                stop_time = '18:00:00'\n            }\n            if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00'){\n                status = 'OFF';\n            }else{\n                if (parseFloat(data_.data.soil_in) <= parseFloat(tracking.soil_min)){\n                    status = 'ON';\n                } else if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)){\n                    status = 'OFF';\n                }else{\n                    status = res_status;\n                }\n            }\n        }\n        for (let a = 1; a <= 4; a++){ // load.length;\n            if(tracking['dripper_'+a] == \"ON\"){\n                msg_status.push(status);\n            }else{\n                msg_status.push('OFF');\n            }\n        }\n        if (log_control.toString() != msg_status.toString()) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(msg_status),\n                user: tracking.user_control,\n                soil_min: tracking.soil_min,\n                soil_max: tracking.soil_max,\n                data: Number(data_.data.soil_in),\n                data2: parseFloat(data_.data.soil_in),\n                date_time:date_time,\n            };\n            // context.set('log_control', status)\n            // if(old_nowsec != nowsec){\n                // context.set('old_nowsec', nowsec);\n                return msg;\n            // }\n        }\n    }\n}\n\n// msg.payload =tracking\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 180,
        "wires": [
            [
                "d2501e67aa624750"
            ]
        ]
    },
    {
        "id": "ba6797a671eda7fd",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_fan",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\n// let nsec = date_time.split(\" \")[1].split(\":\");\n// let nowsec = Number(nsec[2]);\n// let old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\n\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        let status, load = [], load_res = [], msg_status = [], log_control = [], res_status;\n        for (let i = 1; i <= 4; i++) {\n            if (tracking['fan_' + i] == \"ON\") {\n                load_res.push(response['fan_' + i]);\n            }\n            load.push('fan_' + i);\n            log_control.push(response['fan_' + i]);\n        }\n        if (tracking.status_3 == 0) {\n            status = 'OFF';\n        } else {\n            if (load_res.filter(function (value) { return value == 'ON'; }).length > 0) {\n                res_status = 'ON';\n            } else {\n                res_status = 'OFF';\n            }\n\n            if (control_v == \"2\") { // V อ.อร\n                if (date_time.split(\" \")[1] > '16:00:00' || date_time.split(\" \")[1] < '07:00:00') {\n                    status = 'OFF';\n                } else {\n                    if (parseFloat(data_.data.temp_in) <= parseFloat(tracking.temp_min)) {\n                        status = 'OFF';\n                    } else if (parseFloat(data_.data.temp_in) >= parseFloat(tracking.temp_max)) {\n                        status = 'ON';\n                    } else {\n                        status = res_status;\n                    }\n                }\n            } else {\n                if (parseFloat(data_.data.temp_in) <= parseFloat(tracking.temp_min)) {\n                    status = 'OFF';\n                } else if (parseFloat(data_.data.temp_in) >= parseFloat(tracking.temp_max)) {\n                    status = 'ON';\n                } else {\n                    status = res_status;\n                }\n            }\n        }\n        for (let a = 1; a <= 4; a++){ // load.length;\n            if(tracking['fan_'+a] == \"ON\"){\n                msg_status.push(status);\n            }else{\n                msg_status.push('OFF');\n            }\n        }\n        if (log_control.toString() != msg_status.toString()) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(msg_status),\n                user: tracking.user_control,\n                temp_min: tracking.temp_min,\n                temp_max: tracking.temp_max,\n                data: Number(data_.data.temp_in),\n            };\n            // context.set('log_control', status)\n            // if(old_nowsec != nowsec){\n                // context.set('old_nowsec', nowsec);\n                return msg;\n            // }\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 300,
        "wires": [
            [
                "d2501e67aa624750"
            ]
        ]
    },
    {
        "id": "04934f1a558962f7",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_slan",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\n\nlet log_control = response['shading']; //context.get('log_control') || 'No';\nlet status = [], load = [], load_res = [], msg_status = [], a;\n\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n    a = 1\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"shading\");\n\n        if (control_v == \"2\") { // V อ.อร\n            if (tracking.status_3 == 0) { // ปิดโหมด Temp\n                status.push(status_slan('t<m'));\n                a = 3\n            } else { // เปิดโหมด Temp\n                if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                    status.push(status_slan('t<m'));\n                    a = 4\n                } else { // temp > max\n                    // จับเวลา Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(45)); //45\n                        context.set('tracking', tracking);\n                    } else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(45)); //45\n                        }\n                    }\n                    // ------------------------------------\n\n                    if (date_time.split(\" \")[1] >= '12:00:00' && date_time.split(\" \")[1] < '16:00:00') {\n                        // 12:00 - 16:00\n                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) { //<=\n                            // timw ปัจจุบัน <= time_fan\n                            status.push(status_slan('t>m'));\n                            a = 7\n                        } else {\n                            status.push('ON');\n                            a = 8\n                        }\n                    } else {\n                        // นอกช่วงเวลา 12:00 - 16:00\n                        status.push(status_slan('t>m'));\n                    }\n                }\n            }\n        } else { // No V อ.อร\n            status.push(status_slan('t<m'));\n        }\n        if (log_control != status[0]) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(status),\n                user: tracking.user_control,\n                light_min: tracking.light_min,\n                light_max: tracking.light_max,\n                ss: log_control,\n                s2: tracking.status_4\n            };\n            // context.set('log_control', status)\n\n            // if(old_nowsec != nowsec){\n            //     context.set('old_nowsec', nowsec);\n            return msg;\n            // }\n        }\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n    }\n}\n\nfunction status_slan(val) {\n    if (val == 't<m') {\n        context.set('time_fan', \"\");\n    }\n    let s_slan, n_data, stop_time;\n\n    if (tracking.status_4 == 0) { // ปิดโหมด Slan\n        s_slan = \"OFF\";\n    } else { // เปิดโหมด Slan\n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            s_slan = \"OFF\";\n        } else {\n            // if (parseFloat(tracking.light_in_mode) == 5) {\n            //     n_data = parseFloat(data_.data.light_in) / 54;\n            // } else {\n            n_data = parseFloat(data_.data.light_in) / 1000;\n            // }\n\n            if (parseFloat(n_data) <= parseFloat(tracking.light_min)) {\n                s_slan = \"OFF\"; // เปิดม่าน\n            } else if (parseFloat(n_data) >= parseFloat(tracking.light_max)) {\n                s_slan = \"ON\"; // ปิดม่าน\n            } else {\n                s_slan = log_control;\n            }\n        }\n    }\n    return s_slan;\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 340,
        "wires": [
            [
                "d2501e67aa624750"
            ]
        ]
    },
    {
        "id": "be6afd1f928e23ce",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_Foggy",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nlet log_control = response['foggy_1'];\nlet status = [], load = [], stop_time // load_res = [], msg_status = [], a;\nlet submode_, num_\n\n// msg.payload = tracking.status_2\n// return msg\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"foggy_1\");\n\n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            // กรณีนอกเวลา\n            status.push('OFF')\n            submode_ = 'out of time H&T';\n            num_ = 1;\n        } else {\n            if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                let ress = load_modeHum('t<m')\n                status.push(ress[0]);\n                num_ = 't < max ' + ress[1];\n            }\n            else { // temp > max\n                if (tracking.status_3 == 0) {\n                    let ress = load_modeHum('t>m')\n                    status.push(ress[0]);\n                    num_ = 't = off ' + ress[1];\n                }\n                else { // ON Mode Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(15)); //15\n                        context.set('tracking', tracking);\n                    }\n                    else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(15)); //15\n                        }\n                    }\n                    if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) {\n                        // time <= time_fan\n                        let ress = load_modeHum('t>m')\n                        status.push(ress[0]);\n                        num_ = 't <= 15m ' + ress[1] + ' t= ' + context.get('time_fan');\n                    } else { // หลัง 15 นาที\n                        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n                            status.push('OFF');\n                            num_ = 't > 15m | soil > m';\n                            context.set('timeON_foggy', \"\");\n                            context.set('timeOFF_foggy', \"\");\n                        }\n                        else { // Soil < Max\n                            if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max2)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | soil < m | hum >= config';\n                                context.set('timeON_foggy', \"\");\n                                context.set('timeOFF_foggy', \"\");\n                            } else { // hum < config\n                                if (context.get('timeON_foggy') == \"\" && context.get('timeOFF_foggy') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_foggy', add_time(13)); // 13\n                                        num_ = 't > 15m | soil < m | hum < config จะ on เวลา ' + add_time(13);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_foggy', add_time(2));\n                                        num_ = 't > 15m | soil < m | hum < config จะ off เวลา ' + add_time(2);\n                                    }\n                                }\n                                else {\n                                    // timeON_foggy != '' || timeOFF_foggy != ''\n                                    if (context.get('timeON_foggy') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_foggy'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_foggy', add_time(2)); // 2\n                                                context.set('timeON_foggy', \"\");\n                                                num_ = 't > 15m | soil < m | hum < config จะ off เวลา ' + add_time(2);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeON_foggy'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_foggy') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_foggy'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_foggy', \"\");\n                                                context.set('timeON_foggy', add_time(13)); // 13\n                                                num_ = 't > 15m | soil < m | hum < config จะ on เวลา ' + add_time(13);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n\n\n        let payload = {\n            'sn': data_.serial_id,\n            'mode': 'Tracking',\n            'load': JSON.stringify(load),\n            'status': JSON.stringify(status),\n            'user': tracking.user_control,\n            'soil_max': tracking.soil_max,\n            'data_soil': Number(data_.data.soil_in),\n            'hum_min': tracking.hum_min,\n            'hum_max': tracking.hum_max,\n            'hum_max2': tracking.hum_max2,\n            'data_hum': Number(data_.data.hum_in),\n            time_fan: context.get('time_fan'),\n            nt: add_time(0),\n            ONfoggy: context.get('timeON_foggy'),\n            OFFfoggy: context.get('timeOFF_foggy'),\n            // ONspray: context.get('timeON_spray'),\n            // OFFspray: context.get('timeOFF_spray'),\n            // load_resp: load_resp,\n            // submode: submode_,\n            num_: num_,\n            // z_1: load_resp.toString(),\n            // z_2: status.toString(),\n            s: (new Date(ndate + ' ' + add_time(0))).getTime() / 1000,\n            xx: (new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000,\n            zzz: context.get('status_log')\n        };\n        msg.payload = payload\n        if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n            if (log_control != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }else{\n            if (context.get('status_log') != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }\n\n\n\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n            context.set('timeON_foggy', \"\");\n            context.set('timeOFF_foggy', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n        context.set('timeON_foggy', \"\");\n        context.set('timeOFF_foggy', \"\");\n    }\n}\nfunction load_modeHum(val) {\n    if (val == 't<m') {\n        context.set('time_fan', \"\");\n    }\n    context.set('timeON_foggy', \"\");\n    context.set('timeOFF_foggy', \"\");\n    if (tracking.status_2 == 0) {\n        return ['OFF', 'h_0'];\n    }\n    else {\n        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n            return ['OFF', 'h_1'];\n        }\n        else { // Soil < soil_max\n            if (parseFloat(data_.data.hum_in) <= parseFloat(tracking.hum_min)) {\n                return ['ON', 'h_2'];\n            } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max2)) {\n                return ['OFF', 'h_3'];\n            } else {\n                return [log_control, 'h_4'];\n            }\n        }\n    }\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 220,
        "wires": [
            [
                "d2501e67aa624750"
            ]
        ]
    },
    {
        "id": "b82ab7b44a1c9db2",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_Spray",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nlet log_control = response['spray'];\nlet status = [], load = [], stop_time \nlet submode_, num_\n\n// msg.payload = tracking.status_2\n// return msg\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"spray\");\n\n        if (context.get('log_foggy') == undefined || context.get('log_foggy') == '') {\n            context.set('log_foggy', response['foggy_1']);\n        }\n                \n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            // กรณีนอกเวลา\n            status.push('OFF')\n            submode_ = 'out of time H&T';\n            num_ = 1;\n        } else {\n            if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                let ress = load_modeHum('t<m')\n                status.push(ress[0]);\n                num_ = 't < max ' + ress[1];\n            } \n            else { // temp > max\n                if (tracking.status_3 == 0) {\n                    let ress = load_modeHum('t>m')\n                    status.push(ress[0]);\n                    num_ = 't = off ' + ress[1];\n                }\n                else{ // ON Mode Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(15)); //15\n                        context.set('tracking', tracking);\n                    }\n                    else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(15)); //15\n                        }\n                    }\n                    if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) {\n                        // time <= time_fan\n                        let ress = load_modeHum('t>m')\n                        status.push(ress[0]);\n                        num_ = 't <= 15m ' + ress[1] + ' t= ' + context.get('time_fan');\n                    } else { // หลัง 15 นาที\n                        // ------------------------------------\n                        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n                            if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum >= max';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                                context.set('log_foggy', 'OFF')\n                            } else { // hum < config\n                                if (context.get('timeON_spray') == \"\" && context.get('timeOFF_spray') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                    }\n                                }\n                                else {\n                                    // timeON_spray != '' || timeOFF_spray != ''\n                                    if (context.get('timeON_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_spray', add_time(5)); // 5\n                                                context.set('timeON_spray', \"\");\n                                                num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | hum >= config | time <= timeON_spray'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_spray', \"\");\n                                                context.set('timeON_spray', add_time(5)); // 5\n                                                num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }else{\n                            // soil < soil_Max\n                            if (parseFloat(data_.data.hum_in) < parseFloat(tracking.hum_max2)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum < config';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                            } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum >= max';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                                context.set('log_foggy', 'OFF')\n                            } else { // hum < config\n                                if (context.get('timeON_spray') == \"\" && context.get('timeOFF_spray') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                    }\n                                }\n                                else {\n                                    // timeON_spray != '' || timeOFF_spray != ''\n                                    if (context.get('timeON_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_spray', add_time(5)); // 5\n                                                context.set('timeON_spray', \"\");\n                                                num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | hum >= config | time <= timeON_spray'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_spray', \"\");\n                                                context.set('timeON_spray', add_time(5)); // 5\n                                                num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }\n                        // ==================================\n                    }\n                }\n            }\n        }\n       \n        let payload = {\n            'sn': data_.serial_id,\n            'mode': 'Tracking',\n            'load': JSON.stringify(load),\n            'status': JSON.stringify(status),\n            'user': tracking.user_control,\n            'soil_max': tracking.soil_max,\n            'data_soil': Number(data_.data.soil_in),\n            'hum_min': tracking.hum_min,\n            'hum_max': tracking.hum_max,\n            'hum_max2': tracking.hum_max2,\n            'data_hum': Number(data_.data.hum_in),\n            time_fan: context.get('time_fan'),\n            nt: add_time(0),\n            // ONfoggy: context.get('timeON_foggy'),\n            // OFFfoggy: context.get('timeOFF_foggy'),\n            ONspray: context.get('timeON_spray'),\n            OFFspray: context.get('timeOFF_spray'),\n            // load_resp: load_resp,\n            // submode: submode_,\n            num_: num_,\n            // z_1: load_resp.toString(),\n            // z_2: status.toString(),\n            s: (new Date(ndate + ' ' + add_time(0))).getTime() / 1000,\n            xx: (new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000,\n            zzz: context.get('status_log'),\n            log_foggy: context.get('log_foggy')\n        };\n        msg.payload = payload\n        if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n            if (log_control != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }else{\n            if (context.get('status_log') != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n            context.set('timeON_spray', \"\");\n            context.set('timeOFF_spray', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n        context.set('timeON_spray', \"\");\n        context.set('timeOFF_spray', \"\");\n    }\n}\nfunction load_modeHum(val) {\n    if(val == 't<m'){\n        context.set('time_fan', \"\");\n    }\n    context.set('timeON_spray', \"\");\n    context.set('timeOFF_spray', \"\");\n    if (tracking.status_2 == 0) {\n        return ['OFF', 'h_0'];\n    }\n    else {\n        if (parseFloat(data_.data.hum_in) < parseFloat(tracking.hum_max2)) {\n            if (parseFloat(data_.data.hum_in) <= parseFloat(tracking.hum_min)) {\n                context.set('log_foggy', 'ON')\n            }\n            return ['OFF', 'h_1'];\n        } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n            context.set('log_foggy', 'OFF')\n            return ['OFF', 'h_2'];\n        } else { // hum >= config && < max\n            if (context.get('log_foggy') == 'ON') {\n                return ['ON', 'h_3'];\n            } else {\n                return ['OFF', 'h_4'];\n            }\n        }\n    }\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 260,
        "wires": [
            [
                "d2501e67aa624750"
            ]
        ]
    },
    {
        "id": "880d6a7c570f1037",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "connect/status/TUSMT001",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1379.0000038146973,
        "y": 139.0000057220459,
        "wires": [
            [
                "77ebb127d5b786a5"
            ]
        ]
    },
    {
        "id": "77ebb127d5b786a5",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "msg.payload = msg.payload;\nmsg.topic = \"get_status\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 139.0000057220459,
        "wires": [
            [
                "887d9d87e8e718b5"
            ]
        ]
    },
    {
        "id": "887d9d87e8e718b5",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "send_load_to_mqtt",
        "func": "if (msg.topic === \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic === \"get_data\") {\n    context.set('get_data', msg.payload);\n}\nlet get_status = context.get('get_status') || 0;\nlet get_data = context.get('get_data') || 0;\nif (get_status == 0 || get_status === 'offline') {\n    return false;\n}\nif (get_data == 0) {\n    return false;\n}\n\n\n// let get_data = msg.payload;\nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/mqtt_load_auto.php\";\nmsg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\nmsg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\nmsg.payload = {\n    sn: get_data.sn,\n    mode: get_data.mode,\n    load: get_data.load,\n    status: get_data.status,\n    user: get_data.user\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 140,
        "wires": [
            [
                "783ed9e1d4d72a9d"
            ]
        ]
    },
    {
        "id": "ad0229aae55e3bd3",
        "type": "inject",
        "z": "96f306faac18dafe",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1430,
        "y": 1280,
        "wires": [
            [
                "f8fd2dee979b32f1"
            ]
        ]
    },
    {
        "id": "f8fd2dee979b32f1",
        "type": "moment",
        "z": "96f306faac18dafe",
        "name": "timmer",
        "topic": "timer",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "minutes",
        "adjDir": "subtract",
        "format": "HH:mm:ss",
        "locale": "th_TH",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 1590,
        "y": 1280,
        "wires": [
            [
                "3636a1ce19062210"
            ]
        ]
    },
    {
        "id": "e663586b9e5d01ed",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT002/control/config/time_auto",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1360,
        "y": 1240,
        "wires": [
            [
                "3501e2cb2bc0fd6a"
            ]
        ]
    },
    {
        "id": "ef56a563e71a2e1f",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT002/control/loads/mode",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1359.0000038146973,
        "y": 959.0000057220459,
        "wires": [
            [
                "189ada430e6f23d5"
            ]
        ]
    },
    {
        "id": "189ada430e6f23d5",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"get_mode\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 959.0000057220459,
        "wires": [
            [
                "2f580d0fe6f95f1e"
            ]
        ]
    },
    {
        "id": "3501e2cb2bc0fd6a",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "// var result = JSON.parse(msg.payload);\n\nmsg.payload = msg.payload;\nmsg.topic = \"get_timeAuto\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 1240,
        "wires": [
            [
                "3636a1ce19062210"
            ]
        ]
    },
    {
        "id": "d9decb4e8afb4b66",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT002/control/set_config",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1369.0000038146973,
        "y": 919.0000057220459,
        "wires": [
            [
                "0ce41cb2b7615344"
            ]
        ]
    },
    {
        "id": "0ce41cb2b7615344",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"set_config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 919.0000057220459,
        "wires": [
            [
                "2f580d0fe6f95f1e",
                "3636a1ce19062210",
                "a9d7cf098208e1f8"
            ]
        ]
    },
    {
        "id": "3636a1ce19062210",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Timer",
        "func": "if (msg.topic === \"timer\"){\n    context.set('timer',msg.timer);\n}\nif (msg.topic === \"set_config\"){\n    context.set('set_config',msg.payload);\n}\nif (msg.topic === \"get_timeAuto\"){\n    context.set('get_timeAuto',msg.payload);\n}\nif (msg.topic === \"response\"){\n    context.set('response',msg.payload);\n}\n\nlet get_timer = context.get('timer') || 0;\nlet set_config = context.get('set_config') || 0;\nlet get_timeAuto = context.get('get_timeAuto') || 0;\nlet response = context.get('response') || 0;\nif (get_timer == 0) {\n    return false;\n}\nif (set_config == 0) {\n    return false;\n}\nif (get_timeAuto == 0) {\n    return false;\n}\nif (response == 0) {\n    return false;\n}\nif (response.mode === 'Auto'){\n    if (set_config.sub_mode.sub_mode === 'Timer') {\n        msg.payload = {\n                time :  get_timer,\n                set_config: set_config,\n                time_auto : get_timeAuto,\n                response: response\n            };\n        // msg.topic = 'config';\n        return msg;\n    }\n}\n// else{\n//     msg.payload = set_config.sub_mode.sub_mode\n//     return msg\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1759.0000038146973,
        "y": 1239.000005722046,
        "wires": [
            [
                "289ea8d3d58c5263",
                "7e495784dcbc0155",
                "9d6fd97f6b878a03",
                "0882fc7f4f90593c",
                "a4a84188a24a308a",
                "17b69dd252347e7e",
                "7e8ecfebc9d8e826",
                "78739e933f7747cb",
                "579d14fc6f2ab3a7",
                "f9bd1dfc37ebd7dc",
                "94561bc7ed2e13e0",
                "b5b3f97a33afbb6a"
            ]
        ]
    },
    {
        "id": "2f580d0fe6f95f1e",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Mode",
        "func": "if (msg.topic == \"get_mode\") {\n    context.set('get_mode', msg.payload);\n}\nif (msg.topic == \"set_config\") {\n    context.set('get_submode', msg.payload);\n}\n\nvar get_mode = context.get('get_mode') || 0;\nvar get_submode = context.get('get_submode') || 0;\nvar log_control = context.get('log_control') || 'No';\n\nif (get_mode == 0) {\n    return false;\n}\nif (get_submode == 0) {\n    return false;\n}\nif (log_control === 'No') {\n    context.set('log_control', get_mode)\n}else{\n    if (get_mode !== log_control){\n        // msg.headers = {};\n        // msg.method = \"POST\";\n        // msg.url = \"http://localhost/smartfarm/server/insert_data/tu/mode.php\";\n        // msg.payload = {\n        //     output: get_mode,\n        //     get_: get_submode.sub_mode.sn\n        // }\n        // msg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n        // msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n        get_submode['mode'] = get_mode;\n        msg.payload = get_submode;\n        context.set('log_control', get_mode);\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 960,
        "wires": [
            [
                "10a5dc86cdda3594"
            ]
        ]
    },
    {
        "id": "10a5dc86cdda3594",
        "type": "mqtt out",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT002/control/set_config",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 2510,
        "y": 960,
        "wires": []
    },
    {
        "id": "78739e933f7747cb",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 4",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_8;\nlet user = set_config.config_timeSet.load_8.user_control;\nlet load = 'fan_4';\nlet log_control = res.response.fan_4;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 1520,
        "wires": [
            [
                "dee077bdccce9051"
            ]
        ]
    },
    {
        "id": "f9bd1dfc37ebd7dc",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Foggy 2",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_10;\nlet user, load = 'foggy_2';\nlet log_control = res.response.foggy_2;\nif (sub_mode.sub_mode_10 === 'Time_set') {\n    user = set_config.config_timeSet.load_10.user_control;\n} else {\n    user = set_config.config_timeLoop.load_10.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1600,
        "wires": [
            [
                "dee077bdccce9051"
            ]
        ]
    },
    {
        "id": "94561bc7ed2e13e0",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Spray",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_11;\nlet user, load = 'spray';\nlet log_control = res.response.spray;\nif (sub_mode.sub_mode_11 === 'Time_set') {\n    user = set_config.config_timeSet.load_11.user_control;\n} else {\n    user = set_config.config_timeLoop.load_11.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 1640,
        "wires": [
            [
                "dee077bdccce9051"
            ]
        ]
    },
    {
        "id": "b5b3f97a33afbb6a",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Shading",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_12;\nlet user = set_config.config_timeSet.load_12.user_control;\nlet load = 'shading';\nlet log_control = res.response.shading; //context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto'){\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user,\n                log_control:log_control\n            };\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1680,
        "wires": [
            [
                "dee077bdccce9051"
            ]
        ]
    },
    {
        "id": "6d767240b979dad7",
        "type": "http request",
        "z": "96f306faac18dafe",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2470,
        "y": 1040,
        "wires": [
            [
                "75b7b995e04d8721"
            ]
        ]
    },
    {
        "id": "75b7b995e04d8721",
        "type": "debug",
        "z": "96f306faac18dafe",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2470,
        "y": 1080,
        "wires": []
    },
    {
        "id": "7e8ecfebc9d8e826",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 3",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_7;\nlet user = set_config.config_timeSet.load_7.user_control;\nlet load = 'fan_3';\nlet log_control = res.response.fan_3;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 1480,
        "wires": [
            [
                "dee077bdccce9051"
            ]
        ]
    },
    {
        "id": "a4a84188a24a308a",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 1",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_5;\nlet user = set_config.config_timeSet.load_5.user_control;\nlet load = 'fan_1';\nlet log_control = res.response.fan_1;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto'){\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 1400,
        "wires": [
            [
                "dee077bdccce9051"
            ]
        ]
    },
    {
        "id": "17b69dd252347e7e",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 2",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_6;\nlet user = set_config.config_timeSet.load_6.user_control;\nlet load = 'fan_2';\nlet log_control = res.response.fan_2;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 1440,
        "wires": [
            [
                "dee077bdccce9051"
            ]
        ]
    },
    {
        "id": "0882fc7f4f90593c",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 4",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_4;\nlet user, load = 'dripper_4';\nlet log_control = res.response.dripper_4;\nif (sub_mode.sub_mode_4 === 'Time_set') {\n    user = set_config.config_timeSet.load_4.user_control;\n} else {\n    user = set_config.config_timeLoop.load_4.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1360,
        "wires": [
            [
                "dee077bdccce9051"
            ]
        ]
    },
    {
        "id": "9d6fd97f6b878a03",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 3",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_3;\nlet user, load = 'dripper_3';\nlet log_control = res.response.dripper_3;\nif (sub_mode.sub_mode_3 === 'Time_set') {\n    user = set_config.config_timeSet.load_3.user_control;\n} else {\n    user = set_config.config_timeLoop.load_3.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1320,
        "wires": [
            [
                "dee077bdccce9051"
            ]
        ]
    },
    {
        "id": "7e495784dcbc0155",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 2",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_2;\nlet user, load = 'dripper_2';\nlet log_control = res.response.dripper_2;\nif (sub_mode.sub_mode_2 === 'Time_set') {\n    user = set_config.config_timeSet.load_2.user_control;\n} else {\n    user = set_config.config_timeLoop.load_2.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1280,
        "wires": [
            [
                "dee077bdccce9051"
            ]
        ]
    },
    {
        "id": "289ea8d3d58c5263",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 1",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_1;\nlet user, load = 'dripper_1';\nlet log_control = res.response.dripper_1;\nif (sub_mode.sub_mode_1 === 'Time_set') {\n    user = set_config.config_timeSet.load_1.user_control;\n} else {\n    user = set_config.config_timeLoop.load_1.user_control;\n}\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        // msg.payload = Object.keys(time_auto).length/2 \n        // msg.payload = sub_mode\n        // return msg;\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1240,
        "wires": [
            [
                "dee077bdccce9051"
            ]
        ]
    },
    {
        "id": "a9d7cf098208e1f8",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_config",
        "func": "if (msg.topic === \"set_config\"){\n    context.set('config',msg.payload);\n}\nif (msg.topic === \"filter_raw\"){\n    context.set('filter_raw',msg.payload);\n}\nif (msg.topic === \"filter_eq\"){\n    context.set('filter_eq',msg.payload);\n}\nif (msg.topic === \"response\"){\n    context.set('response',msg.payload);\n}\n\n// var get_date_timer = context.get('timer') || 0;\nlet set_config = context.get('config') || 0;\nlet filter_raw = context.get('filter_raw') || 0;\nlet filter_eq = context.get('filter_eq') || 0;\nlet response = context.get('response') || 0;\n\nif(set_config == 0){\n    return false;\n}\nif(filter_raw == 0){\n    return false;\n}\nif(filter_eq == 0){\n    return false;\n}\nif(response == 0){\n    return false;\n}\nlet sub_mode = set_config.sub_mode;\nlet tracking = set_config.config_tracking;\nlet data_;\nif (response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Tracking') {\n        if(set_config.eq == 0){ // ไม่ผ่านสมการ\n            data_ = filter_raw;\n        }else{\n            data_ = filter_eq;\n        }\n        msg.payload = {\n            // date_time : get_date_timer,\n            tracking : tracking,\n            data_ : data_,\n            response : response,\n            eq: set_config.eq,\n            sub_mode: sub_mode.sub_mode,\n            control_v: set_config.control_V\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1789.0000038146973,
        "y": 1039.000005722046,
        "wires": [
            [
                "35c0a59cae3b822e"
            ]
        ]
    },
    {
        "id": "9318798a6c84d4d1",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT002/data_sensor/filter",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1369.0000038146973,
        "y": 1039.000005722046,
        "wires": [
            [
                "01c49588af73ce90"
            ]
        ]
    },
    {
        "id": "01c49588af73ce90",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"filter_raw\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 1039.000005722046,
        "wires": [
            [
                "a9d7cf098208e1f8"
            ]
        ]
    },
    {
        "id": "e78128495c647bd3",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT002/data_sensor/filter_eq",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1359.0000038146973,
        "y": 1079.000005722046,
        "wires": [
            [
                "8fcf48a725414679"
            ]
        ]
    },
    {
        "id": "8fcf48a725414679",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"filter_eq\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 1079.000005722046,
        "wires": [
            [
                "a9d7cf098208e1f8"
            ]
        ]
    },
    {
        "id": "dee077bdccce9051",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "// var result = JSON.parse(msg.payload);\n\nmsg.payload = msg.payload;\nmsg.topic = \"get_data\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2259.0000038146973,
        "y": 1239.000005722046,
        "wires": [
            [
                "9826d34464b16e27"
            ]
        ]
    },
    {
        "id": "579d14fc6f2ab3a7",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Foggy 1",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_9;\nlet user, load = 'foggy_1';\nlet log_control = res.response.foggy_1;\nif (sub_mode.sub_mode_9 === 'Time_set') {\n    user = set_config.config_timeSet.load_9.user_control;\n} else {\n    user = set_config.config_timeLoop.load_9.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 1560,
        "wires": [
            [
                "dee077bdccce9051"
            ]
        ]
    },
    {
        "id": "15e1109a3465642c",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT002/control/response",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1369.0000038146973,
        "y": 1119.000005722046,
        "wires": [
            [
                "95e3d418a669e6dc"
            ]
        ]
    },
    {
        "id": "95e3d418a669e6dc",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"response\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 1119.000005722046,
        "wires": [
            [
                "a9d7cf098208e1f8",
                "3636a1ce19062210"
            ]
        ]
    },
    {
        "id": "35c0a59cae3b822e",
        "type": "moment",
        "z": "96f306faac18dafe",
        "name": "timer",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "months",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "th_TH",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 1839.0000038146973,
        "y": 1119.000005722046,
        "wires": [
            [
                "8f64d76843d4bcd9",
                "fafec49215b9eac9",
                "9d484393b97131d5",
                "a35e723d152e055c",
                "73b4b8c9b17fe33b"
            ]
        ]
    },
    {
        "id": "8f64d76843d4bcd9",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_dripper",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        let status, load=[], load_res=[], msg_status = [], log_control=[],  res_status, stop_time;\n        for (let i = 1; i <= 4; i++) {\n            if (tracking['dripper_' + i] == \"ON\") {\n                load_res.push(response['dripper_' + i]);\n            }\n            load.push('dripper_' + i);\n            log_control.push(response['dripper_' + i]);\n        }\n        if (load_res.filter(function (value) { return value == 'ON'; }).length > 0) {\n            res_status = 'ON';\n        } else {\n            res_status = 'OFF';\n        }\n\n        if (tracking.status_1 == 0) {\n            status = 'OFF';\n        } else {\n            if (control_v == \"2\"){ // V อ.อร\n                stop_time = '16:00:00'\n            }else{\n                stop_time = '18:00:00'\n            }\n            if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00'){\n                status = 'OFF';\n            }else{\n                if (parseFloat(data_.data.soil_in) <= parseFloat(tracking.soil_min)){\n                    status = 'ON';\n                } else if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)){\n                    status = 'OFF';\n                }else{\n                    status = res_status;\n                }\n            }\n        }\n        for (let a = 1; a <= 4; a++){ // load.length;\n            if(tracking['dripper_'+a] == \"ON\"){\n                msg_status.push(status);\n            }else{\n                msg_status.push('OFF');\n            }\n        }\n        if (log_control.toString() != msg_status.toString()) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(msg_status),\n                user: tracking.user_control,\n                soil_min: tracking.soil_min,\n                soil_max: tracking.soil_max,\n                data: Number(data_.data.soil_in),\n                data2: parseFloat(data_.data.soil_in),\n                date_time:date_time,\n            };\n            // context.set('log_control', status)\n            // if(old_nowsec != nowsec){\n                // context.set('old_nowsec', nowsec);\n                return msg;\n            // }\n        }\n    }\n}\n\n// msg.payload =tracking\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 1040,
        "wires": [
            [
                "dee077bdccce9051"
            ]
        ]
    },
    {
        "id": "9d484393b97131d5",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_fan",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\n// let nsec = date_time.split(\" \")[1].split(\":\");\n// let nowsec = Number(nsec[2]);\n// let old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\n\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        let status, load = [], load_res = [], msg_status = [], log_control = [], res_status;\n        for (let i = 1; i <= 4; i++) {\n            if (tracking['fan_' + i] == \"ON\") {\n                load_res.push(response['fan_' + i]);\n            }\n            load.push('fan_' + i);\n            log_control.push(response['fan_' + i]);\n        }\n        if (tracking.status_3 == 0) {\n            status = 'OFF';\n        } else {\n            if (load_res.filter(function (value) { return value == 'ON'; }).length > 0) {\n                res_status = 'ON';\n            } else {\n                res_status = 'OFF';\n            }\n\n            if (control_v == \"2\") { // V อ.อร\n                if (date_time.split(\" \")[1] > '16:00:00' || date_time.split(\" \")[1] < '07:00:00') {\n                    status = 'OFF';\n                } else {\n                    if (parseFloat(data_.data.temp_in) <= parseFloat(tracking.temp_min)) {\n                        status = 'OFF';\n                    } else if (parseFloat(data_.data.temp_in) >= parseFloat(tracking.temp_max)) {\n                        status = 'ON';\n                    } else {\n                        status = res_status;\n                    }\n                }\n            } else {\n                if (parseFloat(data_.data.temp_in) <= parseFloat(tracking.temp_min)) {\n                    status = 'OFF';\n                } else if (parseFloat(data_.data.temp_in) >= parseFloat(tracking.temp_max)) {\n                    status = 'ON';\n                } else {\n                    status = res_status;\n                }\n            }\n        }\n        for (let a = 1; a <= 4; a++){ // load.length;\n            if(tracking['fan_'+a] == \"ON\"){\n                msg_status.push(status);\n            }else{\n                msg_status.push('OFF');\n            }\n        }\n        if (log_control.toString() != msg_status.toString()) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(msg_status),\n                user: tracking.user_control,\n                temp_min: tracking.temp_min,\n                temp_max: tracking.temp_max,\n                data: Number(data_.data.temp_in),\n            };\n            // context.set('log_control', status)\n            // if(old_nowsec != nowsec){\n                // context.set('old_nowsec', nowsec);\n                return msg;\n            // }\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 1160,
        "wires": [
            [
                "dee077bdccce9051"
            ]
        ]
    },
    {
        "id": "fafec49215b9eac9",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_slan",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\n\nlet log_control = response['shading']; //context.get('log_control') || 'No';\nlet status = [], load = [], load_res = [], msg_status = [], a;\n\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n    a = 1\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"shading\");\n\n        if (control_v == \"2\") { // V อ.อร\n            if (tracking.status_3 == 0) { // ปิดโหมด Temp\n                status.push(status_slan('t<m'));\n                a = 3\n            } else { // เปิดโหมด Temp\n                if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                    status.push(status_slan('t<m'));\n                    a = 4\n                } else { // temp > max\n                    // จับเวลา Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(45)); //45\n                        context.set('tracking', tracking);\n                    } else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(45)); //45\n                        }\n                    }\n                    // ------------------------------------\n\n                    if (date_time.split(\" \")[1] >= '12:00:00' && date_time.split(\" \")[1] < '16:00:00') {\n                        // 12:00 - 16:00\n                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) { //<=\n                            // timw ปัจจุบัน <= time_fan\n                            status.push(status_slan('t>m'));\n                            a = 7\n                        } else {\n                            status.push('ON');\n                            a = 8\n                        }\n                    } else {\n                        // นอกช่วงเวลา 12:00 - 16:00\n                        status.push(status_slan('t>m'));\n                    }\n                }\n            }\n        } else { // No V อ.อร\n            status.push(status_slan('t<m'));\n        }\n        if (log_control != status[0]) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(status),\n                user: tracking.user_control,\n                light_min: tracking.light_min,\n                light_max: tracking.light_max,\n                ss: log_control,\n                s2: tracking.status_4\n            };\n            // context.set('log_control', status)\n\n            // if(old_nowsec != nowsec){\n            //     context.set('old_nowsec', nowsec);\n            return msg;\n            // }\n        }\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n    }\n}\n\nfunction status_slan(val) {\n    if (val == 't<m') {\n        context.set('time_fan', \"\");\n    }\n    let s_slan, n_data, stop_time;\n\n    if (tracking.status_4 == 0) { // ปิดโหมด Slan\n        s_slan = \"OFF\";\n    } else { // เปิดโหมด Slan\n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            s_slan = \"OFF\";\n        } else {\n            // if (parseFloat(tracking.light_in_mode) == 5) {\n            //     n_data = parseFloat(data_.data.light_in) / 54;\n            // } else {\n            n_data = parseFloat(data_.data.light_in) / 1000;\n            // }\n\n            if (parseFloat(n_data) <= parseFloat(tracking.light_min)) {\n                s_slan = \"OFF\"; // เปิดม่าน\n            } else if (parseFloat(n_data) >= parseFloat(tracking.light_max)) {\n                s_slan = \"ON\"; // ปิดม่าน\n            } else {\n                s_slan = log_control;\n            }\n        }\n    }\n    return s_slan;\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 1200,
        "wires": [
            [
                "dee077bdccce9051"
            ]
        ]
    },
    {
        "id": "a35e723d152e055c",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_Foggy",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nlet log_control = response['foggy_1'];\nlet status = [], load = [], stop_time // load_res = [], msg_status = [], a;\nlet submode_, num_\n\n// msg.payload = tracking.status_2\n// return msg\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"foggy_1\");\n\n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            // กรณีนอกเวลา\n            status.push('OFF')\n            submode_ = 'out of time H&T';\n            num_ = 1;\n        } else {\n            if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                let ress = load_modeHum('t<m')\n                status.push(ress[0]);\n                num_ = 't < max ' + ress[1];\n            }\n            else { // temp > max\n                if (tracking.status_3 == 0) {\n                    let ress = load_modeHum('t>m')\n                    status.push(ress[0]);\n                    num_ = 't = off ' + ress[1];\n                }\n                else { // ON Mode Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(15)); //15\n                        context.set('tracking', tracking);\n                    }\n                    else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(15)); //15\n                        }\n                    }\n                    if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) {\n                        // time <= time_fan\n                        let ress = load_modeHum('t>m')\n                        status.push(ress[0]);\n                        num_ = 't <= 15m ' + ress[1] + ' t= ' + context.get('time_fan');\n                    } else { // หลัง 15 นาที\n                        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n                            status.push('OFF');\n                            num_ = 't > 15m | soil > m';\n                            context.set('timeON_foggy', \"\");\n                            context.set('timeOFF_foggy', \"\");\n                        }\n                        else { // Soil < Max\n                            if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max2)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | soil < m | hum >= config';\n                                context.set('timeON_foggy', \"\");\n                                context.set('timeOFF_foggy', \"\");\n                            } else { // hum < config\n                                if (context.get('timeON_foggy') == \"\" && context.get('timeOFF_foggy') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_foggy', add_time(13)); // 13\n                                        num_ = 't > 15m | soil < m | hum < config จะ on เวลา ' + add_time(13);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_foggy', add_time(2));\n                                        num_ = 't > 15m | soil < m | hum < config จะ off เวลา ' + add_time(2);\n                                    }\n                                }\n                                else {\n                                    // timeON_foggy != '' || timeOFF_foggy != ''\n                                    if (context.get('timeON_foggy') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_foggy'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_foggy', add_time(2)); // 2\n                                                context.set('timeON_foggy', \"\");\n                                                num_ = 't > 15m | soil < m | hum < config จะ off เวลา ' + add_time(2);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeON_foggy'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_foggy') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_foggy'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_foggy', \"\");\n                                                context.set('timeON_foggy', add_time(13)); // 13\n                                                num_ = 't > 15m | soil < m | hum < config จะ on เวลา ' + add_time(13);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n\n\n        let payload = {\n            'sn': data_.serial_id,\n            'mode': 'Tracking',\n            'load': JSON.stringify(load),\n            'status': JSON.stringify(status),\n            'user': tracking.user_control,\n            'soil_max': tracking.soil_max,\n            'data_soil': Number(data_.data.soil_in),\n            'hum_min': tracking.hum_min,\n            'hum_max': tracking.hum_max,\n            'hum_max2': tracking.hum_max2,\n            'data_hum': Number(data_.data.hum_in),\n            time_fan: context.get('time_fan'),\n            nt: add_time(0),\n            ONfoggy: context.get('timeON_foggy'),\n            OFFfoggy: context.get('timeOFF_foggy'),\n            // ONspray: context.get('timeON_spray'),\n            // OFFspray: context.get('timeOFF_spray'),\n            // load_resp: load_resp,\n            // submode: submode_,\n            num_: num_,\n            // z_1: load_resp.toString(),\n            // z_2: status.toString(),\n            s: (new Date(ndate + ' ' + add_time(0))).getTime() / 1000,\n            xx: (new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000,\n            zzz: context.get('status_log')\n        };\n        msg.payload = payload\n        if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n            if (log_control != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }else{\n            if (context.get('status_log') != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }\n\n\n\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n            context.set('timeON_foggy', \"\");\n            context.set('timeOFF_foggy', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n        context.set('timeON_foggy', \"\");\n        context.set('timeOFF_foggy', \"\");\n    }\n}\nfunction load_modeHum(val) {\n    if (val == 't<m') {\n        context.set('time_fan', \"\");\n    }\n    context.set('timeON_foggy', \"\");\n    context.set('timeOFF_foggy', \"\");\n    if (tracking.status_2 == 0) {\n        return ['OFF', 'h_0'];\n    }\n    else {\n        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n            return ['OFF', 'h_1'];\n        }\n        else { // Soil < soil_max\n            if (parseFloat(data_.data.hum_in) <= parseFloat(tracking.hum_min)) {\n                return ['ON', 'h_2'];\n            } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max2)) {\n                return ['OFF', 'h_3'];\n            } else {\n                return [log_control, 'h_4'];\n            }\n        }\n    }\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 1080,
        "wires": [
            [
                "dee077bdccce9051"
            ]
        ]
    },
    {
        "id": "73b4b8c9b17fe33b",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_Spray",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nlet log_control = response['spray'];\nlet status = [], load = [], stop_time \nlet submode_, num_\n\n// msg.payload = tracking.status_2\n// return msg\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"spray\");\n\n        if (context.get('log_foggy') == undefined || context.get('log_foggy') == '') {\n            context.set('log_foggy', response['foggy_1']);\n        }\n                \n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            // กรณีนอกเวลา\n            status.push('OFF')\n            submode_ = 'out of time H&T';\n            num_ = 1;\n        } else {\n            if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                let ress = load_modeHum('t<m')\n                status.push(ress[0]);\n                num_ = 't < max ' + ress[1];\n            } \n            else { // temp > max\n                if (tracking.status_3 == 0) {\n                    let ress = load_modeHum('t>m')\n                    status.push(ress[0]);\n                    num_ = 't = off ' + ress[1];\n                }\n                else{ // ON Mode Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(15)); //15\n                        context.set('tracking', tracking);\n                    }\n                    else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(15)); //15\n                        }\n                    }\n                    if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) {\n                        // time <= time_fan\n                        let ress = load_modeHum('t>m')\n                        status.push(ress[0]);\n                        num_ = 't <= 15m ' + ress[1] + ' t= ' + context.get('time_fan');\n                    } else { // หลัง 15 นาที\n                        // ------------------------------------\n                        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n                            if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum >= max';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                                context.set('log_foggy', 'OFF')\n                            } else { // hum < config\n                                if (context.get('timeON_spray') == \"\" && context.get('timeOFF_spray') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                    }\n                                }\n                                else {\n                                    // timeON_spray != '' || timeOFF_spray != ''\n                                    if (context.get('timeON_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_spray', add_time(5)); // 5\n                                                context.set('timeON_spray', \"\");\n                                                num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | hum >= config | time <= timeON_spray'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_spray', \"\");\n                                                context.set('timeON_spray', add_time(5)); // 5\n                                                num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }else{\n                            // soil < soil_Max\n                            if (parseFloat(data_.data.hum_in) < parseFloat(tracking.hum_max2)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum < config';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                            } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum >= max';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                                context.set('log_foggy', 'OFF')\n                            } else { // hum < config\n                                if (context.get('timeON_spray') == \"\" && context.get('timeOFF_spray') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                    }\n                                }\n                                else {\n                                    // timeON_spray != '' || timeOFF_spray != ''\n                                    if (context.get('timeON_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_spray', add_time(5)); // 5\n                                                context.set('timeON_spray', \"\");\n                                                num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | hum >= config | time <= timeON_spray'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_spray', \"\");\n                                                context.set('timeON_spray', add_time(5)); // 5\n                                                num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }\n                        // ==================================\n                    }\n                }\n            }\n        }\n       \n        let payload = {\n            'sn': data_.serial_id,\n            'mode': 'Tracking',\n            'load': JSON.stringify(load),\n            'status': JSON.stringify(status),\n            'user': tracking.user_control,\n            'soil_max': tracking.soil_max,\n            'data_soil': Number(data_.data.soil_in),\n            'hum_min': tracking.hum_min,\n            'hum_max': tracking.hum_max,\n            'hum_max2': tracking.hum_max2,\n            'data_hum': Number(data_.data.hum_in),\n            time_fan: context.get('time_fan'),\n            nt: add_time(0),\n            // ONfoggy: context.get('timeON_foggy'),\n            // OFFfoggy: context.get('timeOFF_foggy'),\n            ONspray: context.get('timeON_spray'),\n            OFFspray: context.get('timeOFF_spray'),\n            // load_resp: load_resp,\n            // submode: submode_,\n            num_: num_,\n            // z_1: load_resp.toString(),\n            // z_2: status.toString(),\n            s: (new Date(ndate + ' ' + add_time(0))).getTime() / 1000,\n            xx: (new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000,\n            zzz: context.get('status_log'),\n            log_foggy: context.get('log_foggy')\n        };\n        msg.payload = payload\n        if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n            if (log_control != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }else{\n            if (context.get('status_log') != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n            context.set('timeON_spray', \"\");\n            context.set('timeOFF_spray', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n        context.set('timeON_spray', \"\");\n        context.set('timeOFF_spray', \"\");\n    }\n}\nfunction load_modeHum(val) {\n    if(val == 't<m'){\n        context.set('time_fan', \"\");\n    }\n    context.set('timeON_spray', \"\");\n    context.set('timeOFF_spray', \"\");\n    if (tracking.status_2 == 0) {\n        return ['OFF', 'h_0'];\n    }\n    else {\n        if (parseFloat(data_.data.hum_in) < parseFloat(tracking.hum_max2)) {\n            if (parseFloat(data_.data.hum_in) <= parseFloat(tracking.hum_min)) {\n                context.set('log_foggy', 'ON')\n            }\n            return ['OFF', 'h_1'];\n        } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n            context.set('log_foggy', 'OFF')\n            return ['OFF', 'h_2'];\n        } else { // hum >= config && < max\n            if (context.get('log_foggy') == 'ON') {\n                return ['ON', 'h_3'];\n            } else {\n                return ['OFF', 'h_4'];\n            }\n        }\n    }\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 1120,
        "wires": [
            [
                "dee077bdccce9051"
            ]
        ]
    },
    {
        "id": "6e8d68d0c40cf652",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "connect/status/TUSMT002",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1379.0000038146973,
        "y": 999.0000057220459,
        "wires": [
            [
                "0b04ccb5cce8fe8f"
            ]
        ]
    },
    {
        "id": "0b04ccb5cce8fe8f",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "msg.payload = msg.payload;\nmsg.topic = \"get_status\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 999.0000057220459,
        "wires": [
            [
                "9826d34464b16e27"
            ]
        ]
    },
    {
        "id": "9826d34464b16e27",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "send_load_to_mqtt",
        "func": "if (msg.topic === \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic === \"get_data\") {\n    context.set('get_data', msg.payload);\n}\nlet get_status = context.get('get_status') || 0;\nlet get_data = context.get('get_data') || 0;\nif (get_status == 0 || get_status === 'offline') {\n    return false;\n}\nif (get_data == 0) {\n    return false;\n}\n\n\n// let get_data = msg.payload;\nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/mqtt_load_auto.php\";\nmsg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\nmsg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\nmsg.payload = {\n    sn: get_data.sn,\n    mode: get_data.mode,\n    load: get_data.load,\n    status: get_data.status,\n    user: get_data.user\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 1000,
        "wires": [
            [
                "6d767240b979dad7"
            ]
        ]
    },
    {
        "id": "446fe4305504a882",
        "type": "inject",
        "z": "96f306faac18dafe",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1430,
        "y": 2120,
        "wires": [
            [
                "c72f1c4ead84faee"
            ]
        ]
    },
    {
        "id": "c72f1c4ead84faee",
        "type": "moment",
        "z": "96f306faac18dafe",
        "name": "timmer",
        "topic": "timer",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "minutes",
        "adjDir": "subtract",
        "format": "HH:mm:ss",
        "locale": "th_TH",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 1590,
        "y": 2120,
        "wires": [
            [
                "887097080cb829db"
            ]
        ]
    },
    {
        "id": "8d92c0c0786ef9f7",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT003/control/config/time_auto",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1360,
        "y": 2080,
        "wires": [
            [
                "3b1e72bebcda4c3c"
            ]
        ]
    },
    {
        "id": "767c165406045997",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT003/control/loads/mode",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1359.0000038146973,
        "y": 1799.000005722046,
        "wires": [
            [
                "542531a421ba9c31"
            ]
        ]
    },
    {
        "id": "542531a421ba9c31",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"get_mode\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 1799.000005722046,
        "wires": [
            [
                "d04c009c95dc9a96"
            ]
        ]
    },
    {
        "id": "3b1e72bebcda4c3c",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "// var result = JSON.parse(msg.payload);\n\nmsg.payload = msg.payload;\nmsg.topic = \"get_timeAuto\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 2080,
        "wires": [
            [
                "887097080cb829db"
            ]
        ]
    },
    {
        "id": "99029e559ce7b78d",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT003/control/set_config",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1369.0000038146973,
        "y": 1759.000005722046,
        "wires": [
            [
                "a33714c502ea4644"
            ]
        ]
    },
    {
        "id": "a33714c502ea4644",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"set_config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 1759.000005722046,
        "wires": [
            [
                "d04c009c95dc9a96",
                "887097080cb829db",
                "02fd71843a7cd559"
            ]
        ]
    },
    {
        "id": "887097080cb829db",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Timer",
        "func": "if (msg.topic === \"timer\"){\n    context.set('timer',msg.timer);\n}\nif (msg.topic === \"set_config\"){\n    context.set('set_config',msg.payload);\n}\nif (msg.topic === \"get_timeAuto\"){\n    context.set('get_timeAuto',msg.payload);\n}\nif (msg.topic === \"response\"){\n    context.set('response',msg.payload);\n}\n\nlet get_timer = context.get('timer') || 0;\nlet set_config = context.get('set_config') || 0;\nlet get_timeAuto = context.get('get_timeAuto') || 0;\nlet response = context.get('response') || 0;\nif (get_timer == 0) {\n    return false;\n}\nif (set_config == 0) {\n    return false;\n}\nif (get_timeAuto == 0) {\n    return false;\n}\nif (response == 0) {\n    return false;\n}\nif (response.mode === 'Auto'){\n    if (set_config.sub_mode.sub_mode === 'Timer') {\n        msg.payload = {\n                time :  get_timer,\n                set_config: set_config,\n                time_auto : get_timeAuto,\n                response: response\n            };\n        // msg.topic = 'config';\n        return msg;\n    }\n}\n// else{\n//     msg.payload = set_config.sub_mode.sub_mode\n//     return msg\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1759.0000038146973,
        "y": 2079.000005722046,
        "wires": [
            [
                "a36fce8d01b0c433",
                "8c4746fcc348f403",
                "9254d88fb0e98757",
                "55298172d524c6b7",
                "5d85b72261da7ee6",
                "86417d87058d403d",
                "0c9fbc390e8259ac",
                "4d451d84e0c8f1b6",
                "986a4e143f82899c",
                "f008fbfd4afbf2e6",
                "d2fe6ab62527471c",
                "48bf1db71b14ee77"
            ]
        ]
    },
    {
        "id": "d04c009c95dc9a96",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Mode",
        "func": "if (msg.topic == \"get_mode\") {\n    context.set('get_mode', msg.payload);\n}\nif (msg.topic == \"set_config\") {\n    context.set('get_submode', msg.payload);\n}\n\nvar get_mode = context.get('get_mode') || 0;\nvar get_submode = context.get('get_submode') || 0;\nvar log_control = context.get('log_control') || 'No';\n\nif (get_mode == 0) {\n    return false;\n}\nif (get_submode == 0) {\n    return false;\n}\nif (log_control === 'No') {\n    context.set('log_control', get_mode)\n}else{\n    if (get_mode !== log_control){\n        // msg.headers = {};\n        // msg.method = \"POST\";\n        // msg.url = \"http://localhost/smartfarm/server/insert_data/tu/mode.php\";\n        // msg.payload = {\n        //     output: get_mode,\n        //     get_: get_submode.sub_mode.sn\n        // }\n        // msg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n        // msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n        get_submode['mode'] = get_mode;\n        msg.payload = get_submode;\n        context.set('log_control', get_mode);\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 1800,
        "wires": [
            [
                "62017cd320258335"
            ]
        ]
    },
    {
        "id": "62017cd320258335",
        "type": "mqtt out",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT003/control/set_config",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 2510,
        "y": 1800,
        "wires": []
    },
    {
        "id": "4d451d84e0c8f1b6",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 4",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_8;\nlet user = set_config.config_timeSet.load_8.user_control;\nlet load = 'fan_4';\nlet log_control = res.response.fan_4;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2360,
        "wires": [
            [
                "55da0bfeb69d4113"
            ]
        ]
    },
    {
        "id": "f008fbfd4afbf2e6",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Foggy 2",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_10;\nlet user, load = 'foggy_2';\nlet log_control = res.response.foggy_2;\nif (sub_mode.sub_mode_10 === 'Time_set') {\n    user = set_config.config_timeSet.load_10.user_control;\n} else {\n    user = set_config.config_timeLoop.load_10.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 2440,
        "wires": [
            [
                "55da0bfeb69d4113"
            ]
        ]
    },
    {
        "id": "d2fe6ab62527471c",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Spray",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_11;\nlet user, load = 'spray';\nlet log_control = res.response.spray;\nif (sub_mode.sub_mode_11 === 'Time_set') {\n    user = set_config.config_timeSet.load_11.user_control;\n} else {\n    user = set_config.config_timeLoop.load_11.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2480,
        "wires": [
            [
                "55da0bfeb69d4113"
            ]
        ]
    },
    {
        "id": "48bf1db71b14ee77",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Shading",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_12;\nlet user = set_config.config_timeSet.load_12.user_control;\nlet load = 'shading';\nlet log_control = res.response.shading; //context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto'){\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user,\n                log_control:log_control\n            };\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 2520,
        "wires": [
            [
                "55da0bfeb69d4113"
            ]
        ]
    },
    {
        "id": "41f6a36c297bfdc7",
        "type": "http request",
        "z": "96f306faac18dafe",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2470,
        "y": 1880,
        "wires": [
            [
                "fc26fa5d8cd9c85e"
            ]
        ]
    },
    {
        "id": "fc26fa5d8cd9c85e",
        "type": "debug",
        "z": "96f306faac18dafe",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2470,
        "y": 1920,
        "wires": []
    },
    {
        "id": "0c9fbc390e8259ac",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 3",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_7;\nlet user = set_config.config_timeSet.load_7.user_control;\nlet load = 'fan_3';\nlet log_control = res.response.fan_3;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2320,
        "wires": [
            [
                "55da0bfeb69d4113"
            ]
        ]
    },
    {
        "id": "5d85b72261da7ee6",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 1",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_5;\nlet user = set_config.config_timeSet.load_5.user_control;\nlet load = 'fan_1';\nlet log_control = res.response.fan_1;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto'){\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2240,
        "wires": [
            [
                "55da0bfeb69d4113"
            ]
        ]
    },
    {
        "id": "86417d87058d403d",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 2",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_6;\nlet user = set_config.config_timeSet.load_6.user_control;\nlet load = 'fan_2';\nlet log_control = res.response.fan_2;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2280,
        "wires": [
            [
                "55da0bfeb69d4113"
            ]
        ]
    },
    {
        "id": "55298172d524c6b7",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 4",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_4;\nlet user, load = 'dripper_4';\nlet log_control = res.response.dripper_4;\nif (sub_mode.sub_mode_4 === 'Time_set') {\n    user = set_config.config_timeSet.load_4.user_control;\n} else {\n    user = set_config.config_timeLoop.load_4.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 2200,
        "wires": [
            [
                "55da0bfeb69d4113"
            ]
        ]
    },
    {
        "id": "9254d88fb0e98757",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 3",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_3;\nlet user, load = 'dripper_3';\nlet log_control = res.response.dripper_3;\nif (sub_mode.sub_mode_3 === 'Time_set') {\n    user = set_config.config_timeSet.load_3.user_control;\n} else {\n    user = set_config.config_timeLoop.load_3.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 2160,
        "wires": [
            [
                "55da0bfeb69d4113"
            ]
        ]
    },
    {
        "id": "8c4746fcc348f403",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 2",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_2;\nlet user, load = 'dripper_2';\nlet log_control = res.response.dripper_2;\nif (sub_mode.sub_mode_2 === 'Time_set') {\n    user = set_config.config_timeSet.load_2.user_control;\n} else {\n    user = set_config.config_timeLoop.load_2.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 2120,
        "wires": [
            [
                "55da0bfeb69d4113"
            ]
        ]
    },
    {
        "id": "a36fce8d01b0c433",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 1",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_1;\nlet user, load = 'dripper_1';\nlet log_control = res.response.dripper_1;\nif (sub_mode.sub_mode_1 === 'Time_set') {\n    user = set_config.config_timeSet.load_1.user_control;\n} else {\n    user = set_config.config_timeLoop.load_1.user_control;\n}\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        // msg.payload = Object.keys(time_auto).length/2 \n        // msg.payload = sub_mode\n        // return msg;\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 2080,
        "wires": [
            [
                "55da0bfeb69d4113"
            ]
        ]
    },
    {
        "id": "02fd71843a7cd559",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_config",
        "func": "if (msg.topic === \"set_config\"){\n    context.set('config',msg.payload);\n}\nif (msg.topic === \"filter_raw\"){\n    context.set('filter_raw',msg.payload);\n}\nif (msg.topic === \"filter_eq\"){\n    context.set('filter_eq',msg.payload);\n}\nif (msg.topic === \"response\"){\n    context.set('response',msg.payload);\n}\n\n// var get_date_timer = context.get('timer') || 0;\nlet set_config = context.get('config') || 0;\nlet filter_raw = context.get('filter_raw') || 0;\nlet filter_eq = context.get('filter_eq') || 0;\nlet response = context.get('response') || 0;\n\nif(set_config == 0){\n    return false;\n}\nif(filter_raw == 0){\n    return false;\n}\nif(filter_eq == 0){\n    return false;\n}\nif(response == 0){\n    return false;\n}\nlet sub_mode = set_config.sub_mode;\nlet tracking = set_config.config_tracking;\nlet data_;\nif (response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Tracking') {\n        if(set_config.eq == 0){ // ไม่ผ่านสมการ\n            data_ = filter_raw;\n        }else{\n            data_ = filter_eq;\n        }\n        msg.payload = {\n            // date_time : get_date_timer,\n            tracking : tracking,\n            data_ : data_,\n            response : response,\n            eq: set_config.eq,\n            sub_mode: sub_mode.sub_mode,\n            control_v: set_config.control_V\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1789.0000038146973,
        "y": 1879.000005722046,
        "wires": [
            [
                "4f88750a14e14a42"
            ]
        ]
    },
    {
        "id": "a1e0a7c89954d0e8",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT003/data_sensor/filter",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1369.0000038146973,
        "y": 1879.000005722046,
        "wires": [
            [
                "b2aeea983bc255ce"
            ]
        ]
    },
    {
        "id": "b2aeea983bc255ce",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"filter_raw\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 1879.000005722046,
        "wires": [
            [
                "02fd71843a7cd559"
            ]
        ]
    },
    {
        "id": "f981033ba937bec5",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT003/data_sensor/filter_eq",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1359.0000038146973,
        "y": 1919.000005722046,
        "wires": [
            [
                "11c9db0016cc81c5"
            ]
        ]
    },
    {
        "id": "11c9db0016cc81c5",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"filter_eq\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 1919.000005722046,
        "wires": [
            [
                "02fd71843a7cd559"
            ]
        ]
    },
    {
        "id": "55da0bfeb69d4113",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "// var result = JSON.parse(msg.payload);\n\nmsg.payload = msg.payload;\nmsg.topic = \"get_data\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2259.0000038146973,
        "y": 2079.000005722046,
        "wires": [
            [
                "48d718e604b4334c"
            ]
        ]
    },
    {
        "id": "986a4e143f82899c",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Foggy 1",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_9;\nlet user, load = 'foggy_1';\nlet log_control = res.response.foggy_1;\nif (sub_mode.sub_mode_9 === 'Time_set') {\n    user = set_config.config_timeSet.load_9.user_control;\n} else {\n    user = set_config.config_timeLoop.load_9.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 2400,
        "wires": [
            [
                "55da0bfeb69d4113"
            ]
        ]
    },
    {
        "id": "4726f633545fa650",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT003/control/response",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1369.0000038146973,
        "y": 1959.000005722046,
        "wires": [
            [
                "028a646e255a13ec"
            ]
        ]
    },
    {
        "id": "028a646e255a13ec",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"response\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 1959.000005722046,
        "wires": [
            [
                "02fd71843a7cd559",
                "887097080cb829db"
            ]
        ]
    },
    {
        "id": "4f88750a14e14a42",
        "type": "moment",
        "z": "96f306faac18dafe",
        "name": "timer",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "months",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "th_TH",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 1839.0000038146973,
        "y": 1959.000005722046,
        "wires": [
            [
                "b5c3f5b32b3d510c",
                "09e2a97c276a7af4",
                "9dd24a202952b112",
                "e14067719a4af56c",
                "5ff1c180a98c88db"
            ]
        ]
    },
    {
        "id": "b5c3f5b32b3d510c",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_dripper",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        let status, load=[], load_res=[], msg_status = [], log_control=[],  res_status, stop_time;\n        for (let i = 1; i <= 4; i++) {\n            if (tracking['dripper_' + i] == \"ON\") {\n                load_res.push(response['dripper_' + i]);\n            }\n            load.push('dripper_' + i);\n            log_control.push(response['dripper_' + i]);\n        }\n        if (load_res.filter(function (value) { return value == 'ON'; }).length > 0) {\n            res_status = 'ON';\n        } else {\n            res_status = 'OFF';\n        }\n\n        if (tracking.status_1 == 0) {\n            status = 'OFF';\n        } else {\n            if (control_v == \"2\"){ // V อ.อร\n                stop_time = '16:00:00'\n            }else{\n                stop_time = '18:00:00'\n            }\n            if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00'){\n                status = 'OFF';\n            }else{\n                if (parseFloat(data_.data.soil_in) <= parseFloat(tracking.soil_min)){\n                    status = 'ON';\n                } else if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)){\n                    status = 'OFF';\n                }else{\n                    status = res_status;\n                }\n            }\n        }\n        for (let a = 1; a <= 4; a++){ // load.length;\n            if(tracking['dripper_'+a] == \"ON\"){\n                msg_status.push(status);\n            }else{\n                msg_status.push('OFF');\n            }\n        }\n        if (log_control.toString() != msg_status.toString()) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(msg_status),\n                user: tracking.user_control,\n                soil_min: tracking.soil_min,\n                soil_max: tracking.soil_max,\n                data: Number(data_.data.soil_in),\n                data2: parseFloat(data_.data.soil_in),\n                date_time:date_time,\n            };\n            // context.set('log_control', status)\n            // if(old_nowsec != nowsec){\n                // context.set('old_nowsec', nowsec);\n                return msg;\n            // }\n        }\n    }\n}\n\n// msg.payload =tracking\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 1880,
        "wires": [
            [
                "55da0bfeb69d4113"
            ]
        ]
    },
    {
        "id": "9dd24a202952b112",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_fan",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\n// let nsec = date_time.split(\" \")[1].split(\":\");\n// let nowsec = Number(nsec[2]);\n// let old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\n\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        let status, load = [], load_res = [], msg_status = [], log_control = [], res_status;\n        for (let i = 1; i <= 4; i++) {\n            if (tracking['fan_' + i] == \"ON\") {\n                load_res.push(response['fan_' + i]);\n            }\n            load.push('fan_' + i);\n            log_control.push(response['fan_' + i]);\n        }\n        if (tracking.status_3 == 0) {\n            status = 'OFF';\n        } else {\n            if (load_res.filter(function (value) { return value == 'ON'; }).length > 0) {\n                res_status = 'ON';\n            } else {\n                res_status = 'OFF';\n            }\n\n            if (control_v == \"2\") { // V อ.อร\n                if (date_time.split(\" \")[1] > '16:00:00' || date_time.split(\" \")[1] < '07:00:00') {\n                    status = 'OFF';\n                } else {\n                    if (parseFloat(data_.data.temp_in) <= parseFloat(tracking.temp_min)) {\n                        status = 'OFF';\n                    } else if (parseFloat(data_.data.temp_in) >= parseFloat(tracking.temp_max)) {\n                        status = 'ON';\n                    } else {\n                        status = res_status;\n                    }\n                }\n            } else {\n                if (parseFloat(data_.data.temp_in) <= parseFloat(tracking.temp_min)) {\n                    status = 'OFF';\n                } else if (parseFloat(data_.data.temp_in) >= parseFloat(tracking.temp_max)) {\n                    status = 'ON';\n                } else {\n                    status = res_status;\n                }\n            }\n        }\n        for (let a = 1; a <= 4; a++){ // load.length;\n            if(tracking['fan_'+a] == \"ON\"){\n                msg_status.push(status);\n            }else{\n                msg_status.push('OFF');\n            }\n        }\n        if (log_control.toString() != msg_status.toString()) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(msg_status),\n                user: tracking.user_control,\n                temp_min: tracking.temp_min,\n                temp_max: tracking.temp_max,\n                data: Number(data_.data.temp_in),\n            };\n            // context.set('log_control', status)\n            // if(old_nowsec != nowsec){\n                // context.set('old_nowsec', nowsec);\n                return msg;\n            // }\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 2000,
        "wires": [
            [
                "55da0bfeb69d4113"
            ]
        ]
    },
    {
        "id": "09e2a97c276a7af4",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_slan",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\n\nlet log_control = response['shading']; //context.get('log_control') || 'No';\nlet status = [], load = [], load_res = [], msg_status = [], a;\n\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n    a = 1\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"shading\");\n\n        if (control_v == \"2\") { // V อ.อร\n            if (tracking.status_3 == 0) { // ปิดโหมด Temp\n                status.push(status_slan('t<m'));\n                a = 3\n            } else { // เปิดโหมด Temp\n                if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                    status.push(status_slan('t<m'));\n                    a = 4\n                } else { // temp > max\n                    // จับเวลา Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(45)); //45\n                        context.set('tracking', tracking);\n                    } else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(45)); //45\n                        }\n                    }\n                    // ------------------------------------\n\n                    if (date_time.split(\" \")[1] >= '12:00:00' && date_time.split(\" \")[1] < '16:00:00') {\n                        // 12:00 - 16:00\n                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) { //<=\n                            // timw ปัจจุบัน <= time_fan\n                            status.push(status_slan('t>m'));\n                            a = 7\n                        } else {\n                            status.push('ON');\n                            a = 8\n                        }\n                    } else {\n                        // นอกช่วงเวลา 12:00 - 16:00\n                        status.push(status_slan('t>m'));\n                    }\n                }\n            }\n        } else { // No V อ.อร\n            status.push(status_slan('t<m'));\n        }\n        if (log_control != status[0]) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(status),\n                user: tracking.user_control,\n                light_min: tracking.light_min,\n                light_max: tracking.light_max,\n                ss: log_control,\n                s2: tracking.status_4\n            };\n            // context.set('log_control', status)\n\n            // if(old_nowsec != nowsec){\n            //     context.set('old_nowsec', nowsec);\n            return msg;\n            // }\n        }\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n    }\n}\n\nfunction status_slan(val) {\n    if (val == 't<m') {\n        context.set('time_fan', \"\");\n    }\n    let s_slan, n_data, stop_time;\n\n    if (tracking.status_4 == 0) { // ปิดโหมด Slan\n        s_slan = \"OFF\";\n    } else { // เปิดโหมด Slan\n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            s_slan = \"OFF\";\n        } else {\n            // if (parseFloat(tracking.light_in_mode) == 5) {\n            //     n_data = parseFloat(data_.data.light_in) / 54;\n            // } else {\n            n_data = parseFloat(data_.data.light_in) / 1000;\n            // }\n\n            if (parseFloat(n_data) <= parseFloat(tracking.light_min)) {\n                s_slan = \"OFF\"; // เปิดม่าน\n            } else if (parseFloat(n_data) >= parseFloat(tracking.light_max)) {\n                s_slan = \"ON\"; // ปิดม่าน\n            } else {\n                s_slan = log_control;\n            }\n        }\n    }\n    return s_slan;\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 2040,
        "wires": [
            [
                "55da0bfeb69d4113"
            ]
        ]
    },
    {
        "id": "e14067719a4af56c",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_Foggy",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nlet log_control = response['foggy_1'];\nlet status = [], load = [], stop_time // load_res = [], msg_status = [], a;\nlet submode_, num_\n\n// msg.payload = tracking.status_2\n// return msg\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"foggy_1\");\n\n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            // กรณีนอกเวลา\n            status.push('OFF')\n            submode_ = 'out of time H&T';\n            num_ = 1;\n        } else {\n            if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                let ress = load_modeHum('t<m')\n                status.push(ress[0]);\n                num_ = 't < max ' + ress[1];\n            }\n            else { // temp > max\n                if (tracking.status_3 == 0) {\n                    let ress = load_modeHum('t>m')\n                    status.push(ress[0]);\n                    num_ = 't = off ' + ress[1];\n                }\n                else { // ON Mode Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(15)); //15\n                        context.set('tracking', tracking);\n                    }\n                    else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(15)); //15\n                        }\n                    }\n                    if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) {\n                        // time <= time_fan\n                        let ress = load_modeHum('t>m')\n                        status.push(ress[0]);\n                        num_ = 't <= 15m ' + ress[1] + ' t= ' + context.get('time_fan');\n                    } else { // หลัง 15 นาที\n                        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n                            status.push('OFF');\n                            num_ = 't > 15m | soil > m';\n                            context.set('timeON_foggy', \"\");\n                            context.set('timeOFF_foggy', \"\");\n                        }\n                        else { // Soil < Max\n                            if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max2)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | soil < m | hum >= config';\n                                context.set('timeON_foggy', \"\");\n                                context.set('timeOFF_foggy', \"\");\n                            } else { // hum < config\n                                if (context.get('timeON_foggy') == \"\" && context.get('timeOFF_foggy') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_foggy', add_time(13)); // 13\n                                        num_ = 't > 15m | soil < m | hum < config จะ on เวลา ' + add_time(13);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_foggy', add_time(2));\n                                        num_ = 't > 15m | soil < m | hum < config จะ off เวลา ' + add_time(2);\n                                    }\n                                }\n                                else {\n                                    // timeON_foggy != '' || timeOFF_foggy != ''\n                                    if (context.get('timeON_foggy') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_foggy'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_foggy', add_time(2)); // 2\n                                                context.set('timeON_foggy', \"\");\n                                                num_ = 't > 15m | soil < m | hum < config จะ off เวลา ' + add_time(2);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeON_foggy'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_foggy') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_foggy'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_foggy', \"\");\n                                                context.set('timeON_foggy', add_time(13)); // 13\n                                                num_ = 't > 15m | soil < m | hum < config จะ on เวลา ' + add_time(13);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n\n\n        let payload = {\n            'sn': data_.serial_id,\n            'mode': 'Tracking',\n            'load': JSON.stringify(load),\n            'status': JSON.stringify(status),\n            'user': tracking.user_control,\n            'soil_max': tracking.soil_max,\n            'data_soil': Number(data_.data.soil_in),\n            'hum_min': tracking.hum_min,\n            'hum_max': tracking.hum_max,\n            'hum_max2': tracking.hum_max2,\n            'data_hum': Number(data_.data.hum_in),\n            time_fan: context.get('time_fan'),\n            nt: add_time(0),\n            ONfoggy: context.get('timeON_foggy'),\n            OFFfoggy: context.get('timeOFF_foggy'),\n            // ONspray: context.get('timeON_spray'),\n            // OFFspray: context.get('timeOFF_spray'),\n            // load_resp: load_resp,\n            // submode: submode_,\n            num_: num_,\n            // z_1: load_resp.toString(),\n            // z_2: status.toString(),\n            s: (new Date(ndate + ' ' + add_time(0))).getTime() / 1000,\n            xx: (new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000,\n            zzz: context.get('status_log')\n        };\n        msg.payload = payload\n        if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n            if (log_control != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }else{\n            if (context.get('status_log') != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }\n\n\n\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n            context.set('timeON_foggy', \"\");\n            context.set('timeOFF_foggy', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n        context.set('timeON_foggy', \"\");\n        context.set('timeOFF_foggy', \"\");\n    }\n}\nfunction load_modeHum(val) {\n    if (val == 't<m') {\n        context.set('time_fan', \"\");\n    }\n    context.set('timeON_foggy', \"\");\n    context.set('timeOFF_foggy', \"\");\n    if (tracking.status_2 == 0) {\n        return ['OFF', 'h_0'];\n    }\n    else {\n        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n            return ['OFF', 'h_1'];\n        }\n        else { // Soil < soil_max\n            if (parseFloat(data_.data.hum_in) <= parseFloat(tracking.hum_min)) {\n                return ['ON', 'h_2'];\n            } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max2)) {\n                return ['OFF', 'h_3'];\n            } else {\n                return [log_control, 'h_4'];\n            }\n        }\n    }\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 1920,
        "wires": [
            [
                "55da0bfeb69d4113"
            ]
        ]
    },
    {
        "id": "5ff1c180a98c88db",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_Spray",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nlet log_control = response['spray'];\nlet status = [], load = [], stop_time \nlet submode_, num_\n\n// msg.payload = tracking.status_2\n// return msg\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"spray\");\n\n        if (context.get('log_foggy') == undefined || context.get('log_foggy') == '') {\n            context.set('log_foggy', response['foggy_1']);\n        }\n                \n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            // กรณีนอกเวลา\n            status.push('OFF')\n            submode_ = 'out of time H&T';\n            num_ = 1;\n        } else {\n            if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                let ress = load_modeHum('t<m')\n                status.push(ress[0]);\n                num_ = 't < max ' + ress[1];\n            } \n            else { // temp > max\n                if (tracking.status_3 == 0) {\n                    let ress = load_modeHum('t>m')\n                    status.push(ress[0]);\n                    num_ = 't = off ' + ress[1];\n                }\n                else{ // ON Mode Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(15)); //15\n                        context.set('tracking', tracking);\n                    }\n                    else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(15)); //15\n                        }\n                    }\n                    if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) {\n                        // time <= time_fan\n                        let ress = load_modeHum('t>m')\n                        status.push(ress[0]);\n                        num_ = 't <= 15m ' + ress[1] + ' t= ' + context.get('time_fan');\n                    } else { // หลัง 15 นาที\n                        // ------------------------------------\n                        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n                            if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum >= max';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                                context.set('log_foggy', 'OFF')\n                            } else { // hum < config\n                                if (context.get('timeON_spray') == \"\" && context.get('timeOFF_spray') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                    }\n                                }\n                                else {\n                                    // timeON_spray != '' || timeOFF_spray != ''\n                                    if (context.get('timeON_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_spray', add_time(5)); // 5\n                                                context.set('timeON_spray', \"\");\n                                                num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | hum >= config | time <= timeON_spray'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_spray', \"\");\n                                                context.set('timeON_spray', add_time(5)); // 5\n                                                num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }else{\n                            // soil < soil_Max\n                            if (parseFloat(data_.data.hum_in) < parseFloat(tracking.hum_max2)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum < config';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                            } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum >= max';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                                context.set('log_foggy', 'OFF')\n                            } else { // hum < config\n                                if (context.get('timeON_spray') == \"\" && context.get('timeOFF_spray') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                    }\n                                }\n                                else {\n                                    // timeON_spray != '' || timeOFF_spray != ''\n                                    if (context.get('timeON_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_spray', add_time(5)); // 5\n                                                context.set('timeON_spray', \"\");\n                                                num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | hum >= config | time <= timeON_spray'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_spray', \"\");\n                                                context.set('timeON_spray', add_time(5)); // 5\n                                                num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }\n                        // ==================================\n                    }\n                }\n            }\n        }\n       \n        let payload = {\n            'sn': data_.serial_id,\n            'mode': 'Tracking',\n            'load': JSON.stringify(load),\n            'status': JSON.stringify(status),\n            'user': tracking.user_control,\n            'soil_max': tracking.soil_max,\n            'data_soil': Number(data_.data.soil_in),\n            'hum_min': tracking.hum_min,\n            'hum_max': tracking.hum_max,\n            'hum_max2': tracking.hum_max2,\n            'data_hum': Number(data_.data.hum_in),\n            time_fan: context.get('time_fan'),\n            nt: add_time(0),\n            // ONfoggy: context.get('timeON_foggy'),\n            // OFFfoggy: context.get('timeOFF_foggy'),\n            ONspray: context.get('timeON_spray'),\n            OFFspray: context.get('timeOFF_spray'),\n            // load_resp: load_resp,\n            // submode: submode_,\n            num_: num_,\n            // z_1: load_resp.toString(),\n            // z_2: status.toString(),\n            s: (new Date(ndate + ' ' + add_time(0))).getTime() / 1000,\n            xx: (new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000,\n            zzz: context.get('status_log'),\n            log_foggy: context.get('log_foggy')\n        };\n        msg.payload = payload\n        if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n            if (log_control != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }else{\n            if (context.get('status_log') != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n            context.set('timeON_spray', \"\");\n            context.set('timeOFF_spray', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n        context.set('timeON_spray', \"\");\n        context.set('timeOFF_spray', \"\");\n    }\n}\nfunction load_modeHum(val) {\n    if(val == 't<m'){\n        context.set('time_fan', \"\");\n    }\n    context.set('timeON_spray', \"\");\n    context.set('timeOFF_spray', \"\");\n    if (tracking.status_2 == 0) {\n        return ['OFF', 'h_0'];\n    }\n    else {\n        if (parseFloat(data_.data.hum_in) < parseFloat(tracking.hum_max2)) {\n            if (parseFloat(data_.data.hum_in) <= parseFloat(tracking.hum_min)) {\n                context.set('log_foggy', 'ON')\n            }\n            return ['OFF', 'h_1'];\n        } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n            context.set('log_foggy', 'OFF')\n            return ['OFF', 'h_2'];\n        } else { // hum >= config && < max\n            if (context.get('log_foggy') == 'ON') {\n                return ['ON', 'h_3'];\n            } else {\n                return ['OFF', 'h_4'];\n            }\n        }\n    }\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 1960,
        "wires": [
            [
                "55da0bfeb69d4113"
            ]
        ]
    },
    {
        "id": "bf5442a25c0b4063",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "connect/status/TUSMT003",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1379.0000038146973,
        "y": 1839.000005722046,
        "wires": [
            [
                "c52e9ece3fb2640a"
            ]
        ]
    },
    {
        "id": "c52e9ece3fb2640a",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "msg.payload = msg.payload;\nmsg.topic = \"get_status\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 1839.000005722046,
        "wires": [
            [
                "48d718e604b4334c"
            ]
        ]
    },
    {
        "id": "48d718e604b4334c",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "send_load_to_mqtt",
        "func": "if (msg.topic === \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic === \"get_data\") {\n    context.set('get_data', msg.payload);\n}\nlet get_status = context.get('get_status') || 0;\nlet get_data = context.get('get_data') || 0;\nif (get_status == 0 || get_status === 'offline') {\n    return false;\n}\nif (get_data == 0) {\n    return false;\n}\n\n\n// let get_data = msg.payload;\nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/mqtt_load_auto.php\";\nmsg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\nmsg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\nmsg.payload = {\n    sn: get_data.sn,\n    mode: get_data.mode,\n    load: get_data.load,\n    status: get_data.status,\n    user: get_data.user\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 1840,
        "wires": [
            [
                "41f6a36c297bfdc7"
            ]
        ]
    },
    {
        "id": "a84e79897b4b192f",
        "type": "inject",
        "z": "96f306faac18dafe",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1430,
        "y": 2980,
        "wires": [
            [
                "2082bcdcdd7080dc"
            ]
        ]
    },
    {
        "id": "2082bcdcdd7080dc",
        "type": "moment",
        "z": "96f306faac18dafe",
        "name": "timmer",
        "topic": "timer",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "minutes",
        "adjDir": "subtract",
        "format": "HH:mm:ss",
        "locale": "th_TH",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 1590,
        "y": 2980,
        "wires": [
            [
                "d775151b16c9a2d5"
            ]
        ]
    },
    {
        "id": "dc12679b40b13879",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT004/control/config/time_auto",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1360,
        "y": 2940,
        "wires": [
            [
                "f3721cdb8cfa5212"
            ]
        ]
    },
    {
        "id": "c3b8153e4ce82337",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT004/control/loads/mode",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1359.0000038146973,
        "y": 2659.000005722046,
        "wires": [
            [
                "2c5c76b1940122ca"
            ]
        ]
    },
    {
        "id": "2c5c76b1940122ca",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"get_mode\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 2659.000005722046,
        "wires": [
            [
                "64a3308d6afd3cb5"
            ]
        ]
    },
    {
        "id": "f3721cdb8cfa5212",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "// var result = JSON.parse(msg.payload);\n\nmsg.payload = msg.payload;\nmsg.topic = \"get_timeAuto\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 2940,
        "wires": [
            [
                "d775151b16c9a2d5"
            ]
        ]
    },
    {
        "id": "6760d38d98b6c1c4",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT004/control/set_config",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1369.0000038146973,
        "y": 2619.000005722046,
        "wires": [
            [
                "cc5e1abbe303ed87"
            ]
        ]
    },
    {
        "id": "cc5e1abbe303ed87",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"set_config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 2619.000005722046,
        "wires": [
            [
                "64a3308d6afd3cb5",
                "d775151b16c9a2d5",
                "c4bd29c1080a59c0"
            ]
        ]
    },
    {
        "id": "d775151b16c9a2d5",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Timer",
        "func": "if (msg.topic === \"timer\"){\n    context.set('timer',msg.timer);\n}\nif (msg.topic === \"set_config\"){\n    context.set('set_config',msg.payload);\n}\nif (msg.topic === \"get_timeAuto\"){\n    context.set('get_timeAuto',msg.payload);\n}\nif (msg.topic === \"response\"){\n    context.set('response',msg.payload);\n}\n\nlet get_timer = context.get('timer') || 0;\nlet set_config = context.get('set_config') || 0;\nlet get_timeAuto = context.get('get_timeAuto') || 0;\nlet response = context.get('response') || 0;\nif (get_timer == 0) {\n    return false;\n}\nif (set_config == 0) {\n    return false;\n}\nif (get_timeAuto == 0) {\n    return false;\n}\nif (response == 0) {\n    return false;\n}\nif (response.mode === 'Auto'){\n    if (set_config.sub_mode.sub_mode === 'Timer') {\n        msg.payload = {\n                time :  get_timer,\n                set_config: set_config,\n                time_auto : get_timeAuto,\n                response: response\n            };\n        // msg.topic = 'config';\n        return msg;\n    }\n}\n// else{\n//     msg.payload = set_config.sub_mode.sub_mode\n//     return msg\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1759.0000038146973,
        "y": 2939.000005722046,
        "wires": [
            [
                "4e005979a85fbc44",
                "66b225f1ac4478be",
                "bee0fc7061e3a46e",
                "9385bbf6f7a8f181",
                "4c690b7309a7ac02",
                "6ca2b36ced7d9e13",
                "9737c6f15bedb10d",
                "e04cac7b6016c648",
                "7e5d8b0384b47546",
                "b19475292993df1f",
                "061ae466afc013e4",
                "0759528f2b4a8f44"
            ]
        ]
    },
    {
        "id": "64a3308d6afd3cb5",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Mode",
        "func": "if (msg.topic == \"get_mode\") {\n    context.set('get_mode', msg.payload);\n}\nif (msg.topic == \"set_config\") {\n    context.set('get_submode', msg.payload);\n}\n\nvar get_mode = context.get('get_mode') || 0;\nvar get_submode = context.get('get_submode') || 0;\nvar log_control = context.get('log_control') || 'No';\n\nif (get_mode == 0) {\n    return false;\n}\nif (get_submode == 0) {\n    return false;\n}\nif (log_control === 'No') {\n    context.set('log_control', get_mode)\n}else{\n    if (get_mode !== log_control){\n        // msg.headers = {};\n        // msg.method = \"POST\";\n        // msg.url = \"http://localhost/smartfarm/server/insert_data/tu/mode.php\";\n        // msg.payload = {\n        //     output: get_mode,\n        //     get_: get_submode.sub_mode.sn\n        // }\n        // msg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n        // msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n        get_submode['mode'] = get_mode;\n        msg.payload = get_submode;\n        context.set('log_control', get_mode);\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 2660,
        "wires": [
            [
                "c843f16eb4ea5c15"
            ]
        ]
    },
    {
        "id": "c843f16eb4ea5c15",
        "type": "mqtt out",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT004/control/set_config",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 2510,
        "y": 2660,
        "wires": []
    },
    {
        "id": "e04cac7b6016c648",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 4",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_8;\nlet user = set_config.config_timeSet.load_8.user_control;\nlet load = 'fan_4';\nlet log_control = res.response.fan_4;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 3220,
        "wires": [
            [
                "ae0dc3341993794d"
            ]
        ]
    },
    {
        "id": "b19475292993df1f",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Foggy 2",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_10;\nlet user, load = 'foggy_2';\nlet log_control = res.response.foggy_2;\nif (sub_mode.sub_mode_10 === 'Time_set') {\n    user = set_config.config_timeSet.load_10.user_control;\n} else {\n    user = set_config.config_timeLoop.load_10.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 3300,
        "wires": [
            [
                "ae0dc3341993794d"
            ]
        ]
    },
    {
        "id": "061ae466afc013e4",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Spray",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_11;\nlet user, load = 'spray';\nlet log_control = res.response.spray;\nif (sub_mode.sub_mode_11 === 'Time_set') {\n    user = set_config.config_timeSet.load_11.user_control;\n} else {\n    user = set_config.config_timeLoop.load_11.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 3340,
        "wires": [
            [
                "ae0dc3341993794d"
            ]
        ]
    },
    {
        "id": "0759528f2b4a8f44",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Shading",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_12;\nlet user = set_config.config_timeSet.load_12.user_control;\nlet load = 'shading';\nlet log_control = res.response.shading; //context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto'){\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user,\n                log_control:log_control\n            };\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 3380,
        "wires": [
            [
                "ae0dc3341993794d"
            ]
        ]
    },
    {
        "id": "223acb194f6eb886",
        "type": "http request",
        "z": "96f306faac18dafe",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2470,
        "y": 2740,
        "wires": [
            [
                "7ff89ea708f3cde2"
            ]
        ]
    },
    {
        "id": "7ff89ea708f3cde2",
        "type": "debug",
        "z": "96f306faac18dafe",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2470,
        "y": 2780,
        "wires": []
    },
    {
        "id": "9737c6f15bedb10d",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 3",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_7;\nlet user = set_config.config_timeSet.load_7.user_control;\nlet load = 'fan_3';\nlet log_control = res.response.fan_3;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 3180,
        "wires": [
            [
                "ae0dc3341993794d"
            ]
        ]
    },
    {
        "id": "4c690b7309a7ac02",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 1",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_5;\nlet user = set_config.config_timeSet.load_5.user_control;\nlet load = 'fan_1';\nlet log_control = res.response.fan_1;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto'){\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 3100,
        "wires": [
            [
                "ae0dc3341993794d"
            ]
        ]
    },
    {
        "id": "6ca2b36ced7d9e13",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 2",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_6;\nlet user = set_config.config_timeSet.load_6.user_control;\nlet load = 'fan_2';\nlet log_control = res.response.fan_2;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 3140,
        "wires": [
            [
                "ae0dc3341993794d"
            ]
        ]
    },
    {
        "id": "9385bbf6f7a8f181",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 4",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_4;\nlet user, load = 'dripper_4';\nlet log_control = res.response.dripper_4;\nif (sub_mode.sub_mode_4 === 'Time_set') {\n    user = set_config.config_timeSet.load_4.user_control;\n} else {\n    user = set_config.config_timeLoop.load_4.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 3060,
        "wires": [
            [
                "ae0dc3341993794d"
            ]
        ]
    },
    {
        "id": "bee0fc7061e3a46e",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 3",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_3;\nlet user, load = 'dripper_3';\nlet log_control = res.response.dripper_3;\nif (sub_mode.sub_mode_3 === 'Time_set') {\n    user = set_config.config_timeSet.load_3.user_control;\n} else {\n    user = set_config.config_timeLoop.load_3.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 3020,
        "wires": [
            [
                "ae0dc3341993794d"
            ]
        ]
    },
    {
        "id": "66b225f1ac4478be",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 2",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_2;\nlet user, load = 'dripper_2';\nlet log_control = res.response.dripper_2;\nif (sub_mode.sub_mode_2 === 'Time_set') {\n    user = set_config.config_timeSet.load_2.user_control;\n} else {\n    user = set_config.config_timeLoop.load_2.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 2980,
        "wires": [
            [
                "ae0dc3341993794d"
            ]
        ]
    },
    {
        "id": "4e005979a85fbc44",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 1",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_1;\nlet user, load = 'dripper_1';\nlet log_control = res.response.dripper_1;\nif (sub_mode.sub_mode_1 === 'Time_set') {\n    user = set_config.config_timeSet.load_1.user_control;\n} else {\n    user = set_config.config_timeLoop.load_1.user_control;\n}\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        // msg.payload = Object.keys(time_auto).length/2 \n        // msg.payload = sub_mode\n        // return msg;\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 2940,
        "wires": [
            [
                "ae0dc3341993794d"
            ]
        ]
    },
    {
        "id": "c4bd29c1080a59c0",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_config",
        "func": "if (msg.topic === \"set_config\"){\n    context.set('config',msg.payload);\n}\nif (msg.topic === \"filter_raw\"){\n    context.set('filter_raw',msg.payload);\n}\nif (msg.topic === \"filter_eq\"){\n    context.set('filter_eq',msg.payload);\n}\nif (msg.topic === \"response\"){\n    context.set('response',msg.payload);\n}\n\n// var get_date_timer = context.get('timer') || 0;\nlet set_config = context.get('config') || 0;\nlet filter_raw = context.get('filter_raw') || 0;\nlet filter_eq = context.get('filter_eq') || 0;\nlet response = context.get('response') || 0;\n\nif(set_config == 0){\n    return false;\n}\nif(filter_raw == 0){\n    return false;\n}\nif(filter_eq == 0){\n    return false;\n}\nif(response == 0){\n    return false;\n}\nlet sub_mode = set_config.sub_mode;\nlet tracking = set_config.config_tracking;\nlet data_;\nif (response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Tracking') {\n        if(set_config.eq == 0){ // ไม่ผ่านสมการ\n            data_ = filter_raw;\n        }else{\n            data_ = filter_eq;\n        }\n        msg.payload = {\n            // date_time : get_date_timer,\n            tracking : tracking,\n            data_ : data_,\n            response : response,\n            eq: set_config.eq,\n            sub_mode: sub_mode.sub_mode,\n            control_v: set_config.control_V\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1789.0000038146973,
        "y": 2739.000005722046,
        "wires": [
            [
                "a7bef6bb42073948"
            ]
        ]
    },
    {
        "id": "f10571dd1095260c",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT004/data_sensor/filter",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1369.0000038146973,
        "y": 2739.000005722046,
        "wires": [
            [
                "dcdc315b56daaf64"
            ]
        ]
    },
    {
        "id": "dcdc315b56daaf64",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"filter_raw\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 2739.000005722046,
        "wires": [
            [
                "c4bd29c1080a59c0"
            ]
        ]
    },
    {
        "id": "aa2427e5104ca562",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT004/data_sensor/filter_eq",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1359.0000038146973,
        "y": 2779.000005722046,
        "wires": [
            [
                "1dbd573f4d5782a9"
            ]
        ]
    },
    {
        "id": "1dbd573f4d5782a9",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"filter_eq\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 2779.000005722046,
        "wires": [
            [
                "c4bd29c1080a59c0"
            ]
        ]
    },
    {
        "id": "ae0dc3341993794d",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "// var result = JSON.parse(msg.payload);\n\nmsg.payload = msg.payload;\nmsg.topic = \"get_data\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2259.0000038146973,
        "y": 2939.000005722046,
        "wires": [
            [
                "a6a530cefe4a4adf"
            ]
        ]
    },
    {
        "id": "7e5d8b0384b47546",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Foggy 1",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_9;\nlet user, load = 'foggy_1';\nlet log_control = res.response.foggy_1;\nif (sub_mode.sub_mode_9 === 'Time_set') {\n    user = set_config.config_timeSet.load_9.user_control;\n} else {\n    user = set_config.config_timeLoop.load_9.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 3260,
        "wires": [
            [
                "ae0dc3341993794d"
            ]
        ]
    },
    {
        "id": "aafc488c5d12c36a",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT004/control/response",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1369.0000038146973,
        "y": 2819.000005722046,
        "wires": [
            [
                "bbde6b52a4727bfd"
            ]
        ]
    },
    {
        "id": "bbde6b52a4727bfd",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"response\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 2819.000005722046,
        "wires": [
            [
                "c4bd29c1080a59c0",
                "d775151b16c9a2d5"
            ]
        ]
    },
    {
        "id": "a7bef6bb42073948",
        "type": "moment",
        "z": "96f306faac18dafe",
        "name": "timer",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "months",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "th_TH",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 1839.0000038146973,
        "y": 2819.000005722046,
        "wires": [
            [
                "a2bd8ebfd36e4bc8",
                "f62eab3d4ddcef1d",
                "abd2e9dc60609fc0",
                "08f6d40e76d710c3",
                "c894f2bc6b7d232b"
            ]
        ]
    },
    {
        "id": "a2bd8ebfd36e4bc8",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_dripper",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        let status, load=[], load_res=[], msg_status = [], log_control=[],  res_status, stop_time;\n        for (let i = 1; i <= 4; i++) {\n            if (tracking['dripper_' + i] == \"ON\") {\n                load_res.push(response['dripper_' + i]);\n            }\n            load.push('dripper_' + i);\n            log_control.push(response['dripper_' + i]);\n        }\n        if (load_res.filter(function (value) { return value == 'ON'; }).length > 0) {\n            res_status = 'ON';\n        } else {\n            res_status = 'OFF';\n        }\n\n        if (tracking.status_1 == 0) {\n            status = 'OFF';\n        } else {\n            if (control_v == \"2\"){ // V อ.อร\n                stop_time = '16:00:00'\n            }else{\n                stop_time = '18:00:00'\n            }\n            if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00'){\n                status = 'OFF';\n            }else{\n                if (parseFloat(data_.data.soil_in) <= parseFloat(tracking.soil_min)){\n                    status = 'ON';\n                } else if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)){\n                    status = 'OFF';\n                }else{\n                    status = res_status;\n                }\n            }\n        }\n        for (let a = 1; a <= 4; a++){ // load.length;\n            if(tracking['dripper_'+a] == \"ON\"){\n                msg_status.push(status);\n            }else{\n                msg_status.push('OFF');\n            }\n        }\n        if (log_control.toString() != msg_status.toString()) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(msg_status),\n                user: tracking.user_control,\n                soil_min: tracking.soil_min,\n                soil_max: tracking.soil_max,\n                data: Number(data_.data.soil_in),\n                data2: parseFloat(data_.data.soil_in),\n                date_time:date_time,\n            };\n            // context.set('log_control', status)\n            // if(old_nowsec != nowsec){\n                // context.set('old_nowsec', nowsec);\n                return msg;\n            // }\n        }\n    }\n}\n\n// msg.payload =tracking\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 2740,
        "wires": [
            [
                "ae0dc3341993794d"
            ]
        ]
    },
    {
        "id": "abd2e9dc60609fc0",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_fan",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\n// let nsec = date_time.split(\" \")[1].split(\":\");\n// let nowsec = Number(nsec[2]);\n// let old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\n\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        let status, load = [], load_res = [], msg_status = [], log_control = [], res_status;\n        for (let i = 1; i <= 4; i++) {\n            if (tracking['fan_' + i] == \"ON\") {\n                load_res.push(response['fan_' + i]);\n            }\n            load.push('fan_' + i);\n            log_control.push(response['fan_' + i]);\n        }\n        if (tracking.status_3 == 0) {\n            status = 'OFF';\n        } else {\n            if (load_res.filter(function (value) { return value == 'ON'; }).length > 0) {\n                res_status = 'ON';\n            } else {\n                res_status = 'OFF';\n            }\n\n            if (control_v == \"2\") { // V อ.อร\n                if (date_time.split(\" \")[1] > '16:00:00' || date_time.split(\" \")[1] < '07:00:00') {\n                    status = 'OFF';\n                } else {\n                    if (parseFloat(data_.data.temp_in) <= parseFloat(tracking.temp_min)) {\n                        status = 'OFF';\n                    } else if (parseFloat(data_.data.temp_in) >= parseFloat(tracking.temp_max)) {\n                        status = 'ON';\n                    } else {\n                        status = res_status;\n                    }\n                }\n            } else {\n                if (parseFloat(data_.data.temp_in) <= parseFloat(tracking.temp_min)) {\n                    status = 'OFF';\n                } else if (parseFloat(data_.data.temp_in) >= parseFloat(tracking.temp_max)) {\n                    status = 'ON';\n                } else {\n                    status = res_status;\n                }\n            }\n        }\n        for (let a = 1; a <= 4; a++){ // load.length;\n            if(tracking['fan_'+a] == \"ON\"){\n                msg_status.push(status);\n            }else{\n                msg_status.push('OFF');\n            }\n        }\n        if (log_control.toString() != msg_status.toString()) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(msg_status),\n                user: tracking.user_control,\n                temp_min: tracking.temp_min,\n                temp_max: tracking.temp_max,\n                data: Number(data_.data.temp_in),\n            };\n            // context.set('log_control', status)\n            // if(old_nowsec != nowsec){\n                // context.set('old_nowsec', nowsec);\n                return msg;\n            // }\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 2860,
        "wires": [
            [
                "ae0dc3341993794d"
            ]
        ]
    },
    {
        "id": "f62eab3d4ddcef1d",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_slan",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\n\nlet log_control = response['shading']; //context.get('log_control') || 'No';\nlet status = [], load = [], load_res = [], msg_status = [], a;\n\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n    a = 1\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"shading\");\n\n        if (control_v == \"2\") { // V อ.อร\n            if (tracking.status_3 == 0) { // ปิดโหมด Temp\n                status.push(status_slan('t<m'));\n                a = 3\n            } else { // เปิดโหมด Temp\n                if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                    status.push(status_slan('t<m'));\n                    a = 4\n                } else { // temp > max\n                    // จับเวลา Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(45)); //45\n                        context.set('tracking', tracking);\n                    } else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(45)); //45\n                        }\n                    }\n                    // ------------------------------------\n\n                    if (date_time.split(\" \")[1] >= '12:00:00' && date_time.split(\" \")[1] < '16:00:00') {\n                        // 12:00 - 16:00\n                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) { //<=\n                            // timw ปัจจุบัน <= time_fan\n                            status.push(status_slan('t>m'));\n                            a = 7\n                        } else {\n                            status.push('ON');\n                            a = 8\n                        }\n                    } else {\n                        // นอกช่วงเวลา 12:00 - 16:00\n                        status.push(status_slan('t>m'));\n                    }\n                }\n            }\n        } else { // No V อ.อร\n            status.push(status_slan('t<m'));\n        }\n        if (log_control != status[0]) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(status),\n                user: tracking.user_control,\n                light_min: tracking.light_min,\n                light_max: tracking.light_max,\n                ss: log_control,\n                s2: tracking.status_4\n            };\n            // context.set('log_control', status)\n\n            // if(old_nowsec != nowsec){\n            //     context.set('old_nowsec', nowsec);\n            return msg;\n            // }\n        }\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n    }\n}\n\nfunction status_slan(val) {\n    if (val == 't<m') {\n        context.set('time_fan', \"\");\n    }\n    let s_slan, n_data, stop_time;\n\n    if (tracking.status_4 == 0) { // ปิดโหมด Slan\n        s_slan = \"OFF\";\n    } else { // เปิดโหมด Slan\n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            s_slan = \"OFF\";\n        } else {\n            // if (parseFloat(tracking.light_in_mode) == 5) {\n            //     n_data = parseFloat(data_.data.light_in) / 54;\n            // } else {\n            n_data = parseFloat(data_.data.light_in) / 1000;\n            // }\n\n            if (parseFloat(n_data) <= parseFloat(tracking.light_min)) {\n                s_slan = \"OFF\"; // เปิดม่าน\n            } else if (parseFloat(n_data) >= parseFloat(tracking.light_max)) {\n                s_slan = \"ON\"; // ปิดม่าน\n            } else {\n                s_slan = log_control;\n            }\n        }\n    }\n    return s_slan;\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 2900,
        "wires": [
            [
                "ae0dc3341993794d"
            ]
        ]
    },
    {
        "id": "08f6d40e76d710c3",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_Foggy",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nlet log_control = response['foggy_1'];\nlet status = [], load = [], stop_time // load_res = [], msg_status = [], a;\nlet submode_, num_\n\n// msg.payload = tracking.status_2\n// return msg\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"foggy_1\");\n\n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            // กรณีนอกเวลา\n            status.push('OFF')\n            submode_ = 'out of time H&T';\n            num_ = 1;\n        } else {\n            if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                let ress = load_modeHum('t<m')\n                status.push(ress[0]);\n                num_ = 't < max ' + ress[1];\n            }\n            else { // temp > max\n                if (tracking.status_3 == 0) {\n                    let ress = load_modeHum('t>m')\n                    status.push(ress[0]);\n                    num_ = 't = off ' + ress[1];\n                }\n                else { // ON Mode Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(15)); //15\n                        context.set('tracking', tracking);\n                    }\n                    else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(15)); //15\n                        }\n                    }\n                    if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) {\n                        // time <= time_fan\n                        let ress = load_modeHum('t>m')\n                        status.push(ress[0]);\n                        num_ = 't <= 15m ' + ress[1] + ' t= ' + context.get('time_fan');\n                    } else { // หลัง 15 นาที\n                        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n                            status.push('OFF');\n                            num_ = 't > 15m | soil > m';\n                            context.set('timeON_foggy', \"\");\n                            context.set('timeOFF_foggy', \"\");\n                        }\n                        else { // Soil < Max\n                            if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max2)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | soil < m | hum >= config';\n                                context.set('timeON_foggy', \"\");\n                                context.set('timeOFF_foggy', \"\");\n                            } else { // hum < config\n                                if (context.get('timeON_foggy') == \"\" && context.get('timeOFF_foggy') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_foggy', add_time(13)); // 13\n                                        num_ = 't > 15m | soil < m | hum < config จะ on เวลา ' + add_time(13);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_foggy', add_time(2));\n                                        num_ = 't > 15m | soil < m | hum < config จะ off เวลา ' + add_time(2);\n                                    }\n                                }\n                                else {\n                                    // timeON_foggy != '' || timeOFF_foggy != ''\n                                    if (context.get('timeON_foggy') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_foggy'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_foggy', add_time(2)); // 2\n                                                context.set('timeON_foggy', \"\");\n                                                num_ = 't > 15m | soil < m | hum < config จะ off เวลา ' + add_time(2);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeON_foggy'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_foggy') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_foggy'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_foggy', \"\");\n                                                context.set('timeON_foggy', add_time(13)); // 13\n                                                num_ = 't > 15m | soil < m | hum < config จะ on เวลา ' + add_time(13);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n\n\n        let payload = {\n            'sn': data_.serial_id,\n            'mode': 'Tracking',\n            'load': JSON.stringify(load),\n            'status': JSON.stringify(status),\n            'user': tracking.user_control,\n            'soil_max': tracking.soil_max,\n            'data_soil': Number(data_.data.soil_in),\n            'hum_min': tracking.hum_min,\n            'hum_max': tracking.hum_max,\n            'hum_max2': tracking.hum_max2,\n            'data_hum': Number(data_.data.hum_in),\n            time_fan: context.get('time_fan'),\n            nt: add_time(0),\n            ONfoggy: context.get('timeON_foggy'),\n            OFFfoggy: context.get('timeOFF_foggy'),\n            // ONspray: context.get('timeON_spray'),\n            // OFFspray: context.get('timeOFF_spray'),\n            // load_resp: load_resp,\n            // submode: submode_,\n            num_: num_,\n            // z_1: load_resp.toString(),\n            // z_2: status.toString(),\n            s: (new Date(ndate + ' ' + add_time(0))).getTime() / 1000,\n            xx: (new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000,\n            zzz: context.get('status_log')\n        };\n        msg.payload = payload\n        if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n            if (log_control != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }else{\n            if (context.get('status_log') != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }\n\n\n\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n            context.set('timeON_foggy', \"\");\n            context.set('timeOFF_foggy', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n        context.set('timeON_foggy', \"\");\n        context.set('timeOFF_foggy', \"\");\n    }\n}\nfunction load_modeHum(val) {\n    if (val == 't<m') {\n        context.set('time_fan', \"\");\n    }\n    context.set('timeON_foggy', \"\");\n    context.set('timeOFF_foggy', \"\");\n    if (tracking.status_2 == 0) {\n        return ['OFF', 'h_0'];\n    }\n    else {\n        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n            return ['OFF', 'h_1'];\n        }\n        else { // Soil < soil_max\n            if (parseFloat(data_.data.hum_in) <= parseFloat(tracking.hum_min)) {\n                return ['ON', 'h_2'];\n            } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max2)) {\n                return ['OFF', 'h_3'];\n            } else {\n                return [log_control, 'h_4'];\n            }\n        }\n    }\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 2780,
        "wires": [
            [
                "ae0dc3341993794d"
            ]
        ]
    },
    {
        "id": "c894f2bc6b7d232b",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_Spray",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nlet log_control = response['spray'];\nlet status = [], load = [], stop_time \nlet submode_, num_\n\n// msg.payload = tracking.status_2\n// return msg\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"spray\");\n\n        if (context.get('log_foggy') == undefined || context.get('log_foggy') == '') {\n            context.set('log_foggy', response['foggy_1']);\n        }\n                \n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            // กรณีนอกเวลา\n            status.push('OFF')\n            submode_ = 'out of time H&T';\n            num_ = 1;\n        } else {\n            if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                let ress = load_modeHum('t<m')\n                status.push(ress[0]);\n                num_ = 't < max ' + ress[1];\n            } \n            else { // temp > max\n                if (tracking.status_3 == 0) {\n                    let ress = load_modeHum('t>m')\n                    status.push(ress[0]);\n                    num_ = 't = off ' + ress[1];\n                }\n                else{ // ON Mode Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(15)); //15\n                        context.set('tracking', tracking);\n                    }\n                    else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(15)); //15\n                        }\n                    }\n                    if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) {\n                        // time <= time_fan\n                        let ress = load_modeHum('t>m')\n                        status.push(ress[0]);\n                        num_ = 't <= 15m ' + ress[1] + ' t= ' + context.get('time_fan');\n                    } else { // หลัง 15 นาที\n                        // ------------------------------------\n                        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n                            if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum >= max';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                                context.set('log_foggy', 'OFF')\n                            } else { // hum < config\n                                if (context.get('timeON_spray') == \"\" && context.get('timeOFF_spray') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                    }\n                                }\n                                else {\n                                    // timeON_spray != '' || timeOFF_spray != ''\n                                    if (context.get('timeON_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_spray', add_time(5)); // 5\n                                                context.set('timeON_spray', \"\");\n                                                num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | hum >= config | time <= timeON_spray'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_spray', \"\");\n                                                context.set('timeON_spray', add_time(5)); // 5\n                                                num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }else{\n                            // soil < soil_Max\n                            if (parseFloat(data_.data.hum_in) < parseFloat(tracking.hum_max2)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum < config';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                            } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum >= max';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                                context.set('log_foggy', 'OFF')\n                            } else { // hum < config\n                                if (context.get('timeON_spray') == \"\" && context.get('timeOFF_spray') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                    }\n                                }\n                                else {\n                                    // timeON_spray != '' || timeOFF_spray != ''\n                                    if (context.get('timeON_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_spray', add_time(5)); // 5\n                                                context.set('timeON_spray', \"\");\n                                                num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | hum >= config | time <= timeON_spray'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_spray', \"\");\n                                                context.set('timeON_spray', add_time(5)); // 5\n                                                num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }\n                        // ==================================\n                    }\n                }\n            }\n        }\n       \n        let payload = {\n            'sn': data_.serial_id,\n            'mode': 'Tracking',\n            'load': JSON.stringify(load),\n            'status': JSON.stringify(status),\n            'user': tracking.user_control,\n            'soil_max': tracking.soil_max,\n            'data_soil': Number(data_.data.soil_in),\n            'hum_min': tracking.hum_min,\n            'hum_max': tracking.hum_max,\n            'hum_max2': tracking.hum_max2,\n            'data_hum': Number(data_.data.hum_in),\n            time_fan: context.get('time_fan'),\n            nt: add_time(0),\n            // ONfoggy: context.get('timeON_foggy'),\n            // OFFfoggy: context.get('timeOFF_foggy'),\n            ONspray: context.get('timeON_spray'),\n            OFFspray: context.get('timeOFF_spray'),\n            // load_resp: load_resp,\n            // submode: submode_,\n            num_: num_,\n            // z_1: load_resp.toString(),\n            // z_2: status.toString(),\n            s: (new Date(ndate + ' ' + add_time(0))).getTime() / 1000,\n            xx: (new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000,\n            zzz: context.get('status_log'),\n            log_foggy: context.get('log_foggy')\n        };\n        msg.payload = payload\n        if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n            if (log_control != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }else{\n            if (context.get('status_log') != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n            context.set('timeON_spray', \"\");\n            context.set('timeOFF_spray', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n        context.set('timeON_spray', \"\");\n        context.set('timeOFF_spray', \"\");\n    }\n}\nfunction load_modeHum(val) {\n    if(val == 't<m'){\n        context.set('time_fan', \"\");\n    }\n    context.set('timeON_spray', \"\");\n    context.set('timeOFF_spray', \"\");\n    if (tracking.status_2 == 0) {\n        return ['OFF', 'h_0'];\n    }\n    else {\n        if (parseFloat(data_.data.hum_in) < parseFloat(tracking.hum_max2)) {\n            if (parseFloat(data_.data.hum_in) <= parseFloat(tracking.hum_min)) {\n                context.set('log_foggy', 'ON')\n            }\n            return ['OFF', 'h_1'];\n        } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n            context.set('log_foggy', 'OFF')\n            return ['OFF', 'h_2'];\n        } else { // hum >= config && < max\n            if (context.get('log_foggy') == 'ON') {\n                return ['ON', 'h_3'];\n            } else {\n                return ['OFF', 'h_4'];\n            }\n        }\n    }\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 2820,
        "wires": [
            [
                "ae0dc3341993794d"
            ]
        ]
    },
    {
        "id": "e444fcbfaf0be1c4",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "connect/status/TUSMT004",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1379.0000038146973,
        "y": 2699.000005722046,
        "wires": [
            [
                "6513b0faae6d9f3f"
            ]
        ]
    },
    {
        "id": "6513b0faae6d9f3f",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "msg.payload = msg.payload;\nmsg.topic = \"get_status\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 2699.000005722046,
        "wires": [
            [
                "a6a530cefe4a4adf"
            ]
        ]
    },
    {
        "id": "a6a530cefe4a4adf",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "send_load_to_mqtt",
        "func": "if (msg.topic === \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic === \"get_data\") {\n    context.set('get_data', msg.payload);\n}\nlet get_status = context.get('get_status') || 0;\nlet get_data = context.get('get_data') || 0;\nif (get_status == 0 || get_status === 'offline') {\n    return false;\n}\nif (get_data == 0) {\n    return false;\n}\n\n\n// let get_data = msg.payload;\nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/mqtt_load_auto.php\";\nmsg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\nmsg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\nmsg.payload = {\n    sn: get_data.sn,\n    mode: get_data.mode,\n    load: get_data.load,\n    status: get_data.status,\n    user: get_data.user\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 2700,
        "wires": [
            [
                "223acb194f6eb886"
            ]
        ]
    },
    {
        "id": "d22b6d3f6a4a47b2",
        "type": "inject",
        "z": "96f306faac18dafe",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1430,
        "y": 3820,
        "wires": [
            [
                "5a5850a97f738ce8"
            ]
        ]
    },
    {
        "id": "5a5850a97f738ce8",
        "type": "moment",
        "z": "96f306faac18dafe",
        "name": "timmer",
        "topic": "timer",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "minutes",
        "adjDir": "subtract",
        "format": "HH:mm:ss",
        "locale": "th_TH",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 1590,
        "y": 3820,
        "wires": [
            [
                "d1d4a8f36ade537f"
            ]
        ]
    },
    {
        "id": "070e11bb24d2a81b",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT005/control/config/time_auto",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1360,
        "y": 3780,
        "wires": [
            [
                "3b26fd54e0866710"
            ]
        ]
    },
    {
        "id": "93235c3933f1f689",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT005/control/loads/mode",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1359.0000038146973,
        "y": 3499.000005722046,
        "wires": [
            [
                "135f552f42fe5df9"
            ]
        ]
    },
    {
        "id": "135f552f42fe5df9",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"get_mode\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 3499.000005722046,
        "wires": [
            [
                "19f2ecf254c0607a"
            ]
        ]
    },
    {
        "id": "3b26fd54e0866710",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "// var result = JSON.parse(msg.payload);\n\nmsg.payload = msg.payload;\nmsg.topic = \"get_timeAuto\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 3780,
        "wires": [
            [
                "d1d4a8f36ade537f"
            ]
        ]
    },
    {
        "id": "5119d7ddfc9f1668",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT005/control/set_config",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 1369.0000038146973,
        "y": 3459.000005722046,
        "wires": [
            [
                "1969ba82cf4bd560"
            ]
        ]
    },
    {
        "id": "1969ba82cf4bd560",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"set_config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 3459.000005722046,
        "wires": [
            [
                "19f2ecf254c0607a",
                "d1d4a8f36ade537f",
                "c6b8614eaace54b5"
            ]
        ]
    },
    {
        "id": "d1d4a8f36ade537f",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Timer",
        "func": "if (msg.topic === \"timer\"){\n    context.set('timer',msg.timer);\n}\nif (msg.topic === \"set_config\"){\n    context.set('set_config',msg.payload);\n}\nif (msg.topic === \"get_timeAuto\"){\n    context.set('get_timeAuto',msg.payload);\n}\nif (msg.topic === \"response\"){\n    context.set('response',msg.payload);\n}\n\nlet get_timer = context.get('timer') || 0;\nlet set_config = context.get('set_config') || 0;\nlet get_timeAuto = context.get('get_timeAuto') || 0;\nlet response = context.get('response') || 0;\nif (get_timer == 0) {\n    return false;\n}\nif (set_config == 0) {\n    return false;\n}\nif (get_timeAuto == 0) {\n    return false;\n}\nif (response == 0) {\n    return false;\n}\nif (response.mode === 'Auto'){\n    if (set_config.sub_mode.sub_mode === 'Timer') {\n        msg.payload = {\n                time :  get_timer,\n                set_config: set_config,\n                time_auto : get_timeAuto,\n                response: response\n            };\n        // msg.topic = 'config';\n        return msg;\n    }\n}\n// else{\n//     msg.payload = set_config.sub_mode.sub_mode\n//     return msg\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1759.0000038146973,
        "y": 3779.000005722046,
        "wires": [
            [
                "d2dc2d2dc086982f",
                "96c25405735ff73c",
                "6d7f237400ad4db4",
                "b2d234f0325d9a48",
                "3f708b43a1316001",
                "45124e0c1e2e355d",
                "18754a5f7d5cfbd8",
                "f978a17c9dcc8c62",
                "92ab1b6202d1221e",
                "63ce06cd8862df69",
                "4fb64ff33d9d358f",
                "6dc3540bbdbfb405"
            ]
        ]
    },
    {
        "id": "19f2ecf254c0607a",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Mode",
        "func": "if (msg.topic == \"get_mode\") {\n    context.set('get_mode', msg.payload);\n}\nif (msg.topic == \"set_config\") {\n    context.set('get_submode', msg.payload);\n}\n\nvar get_mode = context.get('get_mode') || 0;\nvar get_submode = context.get('get_submode') || 0;\nvar log_control = context.get('log_control') || 'No';\n\nif (get_mode == 0) {\n    return false;\n}\nif (get_submode == 0) {\n    return false;\n}\nif (log_control === 'No') {\n    context.set('log_control', get_mode)\n}else{\n    if (get_mode !== log_control){\n        // msg.headers = {};\n        // msg.method = \"POST\";\n        // msg.url = \"http://localhost/smartfarm/server/insert_data/tu/mode.php\";\n        // msg.payload = {\n        //     output: get_mode,\n        //     get_: get_submode.sub_mode.sn\n        // }\n        // msg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n        // msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n        get_submode['mode'] = get_mode;\n        msg.payload = get_submode;\n        context.set('log_control', get_mode);\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 3500,
        "wires": [
            [
                "1747e54619df77d3"
            ]
        ]
    },
    {
        "id": "1747e54619df77d3",
        "type": "mqtt out",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT005/control/set_config",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 2510,
        "y": 3500,
        "wires": []
    },
    {
        "id": "f978a17c9dcc8c62",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 4",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_8;\nlet user = set_config.config_timeSet.load_8.user_control;\nlet load = 'fan_4';\nlet log_control = res.response.fan_4;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 4060,
        "wires": [
            [
                "994ad648963bb3a2"
            ]
        ]
    },
    {
        "id": "63ce06cd8862df69",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Foggy 2",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_10;\nlet user, load = 'foggy_2';\nlet log_control = res.response.foggy_2;\nif (sub_mode.sub_mode_10 === 'Time_set') {\n    user = set_config.config_timeSet.load_10.user_control;\n} else {\n    user = set_config.config_timeLoop.load_10.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 4140,
        "wires": [
            [
                "994ad648963bb3a2"
            ]
        ]
    },
    {
        "id": "4fb64ff33d9d358f",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Spray",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_11;\nlet user, load = 'spray';\nlet log_control = res.response.spray;\nif (sub_mode.sub_mode_11 === 'Time_set') {\n    user = set_config.config_timeSet.load_11.user_control;\n} else {\n    user = set_config.config_timeLoop.load_11.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 4180,
        "wires": [
            [
                "994ad648963bb3a2"
            ]
        ]
    },
    {
        "id": "6dc3540bbdbfb405",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Shading",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_12;\nlet user = set_config.config_timeSet.load_12.user_control;\nlet load = 'shading';\nlet log_control = res.response.shading; //context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto'){\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user,\n                log_control:log_control\n            };\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 4220,
        "wires": [
            [
                "994ad648963bb3a2"
            ]
        ]
    },
    {
        "id": "43d013ebc1013dae",
        "type": "http request",
        "z": "96f306faac18dafe",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2470,
        "y": 3580,
        "wires": [
            [
                "37d1dbc7d72f0f02"
            ]
        ]
    },
    {
        "id": "37d1dbc7d72f0f02",
        "type": "debug",
        "z": "96f306faac18dafe",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2470,
        "y": 3620,
        "wires": []
    },
    {
        "id": "18754a5f7d5cfbd8",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 3",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_7;\nlet user = set_config.config_timeSet.load_7.user_control;\nlet load = 'fan_3';\nlet log_control = res.response.fan_3;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 4020,
        "wires": [
            [
                "994ad648963bb3a2"
            ]
        ]
    },
    {
        "id": "3f708b43a1316001",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 1",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_5;\nlet user = set_config.config_timeSet.load_5.user_control;\nlet load = 'fan_1';\nlet log_control = res.response.fan_1;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto'){\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 3940,
        "wires": [
            [
                "994ad648963bb3a2"
            ]
        ]
    },
    {
        "id": "45124e0c1e2e355d",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 2",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_6;\nlet user = set_config.config_timeSet.load_6.user_control;\nlet load = 'fan_2';\nlet log_control = res.response.fan_2;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2010,
        "y": 3980,
        "wires": [
            [
                "994ad648963bb3a2"
            ]
        ]
    },
    {
        "id": "b2d234f0325d9a48",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 4",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_4;\nlet user, load = 'dripper_4';\nlet log_control = res.response.dripper_4;\nif (sub_mode.sub_mode_4 === 'Time_set') {\n    user = set_config.config_timeSet.load_4.user_control;\n} else {\n    user = set_config.config_timeLoop.load_4.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 3900,
        "wires": [
            [
                "994ad648963bb3a2"
            ]
        ]
    },
    {
        "id": "6d7f237400ad4db4",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 3",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_3;\nlet user, load = 'dripper_3';\nlet log_control = res.response.dripper_3;\nif (sub_mode.sub_mode_3 === 'Time_set') {\n    user = set_config.config_timeSet.load_3.user_control;\n} else {\n    user = set_config.config_timeLoop.load_3.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 3860,
        "wires": [
            [
                "994ad648963bb3a2"
            ]
        ]
    },
    {
        "id": "96c25405735ff73c",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 2",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_2;\nlet user, load = 'dripper_2';\nlet log_control = res.response.dripper_2;\nif (sub_mode.sub_mode_2 === 'Time_set') {\n    user = set_config.config_timeSet.load_2.user_control;\n} else {\n    user = set_config.config_timeLoop.load_2.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 3820,
        "wires": [
            [
                "994ad648963bb3a2"
            ]
        ]
    },
    {
        "id": "d2dc2d2dc086982f",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 1",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_1;\nlet user, load = 'dripper_1';\nlet log_control = res.response.dripper_1;\nif (sub_mode.sub_mode_1 === 'Time_set') {\n    user = set_config.config_timeSet.load_1.user_control;\n} else {\n    user = set_config.config_timeLoop.load_1.user_control;\n}\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        // msg.payload = Object.keys(time_auto).length/2 \n        // msg.payload = sub_mode\n        // return msg;\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 3780,
        "wires": [
            [
                "994ad648963bb3a2"
            ]
        ]
    },
    {
        "id": "c6b8614eaace54b5",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_config",
        "func": "if (msg.topic === \"set_config\"){\n    context.set('config',msg.payload);\n}\nif (msg.topic === \"filter_raw\"){\n    context.set('filter_raw',msg.payload);\n}\nif (msg.topic === \"filter_eq\"){\n    context.set('filter_eq',msg.payload);\n}\nif (msg.topic === \"response\"){\n    context.set('response',msg.payload);\n}\n\n// var get_date_timer = context.get('timer') || 0;\nlet set_config = context.get('config') || 0;\nlet filter_raw = context.get('filter_raw') || 0;\nlet filter_eq = context.get('filter_eq') || 0;\nlet response = context.get('response') || 0;\n\nif(set_config == 0){\n    return false;\n}\nif(filter_raw == 0){\n    return false;\n}\nif(filter_eq == 0){\n    return false;\n}\nif(response == 0){\n    return false;\n}\nlet sub_mode = set_config.sub_mode;\nlet tracking = set_config.config_tracking;\nlet data_;\nif (response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Tracking') {\n        if(set_config.eq == 0){ // ไม่ผ่านสมการ\n            data_ = filter_raw;\n        }else{\n            data_ = filter_eq;\n        }\n        msg.payload = {\n            // date_time : get_date_timer,\n            tracking : tracking,\n            data_ : data_,\n            response : response,\n            eq: set_config.eq,\n            sub_mode: sub_mode.sub_mode,\n            control_v: set_config.control_V\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1789.0000038146973,
        "y": 3579.000005722046,
        "wires": [
            [
                "d1fba06f7bc54ceb"
            ]
        ]
    },
    {
        "id": "2ed6aaac5ce293f7",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT005/data_sensor/filter",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1369.0000038146973,
        "y": 3579.000005722046,
        "wires": [
            [
                "3374c08f7dc62a71"
            ]
        ]
    },
    {
        "id": "3374c08f7dc62a71",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"filter_raw\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 3579.000005722046,
        "wires": [
            [
                "c6b8614eaace54b5"
            ]
        ]
    },
    {
        "id": "caabd0d941adbd6d",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT005/data_sensor/filter_eq",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1359.0000038146973,
        "y": 3619.000005722046,
        "wires": [
            [
                "9754ec89abd4a000"
            ]
        ]
    },
    {
        "id": "9754ec89abd4a000",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"filter_eq\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 3619.000005722046,
        "wires": [
            [
                "c6b8614eaace54b5"
            ]
        ]
    },
    {
        "id": "994ad648963bb3a2",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "// var result = JSON.parse(msg.payload);\n\nmsg.payload = msg.payload;\nmsg.topic = \"get_data\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2259.0000038146973,
        "y": 3779.000005722046,
        "wires": [
            [
                "78a0edb109a6b7b2"
            ]
        ]
    },
    {
        "id": "92ab1b6202d1221e",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Foggy 1",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_9;\nlet user, load = 'foggy_1';\nlet log_control = res.response.foggy_1;\nif (sub_mode.sub_mode_9 === 'Time_set') {\n    user = set_config.config_timeSet.load_9.user_control;\n} else {\n    user = set_config.config_timeLoop.load_9.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 4100,
        "wires": [
            [
                "994ad648963bb3a2"
            ]
        ]
    },
    {
        "id": "eeddb0424afbd2e2",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT005/control/response",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1369.0000038146973,
        "y": 3659.000005722046,
        "wires": [
            [
                "61add4a6f33c7e27"
            ]
        ]
    },
    {
        "id": "61add4a6f33c7e27",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"response\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 3659.000005722046,
        "wires": [
            [
                "c6b8614eaace54b5",
                "d1d4a8f36ade537f"
            ]
        ]
    },
    {
        "id": "d1fba06f7bc54ceb",
        "type": "moment",
        "z": "96f306faac18dafe",
        "name": "timer",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "months",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "th_TH",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 1839.0000038146973,
        "y": 3659.000005722046,
        "wires": [
            [
                "8714937bac054ec7",
                "072c1d07d28065ff",
                "ef2a18266c3608ed",
                "83202a366cd4f71f",
                "7d0c1d5256b40183"
            ]
        ]
    },
    {
        "id": "8714937bac054ec7",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_dripper",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        let status, load=[], load_res=[], msg_status = [], log_control=[],  res_status, stop_time;\n        for (let i = 1; i <= 4; i++) {\n            if (tracking['dripper_' + i] == \"ON\") {\n                load_res.push(response['dripper_' + i]);\n            }\n            load.push('dripper_' + i);\n            log_control.push(response['dripper_' + i]);\n        }\n        if (load_res.filter(function (value) { return value == 'ON'; }).length > 0) {\n            res_status = 'ON';\n        } else {\n            res_status = 'OFF';\n        }\n\n        if (tracking.status_1 == 0) {\n            status = 'OFF';\n        } else {\n            if (control_v == \"2\"){ // V อ.อร\n                stop_time = '16:00:00'\n            }else{\n                stop_time = '18:00:00'\n            }\n            if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00'){\n                status = 'OFF';\n            }else{\n                if (parseFloat(data_.data.soil_in) <= parseFloat(tracking.soil_min)){\n                    status = 'ON';\n                } else if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)){\n                    status = 'OFF';\n                }else{\n                    status = res_status;\n                }\n            }\n        }\n        for (let a = 1; a <= 4; a++){ // load.length;\n            if(tracking['dripper_'+a] == \"ON\"){\n                msg_status.push(status);\n            }else{\n                msg_status.push('OFF');\n            }\n        }\n        if (log_control.toString() != msg_status.toString()) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(msg_status),\n                user: tracking.user_control,\n                soil_min: tracking.soil_min,\n                soil_max: tracking.soil_max,\n                data: Number(data_.data.soil_in),\n                data2: parseFloat(data_.data.soil_in),\n                date_time:date_time,\n            };\n            // context.set('log_control', status)\n            // if(old_nowsec != nowsec){\n                // context.set('old_nowsec', nowsec);\n                return msg;\n            // }\n        }\n    }\n}\n\n// msg.payload =tracking\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2050,
        "y": 3580,
        "wires": [
            [
                "994ad648963bb3a2"
            ]
        ]
    },
    {
        "id": "ef2a18266c3608ed",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_fan",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\n// let nsec = date_time.split(\" \")[1].split(\":\");\n// let nowsec = Number(nsec[2]);\n// let old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\n\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        let status, load = [], load_res = [], msg_status = [], log_control = [], res_status;\n        for (let i = 1; i <= 4; i++) {\n            if (tracking['fan_' + i] == \"ON\") {\n                load_res.push(response['fan_' + i]);\n            }\n            load.push('fan_' + i);\n            log_control.push(response['fan_' + i]);\n        }\n        if (tracking.status_3 == 0) {\n            status = 'OFF';\n        } else {\n            if (load_res.filter(function (value) { return value == 'ON'; }).length > 0) {\n                res_status = 'ON';\n            } else {\n                res_status = 'OFF';\n            }\n\n            if (control_v == \"2\") { // V อ.อร\n                if (date_time.split(\" \")[1] > '16:00:00' || date_time.split(\" \")[1] < '07:00:00') {\n                    status = 'OFF';\n                } else {\n                    if (parseFloat(data_.data.temp_in) <= parseFloat(tracking.temp_min)) {\n                        status = 'OFF';\n                    } else if (parseFloat(data_.data.temp_in) >= parseFloat(tracking.temp_max)) {\n                        status = 'ON';\n                    } else {\n                        status = res_status;\n                    }\n                }\n            } else {\n                if (parseFloat(data_.data.temp_in) <= parseFloat(tracking.temp_min)) {\n                    status = 'OFF';\n                } else if (parseFloat(data_.data.temp_in) >= parseFloat(tracking.temp_max)) {\n                    status = 'ON';\n                } else {\n                    status = res_status;\n                }\n            }\n        }\n        for (let a = 1; a <= 4; a++){ // load.length;\n            if(tracking['fan_'+a] == \"ON\"){\n                msg_status.push(status);\n            }else{\n                msg_status.push('OFF');\n            }\n        }\n        if (log_control.toString() != msg_status.toString()) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(msg_status),\n                user: tracking.user_control,\n                temp_min: tracking.temp_min,\n                temp_max: tracking.temp_max,\n                data: Number(data_.data.temp_in),\n            };\n            // context.set('log_control', status)\n            // if(old_nowsec != nowsec){\n                // context.set('old_nowsec', nowsec);\n                return msg;\n            // }\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 3700,
        "wires": [
            [
                "994ad648963bb3a2"
            ]
        ]
    },
    {
        "id": "072c1d07d28065ff",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_slan",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\n\nlet log_control = response['shading']; //context.get('log_control') || 'No';\nlet status = [], load = [], load_res = [], msg_status = [], a;\n\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n    a = 1\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"shading\");\n\n        if (control_v == \"2\") { // V อ.อร\n            if (tracking.status_3 == 0) { // ปิดโหมด Temp\n                status.push(status_slan('t<m'));\n                a = 3\n            } else { // เปิดโหมด Temp\n                if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                    status.push(status_slan('t<m'));\n                    a = 4\n                } else { // temp > max\n                    // จับเวลา Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(45)); //45\n                        context.set('tracking', tracking);\n                    } else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(45)); //45\n                        }\n                    }\n                    // ------------------------------------\n\n                    if (date_time.split(\" \")[1] >= '12:00:00' && date_time.split(\" \")[1] < '16:00:00') {\n                        // 12:00 - 16:00\n                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) { //<=\n                            // timw ปัจจุบัน <= time_fan\n                            status.push(status_slan('t>m'));\n                            a = 7\n                        } else {\n                            status.push('ON');\n                            a = 8\n                        }\n                    } else {\n                        // นอกช่วงเวลา 12:00 - 16:00\n                        status.push(status_slan('t>m'));\n                    }\n                }\n            }\n        } else { // No V อ.อร\n            status.push(status_slan('t<m'));\n        }\n        if (log_control != status[0]) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(status),\n                user: tracking.user_control,\n                light_min: tracking.light_min,\n                light_max: tracking.light_max,\n                ss: log_control,\n                s2: tracking.status_4\n            };\n            // context.set('log_control', status)\n\n            // if(old_nowsec != nowsec){\n            //     context.set('old_nowsec', nowsec);\n            return msg;\n            // }\n        }\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n    }\n}\n\nfunction status_slan(val) {\n    if (val == 't<m') {\n        context.set('time_fan', \"\");\n    }\n    let s_slan, n_data, stop_time;\n\n    if (tracking.status_4 == 0) { // ปิดโหมด Slan\n        s_slan = \"OFF\";\n    } else { // เปิดโหมด Slan\n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            s_slan = \"OFF\";\n        } else {\n            // if (parseFloat(tracking.light_in_mode) == 5) {\n            //     n_data = parseFloat(data_.data.light_in) / 54;\n            // } else {\n            n_data = parseFloat(data_.data.light_in) / 1000;\n            // }\n\n            if (parseFloat(n_data) <= parseFloat(tracking.light_min)) {\n                s_slan = \"OFF\"; // เปิดม่าน\n            } else if (parseFloat(n_data) >= parseFloat(tracking.light_max)) {\n                s_slan = \"ON\"; // ปิดม่าน\n            } else {\n                s_slan = log_control;\n            }\n        }\n    }\n    return s_slan;\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 3740,
        "wires": [
            [
                "994ad648963bb3a2"
            ]
        ]
    },
    {
        "id": "83202a366cd4f71f",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_Foggy",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nlet log_control = response['foggy_1'];\nlet status = [], load = [], stop_time // load_res = [], msg_status = [], a;\nlet submode_, num_\n\n// msg.payload = tracking.status_2\n// return msg\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"foggy_1\");\n\n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            // กรณีนอกเวลา\n            status.push('OFF')\n            submode_ = 'out of time H&T';\n            num_ = 1;\n        } else {\n            if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                let ress = load_modeHum('t<m')\n                status.push(ress[0]);\n                num_ = 't < max ' + ress[1];\n            }\n            else { // temp > max\n                if (tracking.status_3 == 0) {\n                    let ress = load_modeHum('t>m')\n                    status.push(ress[0]);\n                    num_ = 't = off ' + ress[1];\n                }\n                else { // ON Mode Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(15)); //15\n                        context.set('tracking', tracking);\n                    }\n                    else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(15)); //15\n                        }\n                    }\n                    if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) {\n                        // time <= time_fan\n                        let ress = load_modeHum('t>m')\n                        status.push(ress[0]);\n                        num_ = 't <= 15m ' + ress[1] + ' t= ' + context.get('time_fan');\n                    } else { // หลัง 15 นาที\n                        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n                            status.push('OFF');\n                            num_ = 't > 15m | soil > m';\n                            context.set('timeON_foggy', \"\");\n                            context.set('timeOFF_foggy', \"\");\n                        }\n                        else { // Soil < Max\n                            if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max2)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | soil < m | hum >= config';\n                                context.set('timeON_foggy', \"\");\n                                context.set('timeOFF_foggy', \"\");\n                            } else { // hum < config\n                                if (context.get('timeON_foggy') == \"\" && context.get('timeOFF_foggy') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_foggy', add_time(13)); // 13\n                                        num_ = 't > 15m | soil < m | hum < config จะ on เวลา ' + add_time(13);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_foggy', add_time(2));\n                                        num_ = 't > 15m | soil < m | hum < config จะ off เวลา ' + add_time(2);\n                                    }\n                                }\n                                else {\n                                    // timeON_foggy != '' || timeOFF_foggy != ''\n                                    if (context.get('timeON_foggy') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_foggy'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_foggy', add_time(2)); // 2\n                                                context.set('timeON_foggy', \"\");\n                                                num_ = 't > 15m | soil < m | hum < config จะ off เวลา ' + add_time(2);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeON_foggy'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_foggy') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_foggy'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_foggy', \"\");\n                                                context.set('timeON_foggy', add_time(13)); // 13\n                                                num_ = 't > 15m | soil < m | hum < config จะ on เวลา ' + add_time(13);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n\n\n        let payload = {\n            'sn': data_.serial_id,\n            'mode': 'Tracking',\n            'load': JSON.stringify(load),\n            'status': JSON.stringify(status),\n            'user': tracking.user_control,\n            'soil_max': tracking.soil_max,\n            'data_soil': Number(data_.data.soil_in),\n            'hum_min': tracking.hum_min,\n            'hum_max': tracking.hum_max,\n            'hum_max2': tracking.hum_max2,\n            'data_hum': Number(data_.data.hum_in),\n            time_fan: context.get('time_fan'),\n            nt: add_time(0),\n            ONfoggy: context.get('timeON_foggy'),\n            OFFfoggy: context.get('timeOFF_foggy'),\n            // ONspray: context.get('timeON_spray'),\n            // OFFspray: context.get('timeOFF_spray'),\n            // load_resp: load_resp,\n            // submode: submode_,\n            num_: num_,\n            // z_1: load_resp.toString(),\n            // z_2: status.toString(),\n            s: (new Date(ndate + ' ' + add_time(0))).getTime() / 1000,\n            xx: (new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000,\n            zzz: context.get('status_log')\n        };\n        msg.payload = payload\n        if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n            if (log_control != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }else{\n            if (context.get('status_log') != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }\n\n\n\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n            context.set('timeON_foggy', \"\");\n            context.set('timeOFF_foggy', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n        context.set('timeON_foggy', \"\");\n        context.set('timeOFF_foggy', \"\");\n    }\n}\nfunction load_modeHum(val) {\n    if (val == 't<m') {\n        context.set('time_fan', \"\");\n    }\n    context.set('timeON_foggy', \"\");\n    context.set('timeOFF_foggy', \"\");\n    if (tracking.status_2 == 0) {\n        return ['OFF', 'h_0'];\n    }\n    else {\n        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n            return ['OFF', 'h_1'];\n        }\n        else { // Soil < soil_max\n            if (parseFloat(data_.data.hum_in) <= parseFloat(tracking.hum_min)) {\n                return ['ON', 'h_2'];\n            } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max2)) {\n                return ['OFF', 'h_3'];\n            } else {\n                return [log_control, 'h_4'];\n            }\n        }\n    }\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 3620,
        "wires": [
            [
                "994ad648963bb3a2"
            ]
        ]
    },
    {
        "id": "7d0c1d5256b40183",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_Spray",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nlet log_control = response['spray'];\nlet status = [], load = [], stop_time \nlet submode_, num_\n\n// msg.payload = tracking.status_2\n// return msg\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"spray\");\n\n        if (context.get('log_foggy') == undefined || context.get('log_foggy') == '') {\n            context.set('log_foggy', response['foggy_1']);\n        }\n                \n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            // กรณีนอกเวลา\n            status.push('OFF')\n            submode_ = 'out of time H&T';\n            num_ = 1;\n        } else {\n            if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                let ress = load_modeHum('t<m')\n                status.push(ress[0]);\n                num_ = 't < max ' + ress[1];\n            } \n            else { // temp > max\n                if (tracking.status_3 == 0) {\n                    let ress = load_modeHum('t>m')\n                    status.push(ress[0]);\n                    num_ = 't = off ' + ress[1];\n                }\n                else{ // ON Mode Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(15)); //15\n                        context.set('tracking', tracking);\n                    }\n                    else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(15)); //15\n                        }\n                    }\n                    if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) {\n                        // time <= time_fan\n                        let ress = load_modeHum('t>m')\n                        status.push(ress[0]);\n                        num_ = 't <= 15m ' + ress[1] + ' t= ' + context.get('time_fan');\n                    } else { // หลัง 15 นาที\n                        // ------------------------------------\n                        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n                            if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum >= max';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                                context.set('log_foggy', 'OFF')\n                            } else { // hum < config\n                                if (context.get('timeON_spray') == \"\" && context.get('timeOFF_spray') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                    }\n                                }\n                                else {\n                                    // timeON_spray != '' || timeOFF_spray != ''\n                                    if (context.get('timeON_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_spray', add_time(5)); // 5\n                                                context.set('timeON_spray', \"\");\n                                                num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | hum >= config | time <= timeON_spray'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_spray', \"\");\n                                                context.set('timeON_spray', add_time(5)); // 5\n                                                num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }else{\n                            // soil < soil_Max\n                            if (parseFloat(data_.data.hum_in) < parseFloat(tracking.hum_max2)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum < config';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                            } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum >= max';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                                context.set('log_foggy', 'OFF')\n                            } else { // hum < config\n                                if (context.get('timeON_spray') == \"\" && context.get('timeOFF_spray') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                    }\n                                }\n                                else {\n                                    // timeON_spray != '' || timeOFF_spray != ''\n                                    if (context.get('timeON_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_spray', add_time(5)); // 5\n                                                context.set('timeON_spray', \"\");\n                                                num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | hum >= config | time <= timeON_spray'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_spray', \"\");\n                                                context.set('timeON_spray', add_time(5)); // 5\n                                                num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }\n                        // ==================================\n                    }\n                }\n            }\n        }\n       \n        let payload = {\n            'sn': data_.serial_id,\n            'mode': 'Tracking',\n            'load': JSON.stringify(load),\n            'status': JSON.stringify(status),\n            'user': tracking.user_control,\n            'soil_max': tracking.soil_max,\n            'data_soil': Number(data_.data.soil_in),\n            'hum_min': tracking.hum_min,\n            'hum_max': tracking.hum_max,\n            'hum_max2': tracking.hum_max2,\n            'data_hum': Number(data_.data.hum_in),\n            time_fan: context.get('time_fan'),\n            nt: add_time(0),\n            // ONfoggy: context.get('timeON_foggy'),\n            // OFFfoggy: context.get('timeOFF_foggy'),\n            ONspray: context.get('timeON_spray'),\n            OFFspray: context.get('timeOFF_spray'),\n            // load_resp: load_resp,\n            // submode: submode_,\n            num_: num_,\n            // z_1: load_resp.toString(),\n            // z_2: status.toString(),\n            s: (new Date(ndate + ' ' + add_time(0))).getTime() / 1000,\n            xx: (new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000,\n            zzz: context.get('status_log'),\n            log_foggy: context.get('log_foggy')\n        };\n        msg.payload = payload\n        if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n            if (log_control != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }else{\n            if (context.get('status_log') != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n            context.set('timeON_spray', \"\");\n            context.set('timeOFF_spray', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n        context.set('timeON_spray', \"\");\n        context.set('timeOFF_spray', \"\");\n    }\n}\nfunction load_modeHum(val) {\n    if(val == 't<m'){\n        context.set('time_fan', \"\");\n    }\n    context.set('timeON_spray', \"\");\n    context.set('timeOFF_spray', \"\");\n    if (tracking.status_2 == 0) {\n        return ['OFF', 'h_0'];\n    }\n    else {\n        if (parseFloat(data_.data.hum_in) < parseFloat(tracking.hum_max2)) {\n            if (parseFloat(data_.data.hum_in) <= parseFloat(tracking.hum_min)) {\n                context.set('log_foggy', 'ON')\n            }\n            return ['OFF', 'h_1'];\n        } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n            context.set('log_foggy', 'OFF')\n            return ['OFF', 'h_2'];\n        } else { // hum >= config && < max\n            if (context.get('log_foggy') == 'ON') {\n                return ['ON', 'h_3'];\n            } else {\n                return ['OFF', 'h_4'];\n            }\n        }\n    }\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2040,
        "y": 3660,
        "wires": [
            [
                "994ad648963bb3a2"
            ]
        ]
    },
    {
        "id": "1f9250206e28584b",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "connect/status/TUSMT005",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 1379.0000038146973,
        "y": 3539.000005722046,
        "wires": [
            [
                "4e603c5184f13bd7"
            ]
        ]
    },
    {
        "id": "4e603c5184f13bd7",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "msg.payload = msg.payload;\nmsg.topic = \"get_status\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1579.0000038146973,
        "y": 3539.000005722046,
        "wires": [
            [
                "78a0edb109a6b7b2"
            ]
        ]
    },
    {
        "id": "78a0edb109a6b7b2",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "send_load_to_mqtt",
        "func": "if (msg.topic === \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic === \"get_data\") {\n    context.set('get_data', msg.payload);\n}\nlet get_status = context.get('get_status') || 0;\nlet get_data = context.get('get_data') || 0;\nif (get_status == 0 || get_status === 'offline') {\n    return false;\n}\nif (get_data == 0) {\n    return false;\n}\n\n\n// let get_data = msg.payload;\nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/mqtt_load_auto.php\";\nmsg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\nmsg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\nmsg.payload = {\n    sn: get_data.sn,\n    mode: get_data.mode,\n    load: get_data.load,\n    status: get_data.status,\n    user: get_data.user\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2470,
        "y": 3540,
        "wires": [
            [
                "43d013ebc1013dae"
            ]
        ]
    },
    {
        "id": "61307decea011f0e",
        "type": "inject",
        "z": "96f306faac18dafe",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2970,
        "y": 440,
        "wires": [
            [
                "7e85d9443fc69389"
            ]
        ]
    },
    {
        "id": "7e85d9443fc69389",
        "type": "moment",
        "z": "96f306faac18dafe",
        "name": "timmer",
        "topic": "timer",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "minutes",
        "adjDir": "subtract",
        "format": "HH:mm:ss",
        "locale": "th_TH",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 3130,
        "y": 440,
        "wires": [
            [
                "95001c08549160f7"
            ]
        ]
    },
    {
        "id": "9bf178ed4537f62b",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT006/control/config/time_auto",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 2900,
        "y": 400,
        "wires": [
            [
                "b66535956de2014f"
            ]
        ]
    },
    {
        "id": "8c51c2dcb671a2a8",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT006/control/loads/mode",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 2899.0000038146973,
        "y": 119.0000057220459,
        "wires": [
            [
                "a979e764fa8d8a5e"
            ]
        ]
    },
    {
        "id": "a979e764fa8d8a5e",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"get_mode\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3119.0000038146973,
        "y": 119.0000057220459,
        "wires": [
            [
                "9bc4057fa53dc9f2"
            ]
        ]
    },
    {
        "id": "b66535956de2014f",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "// var result = JSON.parse(msg.payload);\n\nmsg.payload = msg.payload;\nmsg.topic = \"get_timeAuto\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3130,
        "y": 400,
        "wires": [
            [
                "95001c08549160f7"
            ]
        ]
    },
    {
        "id": "32331ec1d902c8d8",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT006/control/set_config",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 2909.0000038146973,
        "y": 79.0000057220459,
        "wires": [
            [
                "beddb19eb034689e"
            ]
        ]
    },
    {
        "id": "beddb19eb034689e",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"set_config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3119.0000038146973,
        "y": 79.0000057220459,
        "wires": [
            [
                "9bc4057fa53dc9f2",
                "95001c08549160f7",
                "e73dbd9aeceb0e0b"
            ]
        ]
    },
    {
        "id": "95001c08549160f7",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Timer",
        "func": "if (msg.topic === \"timer\"){\n    context.set('timer',msg.timer);\n}\nif (msg.topic === \"set_config\"){\n    context.set('set_config',msg.payload);\n}\nif (msg.topic === \"get_timeAuto\"){\n    context.set('get_timeAuto',msg.payload);\n}\nif (msg.topic === \"response\"){\n    context.set('response',msg.payload);\n}\n\nlet get_timer = context.get('timer') || 0;\nlet set_config = context.get('set_config') || 0;\nlet get_timeAuto = context.get('get_timeAuto') || 0;\nlet response = context.get('response') || 0;\nif (get_timer == 0) {\n    return false;\n}\nif (set_config == 0) {\n    return false;\n}\nif (get_timeAuto == 0) {\n    return false;\n}\nif (response == 0) {\n    return false;\n}\nif (response.mode === 'Auto'){\n    if (set_config.sub_mode.sub_mode === 'Timer') {\n        msg.payload = {\n                time :  get_timer,\n                set_config: set_config,\n                time_auto : get_timeAuto,\n                response: response\n            };\n        // msg.topic = 'config';\n        return msg;\n    }\n}\n// else{\n//     msg.payload = set_config.sub_mode.sub_mode\n//     return msg\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3299.0000038146973,
        "y": 399.0000057220459,
        "wires": [
            [
                "b845b538f0286b1d",
                "068e7dee428741be",
                "8f0f7d5b94d25ed6",
                "c32fe011028f46ae",
                "b0207fa5d472f17b",
                "46f16191972018df",
                "278f0177dda5e643",
                "e828a41296526eec",
                "bc76e131f75b4eb3",
                "f5149cb807dd2e66",
                "9d934bda996361d8",
                "8bb7342753b80f32"
            ]
        ]
    },
    {
        "id": "9bc4057fa53dc9f2",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Mode",
        "func": "if (msg.topic == \"get_mode\") {\n    context.set('get_mode', msg.payload);\n}\nif (msg.topic == \"set_config\") {\n    context.set('get_submode', msg.payload);\n}\n\nvar get_mode = context.get('get_mode') || 0;\nvar get_submode = context.get('get_submode') || 0;\nvar log_control = context.get('log_control') || 'No';\n\nif (get_mode == 0) {\n    return false;\n}\nif (get_submode == 0) {\n    return false;\n}\nif (log_control === 'No') {\n    context.set('log_control', get_mode)\n}else{\n    if (get_mode !== log_control){\n        // msg.headers = {};\n        // msg.method = \"POST\";\n        // msg.url = \"http://localhost/smartfarm/server/insert_data/tu/mode.php\";\n        // msg.payload = {\n        //     output: get_mode,\n        //     get_: get_submode.sub_mode.sn\n        // }\n        // msg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n        // msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n        get_submode['mode'] = get_mode;\n        msg.payload = get_submode;\n        context.set('log_control', get_mode);\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 120,
        "wires": [
            [
                "467258904b39968c"
            ]
        ]
    },
    {
        "id": "467258904b39968c",
        "type": "mqtt out",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT006/control/set_config",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 4050,
        "y": 120,
        "wires": []
    },
    {
        "id": "e828a41296526eec",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 4",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_8;\nlet user = set_config.config_timeSet.load_8.user_control;\nlet load = 'fan_4';\nlet log_control = res.response.fan_4;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 680,
        "wires": [
            [
                "9b01933022e299dc"
            ]
        ]
    },
    {
        "id": "f5149cb807dd2e66",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Foggy 2",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_10;\nlet user, load = 'foggy_2';\nlet log_control = res.response.foggy_2;\nif (sub_mode.sub_mode_10 === 'Time_set') {\n    user = set_config.config_timeSet.load_10.user_control;\n} else {\n    user = set_config.config_timeLoop.load_10.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3560,
        "y": 760,
        "wires": [
            [
                "9b01933022e299dc"
            ]
        ]
    },
    {
        "id": "9d934bda996361d8",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Spray",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_11;\nlet user, load = 'spray';\nlet log_control = res.response.spray;\nif (sub_mode.sub_mode_11 === 'Time_set') {\n    user = set_config.config_timeSet.load_11.user_control;\n} else {\n    user = set_config.config_timeLoop.load_11.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 800,
        "wires": [
            [
                "9b01933022e299dc"
            ]
        ]
    },
    {
        "id": "8bb7342753b80f32",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Shading",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_12;\nlet user = set_config.config_timeSet.load_12.user_control;\nlet load = 'shading';\nlet log_control = res.response.shading; //context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto'){\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user,\n                log_control:log_control\n            };\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3560,
        "y": 840,
        "wires": [
            [
                "9b01933022e299dc"
            ]
        ]
    },
    {
        "id": "4e3d0f59a950f008",
        "type": "http request",
        "z": "96f306faac18dafe",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 4010,
        "y": 200,
        "wires": [
            [
                "916d2070f8cf46df"
            ]
        ]
    },
    {
        "id": "916d2070f8cf46df",
        "type": "debug",
        "z": "96f306faac18dafe",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4010,
        "y": 240,
        "wires": []
    },
    {
        "id": "278f0177dda5e643",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 3",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_7;\nlet user = set_config.config_timeSet.load_7.user_control;\nlet load = 'fan_3';\nlet log_control = res.response.fan_3;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 640,
        "wires": [
            [
                "9b01933022e299dc"
            ]
        ]
    },
    {
        "id": "b0207fa5d472f17b",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 1",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_5;\nlet user = set_config.config_timeSet.load_5.user_control;\nlet load = 'fan_1';\nlet log_control = res.response.fan_1;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto'){\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 560,
        "wires": [
            [
                "9b01933022e299dc"
            ]
        ]
    },
    {
        "id": "46f16191972018df",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 2",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_6;\nlet user = set_config.config_timeSet.load_6.user_control;\nlet load = 'fan_2';\nlet log_control = res.response.fan_2;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 600,
        "wires": [
            [
                "9b01933022e299dc"
            ]
        ]
    },
    {
        "id": "c32fe011028f46ae",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 4",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_4;\nlet user, load = 'dripper_4';\nlet log_control = res.response.dripper_4;\nif (sub_mode.sub_mode_4 === 'Time_set') {\n    user = set_config.config_timeSet.load_4.user_control;\n} else {\n    user = set_config.config_timeLoop.load_4.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3560,
        "y": 520,
        "wires": [
            [
                "9b01933022e299dc"
            ]
        ]
    },
    {
        "id": "8f0f7d5b94d25ed6",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 3",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_3;\nlet user, load = 'dripper_3';\nlet log_control = res.response.dripper_3;\nif (sub_mode.sub_mode_3 === 'Time_set') {\n    user = set_config.config_timeSet.load_3.user_control;\n} else {\n    user = set_config.config_timeLoop.load_3.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3560,
        "y": 480,
        "wires": [
            [
                "9b01933022e299dc"
            ]
        ]
    },
    {
        "id": "068e7dee428741be",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 2",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_2;\nlet user, load = 'dripper_2';\nlet log_control = res.response.dripper_2;\nif (sub_mode.sub_mode_2 === 'Time_set') {\n    user = set_config.config_timeSet.load_2.user_control;\n} else {\n    user = set_config.config_timeLoop.load_2.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3560,
        "y": 440,
        "wires": [
            [
                "9b01933022e299dc"
            ]
        ]
    },
    {
        "id": "b845b538f0286b1d",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 1",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_1;\nlet user, load = 'dripper_1';\nlet log_control = res.response.dripper_1;\nif (sub_mode.sub_mode_1 === 'Time_set') {\n    user = set_config.config_timeSet.load_1.user_control;\n} else {\n    user = set_config.config_timeLoop.load_1.user_control;\n}\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        // msg.payload = Object.keys(time_auto).length/2 \n        // msg.payload = sub_mode\n        // return msg;\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3560,
        "y": 400,
        "wires": [
            [
                "9b01933022e299dc"
            ]
        ]
    },
    {
        "id": "e73dbd9aeceb0e0b",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_config",
        "func": "if (msg.topic === \"set_config\"){\n    context.set('config',msg.payload);\n}\nif (msg.topic === \"filter_raw\"){\n    context.set('filter_raw',msg.payload);\n}\nif (msg.topic === \"filter_eq\"){\n    context.set('filter_eq',msg.payload);\n}\nif (msg.topic === \"response\"){\n    context.set('response',msg.payload);\n}\n\n// var get_date_timer = context.get('timer') || 0;\nlet set_config = context.get('config') || 0;\nlet filter_raw = context.get('filter_raw') || 0;\nlet filter_eq = context.get('filter_eq') || 0;\nlet response = context.get('response') || 0;\n\nif(set_config == 0){\n    return false;\n}\nif(filter_raw == 0){\n    return false;\n}\nif(filter_eq == 0){\n    return false;\n}\nif(response == 0){\n    return false;\n}\nlet sub_mode = set_config.sub_mode;\nlet tracking = set_config.config_tracking;\nlet data_;\nif (response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Tracking') {\n        if(set_config.eq == 0){ // ไม่ผ่านสมการ\n            data_ = filter_raw;\n        }else{\n            data_ = filter_eq;\n        }\n        msg.payload = {\n            // date_time : get_date_timer,\n            tracking : tracking,\n            data_ : data_,\n            response : response,\n            eq: set_config.eq,\n            sub_mode: sub_mode.sub_mode,\n            control_v: set_config.control_V\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3329.0000038146973,
        "y": 199.0000057220459,
        "wires": [
            [
                "079e23d9b816b833"
            ]
        ]
    },
    {
        "id": "92aa7560cc3400eb",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT006/data_sensor/filter",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 2909.0000038146973,
        "y": 199.0000057220459,
        "wires": [
            [
                "ab1662446cb4acd6"
            ]
        ]
    },
    {
        "id": "ab1662446cb4acd6",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"filter_raw\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3119.0000038146973,
        "y": 199.0000057220459,
        "wires": [
            [
                "e73dbd9aeceb0e0b"
            ]
        ]
    },
    {
        "id": "a63f784a7165942c",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT006/data_sensor/filter_eq",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 2899.0000038146973,
        "y": 239.0000057220459,
        "wires": [
            [
                "ee5b7d4f4a2eb797"
            ]
        ]
    },
    {
        "id": "ee5b7d4f4a2eb797",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"filter_eq\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3119.0000038146973,
        "y": 239.0000057220459,
        "wires": [
            [
                "e73dbd9aeceb0e0b"
            ]
        ]
    },
    {
        "id": "9b01933022e299dc",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "// var result = JSON.parse(msg.payload);\n\nmsg.payload = msg.payload;\nmsg.topic = \"get_data\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3799.0000038146973,
        "y": 399.0000057220459,
        "wires": [
            [
                "3a6572afb425974b"
            ]
        ]
    },
    {
        "id": "bc76e131f75b4eb3",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Foggy 1",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_9;\nlet user, load = 'foggy_1';\nlet log_control = res.response.foggy_1;\nif (sub_mode.sub_mode_9 === 'Time_set') {\n    user = set_config.config_timeSet.load_9.user_control;\n} else {\n    user = set_config.config_timeLoop.load_9.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3560,
        "y": 720,
        "wires": [
            [
                "9b01933022e299dc"
            ]
        ]
    },
    {
        "id": "fbad747fdbcdedd0",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT006/control/response",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 2909.0000038146973,
        "y": 279.0000057220459,
        "wires": [
            [
                "7a670e31d921dc28"
            ]
        ]
    },
    {
        "id": "7a670e31d921dc28",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"response\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3119.0000038146973,
        "y": 279.0000057220459,
        "wires": [
            [
                "e73dbd9aeceb0e0b",
                "95001c08549160f7"
            ]
        ]
    },
    {
        "id": "079e23d9b816b833",
        "type": "moment",
        "z": "96f306faac18dafe",
        "name": "timer",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "months",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "th_TH",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 3379.0000038146973,
        "y": 279.0000057220459,
        "wires": [
            [
                "66fecbb4939438e8",
                "8f5f85533bd30775",
                "05385b88fe17fa8a",
                "0fcca7d49069df74",
                "ec88527dd69a5301"
            ]
        ]
    },
    {
        "id": "66fecbb4939438e8",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_dripper",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        let status, load=[], load_res=[], msg_status = [], log_control=[],  res_status, stop_time;\n        for (let i = 1; i <= 4; i++) {\n            if (tracking['dripper_' + i] == \"ON\") {\n                load_res.push(response['dripper_' + i]);\n            }\n            load.push('dripper_' + i);\n            log_control.push(response['dripper_' + i]);\n        }\n        if (load_res.filter(function (value) { return value == 'ON'; }).length > 0) {\n            res_status = 'ON';\n        } else {\n            res_status = 'OFF';\n        }\n\n        if (tracking.status_1 == 0) {\n            status = 'OFF';\n        } else {\n            if (control_v == \"2\"){ // V อ.อร\n                stop_time = '16:00:00'\n            }else{\n                stop_time = '18:00:00'\n            }\n            if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00'){\n                status = 'OFF';\n            }else{\n                if (parseFloat(data_.data.soil_in) <= parseFloat(tracking.soil_min)){\n                    status = 'ON';\n                } else if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)){\n                    status = 'OFF';\n                }else{\n                    status = res_status;\n                }\n            }\n        }\n        for (let a = 1; a <= 4; a++){ // load.length;\n            if(tracking['dripper_'+a] == \"ON\"){\n                msg_status.push(status);\n            }else{\n                msg_status.push('OFF');\n            }\n        }\n        if (log_control.toString() != msg_status.toString()) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(msg_status),\n                user: tracking.user_control,\n                soil_min: tracking.soil_min,\n                soil_max: tracking.soil_max,\n                data: Number(data_.data.soil_in),\n                data2: parseFloat(data_.data.soil_in),\n                date_time:date_time,\n            };\n            // context.set('log_control', status)\n            // if(old_nowsec != nowsec){\n                // context.set('old_nowsec', nowsec);\n                return msg;\n            // }\n        }\n    }\n}\n\n// msg.payload =tracking\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3590,
        "y": 200,
        "wires": [
            [
                "9b01933022e299dc"
            ]
        ]
    },
    {
        "id": "05385b88fe17fa8a",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_fan",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\n// let nsec = date_time.split(\" \")[1].split(\":\");\n// let nowsec = Number(nsec[2]);\n// let old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\n\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        let status, load = [], load_res = [], msg_status = [], log_control = [], res_status;\n        for (let i = 1; i <= 4; i++) {\n            if (tracking['fan_' + i] == \"ON\") {\n                load_res.push(response['fan_' + i]);\n            }\n            load.push('fan_' + i);\n            log_control.push(response['fan_' + i]);\n        }\n        if (tracking.status_3 == 0) {\n            status = 'OFF';\n        } else {\n            if (load_res.filter(function (value) { return value == 'ON'; }).length > 0) {\n                res_status = 'ON';\n            } else {\n                res_status = 'OFF';\n            }\n\n            if (control_v == \"2\") { // V อ.อร\n                if (date_time.split(\" \")[1] > '16:00:00' || date_time.split(\" \")[1] < '07:00:00') {\n                    status = 'OFF';\n                } else {\n                    if (parseFloat(data_.data.temp_in) <= parseFloat(tracking.temp_min)) {\n                        status = 'OFF';\n                    } else if (parseFloat(data_.data.temp_in) >= parseFloat(tracking.temp_max)) {\n                        status = 'ON';\n                    } else {\n                        status = res_status;\n                    }\n                }\n            } else {\n                if (parseFloat(data_.data.temp_in) <= parseFloat(tracking.temp_min)) {\n                    status = 'OFF';\n                } else if (parseFloat(data_.data.temp_in) >= parseFloat(tracking.temp_max)) {\n                    status = 'ON';\n                } else {\n                    status = res_status;\n                }\n            }\n        }\n        for (let a = 1; a <= 4; a++){ // load.length;\n            if(tracking['fan_'+a] == \"ON\"){\n                msg_status.push(status);\n            }else{\n                msg_status.push('OFF');\n            }\n        }\n        if (log_control.toString() != msg_status.toString()) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(msg_status),\n                user: tracking.user_control,\n                temp_min: tracking.temp_min,\n                temp_max: tracking.temp_max,\n                data: Number(data_.data.temp_in),\n            };\n            // context.set('log_control', status)\n            // if(old_nowsec != nowsec){\n                // context.set('old_nowsec', nowsec);\n                return msg;\n            // }\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3570,
        "y": 320,
        "wires": [
            [
                "9b01933022e299dc"
            ]
        ]
    },
    {
        "id": "8f5f85533bd30775",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_slan",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\n\nlet log_control = response['shading']; //context.get('log_control') || 'No';\nlet status = [], load = [], load_res = [], msg_status = [], a;\n\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n    a = 1\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"shading\");\n\n        if (control_v == \"2\") { // V อ.อร\n            if (tracking.status_3 == 0) { // ปิดโหมด Temp\n                status.push(status_slan('t<m'));\n                a = 3\n            } else { // เปิดโหมด Temp\n                if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                    status.push(status_slan('t<m'));\n                    a = 4\n                } else { // temp > max\n                    // จับเวลา Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(45)); //45\n                        context.set('tracking', tracking);\n                    } else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(45)); //45\n                        }\n                    }\n                    // ------------------------------------\n\n                    if (date_time.split(\" \")[1] >= '12:00:00' && date_time.split(\" \")[1] < '16:00:00') {\n                        // 12:00 - 16:00\n                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) { //<=\n                            // timw ปัจจุบัน <= time_fan\n                            status.push(status_slan('t>m'));\n                            a = 7\n                        } else {\n                            status.push('ON');\n                            a = 8\n                        }\n                    } else {\n                        // นอกช่วงเวลา 12:00 - 16:00\n                        status.push(status_slan('t>m'));\n                    }\n                }\n            }\n        } else { // No V อ.อร\n            status.push(status_slan('t<m'));\n        }\n        if (log_control != status[0]) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(status),\n                user: tracking.user_control,\n                light_min: tracking.light_min,\n                light_max: tracking.light_max,\n                ss: log_control,\n                s2: tracking.status_4\n            };\n            // context.set('log_control', status)\n\n            // if(old_nowsec != nowsec){\n            //     context.set('old_nowsec', nowsec);\n            return msg;\n            // }\n        }\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n    }\n}\n\nfunction status_slan(val) {\n    if (val == 't<m') {\n        context.set('time_fan', \"\");\n    }\n    let s_slan, n_data, stop_time;\n\n    if (tracking.status_4 == 0) { // ปิดโหมด Slan\n        s_slan = \"OFF\";\n    } else { // เปิดโหมด Slan\n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            s_slan = \"OFF\";\n        } else {\n            // if (parseFloat(tracking.light_in_mode) == 5) {\n            //     n_data = parseFloat(data_.data.light_in) / 54;\n            // } else {\n            n_data = parseFloat(data_.data.light_in) / 1000;\n            // }\n\n            if (parseFloat(n_data) <= parseFloat(tracking.light_min)) {\n                s_slan = \"OFF\"; // เปิดม่าน\n            } else if (parseFloat(n_data) >= parseFloat(tracking.light_max)) {\n                s_slan = \"ON\"; // ปิดม่าน\n            } else {\n                s_slan = log_control;\n            }\n        }\n    }\n    return s_slan;\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3580,
        "y": 360,
        "wires": [
            [
                "9b01933022e299dc"
            ]
        ]
    },
    {
        "id": "0fcca7d49069df74",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_Foggy",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nlet log_control = response['foggy_1'];\nlet status = [], load = [], stop_time // load_res = [], msg_status = [], a;\nlet submode_, num_\n\n// msg.payload = tracking.status_2\n// return msg\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"foggy_1\");\n\n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            // กรณีนอกเวลา\n            status.push('OFF')\n            submode_ = 'out of time H&T';\n            num_ = 1;\n        } else {\n            if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                let ress = load_modeHum('t<m')\n                status.push(ress[0]);\n                num_ = 't < max ' + ress[1];\n            }\n            else { // temp > max\n                if (tracking.status_3 == 0) {\n                    let ress = load_modeHum('t>m')\n                    status.push(ress[0]);\n                    num_ = 't = off ' + ress[1];\n                }\n                else { // ON Mode Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(15)); //15\n                        context.set('tracking', tracking);\n                    }\n                    else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(15)); //15\n                        }\n                    }\n                    if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) {\n                        // time <= time_fan\n                        let ress = load_modeHum('t>m')\n                        status.push(ress[0]);\n                        num_ = 't <= 15m ' + ress[1] + ' t= ' + context.get('time_fan');\n                    } else { // หลัง 15 นาที\n                        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n                            status.push('OFF');\n                            num_ = 't > 15m | soil > m';\n                            context.set('timeON_foggy', \"\");\n                            context.set('timeOFF_foggy', \"\");\n                        }\n                        else { // Soil < Max\n                            if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max2)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | soil < m | hum >= config';\n                                context.set('timeON_foggy', \"\");\n                                context.set('timeOFF_foggy', \"\");\n                            } else { // hum < config\n                                if (context.get('timeON_foggy') == \"\" && context.get('timeOFF_foggy') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_foggy', add_time(13)); // 13\n                                        num_ = 't > 15m | soil < m | hum < config จะ on เวลา ' + add_time(13);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_foggy', add_time(2));\n                                        num_ = 't > 15m | soil < m | hum < config จะ off เวลา ' + add_time(2);\n                                    }\n                                }\n                                else {\n                                    // timeON_foggy != '' || timeOFF_foggy != ''\n                                    if (context.get('timeON_foggy') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_foggy'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_foggy', add_time(2)); // 2\n                                                context.set('timeON_foggy', \"\");\n                                                num_ = 't > 15m | soil < m | hum < config จะ off เวลา ' + add_time(2);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeON_foggy'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_foggy') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_foggy'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_foggy', \"\");\n                                                context.set('timeON_foggy', add_time(13)); // 13\n                                                num_ = 't > 15m | soil < m | hum < config จะ on เวลา ' + add_time(13);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n\n\n        let payload = {\n            'sn': data_.serial_id,\n            'mode': 'Tracking',\n            'load': JSON.stringify(load),\n            'status': JSON.stringify(status),\n            'user': tracking.user_control,\n            'soil_max': tracking.soil_max,\n            'data_soil': Number(data_.data.soil_in),\n            'hum_min': tracking.hum_min,\n            'hum_max': tracking.hum_max,\n            'hum_max2': tracking.hum_max2,\n            'data_hum': Number(data_.data.hum_in),\n            time_fan: context.get('time_fan'),\n            nt: add_time(0),\n            ONfoggy: context.get('timeON_foggy'),\n            OFFfoggy: context.get('timeOFF_foggy'),\n            // ONspray: context.get('timeON_spray'),\n            // OFFspray: context.get('timeOFF_spray'),\n            // load_resp: load_resp,\n            // submode: submode_,\n            num_: num_,\n            // z_1: load_resp.toString(),\n            // z_2: status.toString(),\n            s: (new Date(ndate + ' ' + add_time(0))).getTime() / 1000,\n            xx: (new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000,\n            zzz: context.get('status_log')\n        };\n        msg.payload = payload\n        if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n            if (log_control != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }else{\n            if (context.get('status_log') != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }\n\n\n\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n            context.set('timeON_foggy', \"\");\n            context.set('timeOFF_foggy', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n        context.set('timeON_foggy', \"\");\n        context.set('timeOFF_foggy', \"\");\n    }\n}\nfunction load_modeHum(val) {\n    if (val == 't<m') {\n        context.set('time_fan', \"\");\n    }\n    context.set('timeON_foggy', \"\");\n    context.set('timeOFF_foggy', \"\");\n    if (tracking.status_2 == 0) {\n        return ['OFF', 'h_0'];\n    }\n    else {\n        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n            return ['OFF', 'h_1'];\n        }\n        else { // Soil < soil_max\n            if (parseFloat(data_.data.hum_in) <= parseFloat(tracking.hum_min)) {\n                return ['ON', 'h_2'];\n            } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max2)) {\n                return ['OFF', 'h_3'];\n            } else {\n                return [log_control, 'h_4'];\n            }\n        }\n    }\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3580,
        "y": 240,
        "wires": [
            [
                "9b01933022e299dc"
            ]
        ]
    },
    {
        "id": "ec88527dd69a5301",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_Spray",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nlet log_control = response['spray'];\nlet status = [], load = [], stop_time \nlet submode_, num_\n\n// msg.payload = tracking.status_2\n// return msg\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"spray\");\n\n        if (context.get('log_foggy') == undefined || context.get('log_foggy') == '') {\n            context.set('log_foggy', response['foggy_1']);\n        }\n                \n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            // กรณีนอกเวลา\n            status.push('OFF')\n            submode_ = 'out of time H&T';\n            num_ = 1;\n        } else {\n            if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                let ress = load_modeHum('t<m')\n                status.push(ress[0]);\n                num_ = 't < max ' + ress[1];\n            } \n            else { // temp > max\n                if (tracking.status_3 == 0) {\n                    let ress = load_modeHum('t>m')\n                    status.push(ress[0]);\n                    num_ = 't = off ' + ress[1];\n                }\n                else{ // ON Mode Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(15)); //15\n                        context.set('tracking', tracking);\n                    }\n                    else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(15)); //15\n                        }\n                    }\n                    if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) {\n                        // time <= time_fan\n                        let ress = load_modeHum('t>m')\n                        status.push(ress[0]);\n                        num_ = 't <= 15m ' + ress[1] + ' t= ' + context.get('time_fan');\n                    } else { // หลัง 15 นาที\n                        // ------------------------------------\n                        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n                            if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum >= max';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                                context.set('log_foggy', 'OFF')\n                            } else { // hum < config\n                                if (context.get('timeON_spray') == \"\" && context.get('timeOFF_spray') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                    }\n                                }\n                                else {\n                                    // timeON_spray != '' || timeOFF_spray != ''\n                                    if (context.get('timeON_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_spray', add_time(5)); // 5\n                                                context.set('timeON_spray', \"\");\n                                                num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | hum >= config | time <= timeON_spray'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_spray', \"\");\n                                                context.set('timeON_spray', add_time(5)); // 5\n                                                num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }else{\n                            // soil < soil_Max\n                            if (parseFloat(data_.data.hum_in) < parseFloat(tracking.hum_max2)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum < config';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                            } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum >= max';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                                context.set('log_foggy', 'OFF')\n                            } else { // hum < config\n                                if (context.get('timeON_spray') == \"\" && context.get('timeOFF_spray') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                    }\n                                }\n                                else {\n                                    // timeON_spray != '' || timeOFF_spray != ''\n                                    if (context.get('timeON_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_spray', add_time(5)); // 5\n                                                context.set('timeON_spray', \"\");\n                                                num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | hum >= config | time <= timeON_spray'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_spray', \"\");\n                                                context.set('timeON_spray', add_time(5)); // 5\n                                                num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }\n                        // ==================================\n                    }\n                }\n            }\n        }\n       \n        let payload = {\n            'sn': data_.serial_id,\n            'mode': 'Tracking',\n            'load': JSON.stringify(load),\n            'status': JSON.stringify(status),\n            'user': tracking.user_control,\n            'soil_max': tracking.soil_max,\n            'data_soil': Number(data_.data.soil_in),\n            'hum_min': tracking.hum_min,\n            'hum_max': tracking.hum_max,\n            'hum_max2': tracking.hum_max2,\n            'data_hum': Number(data_.data.hum_in),\n            time_fan: context.get('time_fan'),\n            nt: add_time(0),\n            // ONfoggy: context.get('timeON_foggy'),\n            // OFFfoggy: context.get('timeOFF_foggy'),\n            ONspray: context.get('timeON_spray'),\n            OFFspray: context.get('timeOFF_spray'),\n            // load_resp: load_resp,\n            // submode: submode_,\n            num_: num_,\n            // z_1: load_resp.toString(),\n            // z_2: status.toString(),\n            s: (new Date(ndate + ' ' + add_time(0))).getTime() / 1000,\n            xx: (new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000,\n            zzz: context.get('status_log'),\n            log_foggy: context.get('log_foggy')\n        };\n        msg.payload = payload\n        if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n            if (log_control != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }else{\n            if (context.get('status_log') != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n            context.set('timeON_spray', \"\");\n            context.set('timeOFF_spray', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n        context.set('timeON_spray', \"\");\n        context.set('timeOFF_spray', \"\");\n    }\n}\nfunction load_modeHum(val) {\n    if(val == 't<m'){\n        context.set('time_fan', \"\");\n    }\n    context.set('timeON_spray', \"\");\n    context.set('timeOFF_spray', \"\");\n    if (tracking.status_2 == 0) {\n        return ['OFF', 'h_0'];\n    }\n    else {\n        if (parseFloat(data_.data.hum_in) < parseFloat(tracking.hum_max2)) {\n            if (parseFloat(data_.data.hum_in) <= parseFloat(tracking.hum_min)) {\n                context.set('log_foggy', 'ON')\n            }\n            return ['OFF', 'h_1'];\n        } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n            context.set('log_foggy', 'OFF')\n            return ['OFF', 'h_2'];\n        } else { // hum >= config && < max\n            if (context.get('log_foggy') == 'ON') {\n                return ['ON', 'h_3'];\n            } else {\n                return ['OFF', 'h_4'];\n            }\n        }\n    }\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3580,
        "y": 280,
        "wires": [
            [
                "9b01933022e299dc"
            ]
        ]
    },
    {
        "id": "9d4d8cf6e6b15b1f",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "connect/status/TUSMT006",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 2919.0000038146973,
        "y": 159.0000057220459,
        "wires": [
            [
                "12b977b5d2af1b79"
            ]
        ]
    },
    {
        "id": "12b977b5d2af1b79",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "msg.payload = msg.payload;\nmsg.topic = \"get_status\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3119.0000038146973,
        "y": 159.0000057220459,
        "wires": [
            [
                "3a6572afb425974b"
            ]
        ]
    },
    {
        "id": "3a6572afb425974b",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "send_load_to_mqtt",
        "func": "if (msg.topic === \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic === \"get_data\") {\n    context.set('get_data', msg.payload);\n}\nlet get_status = context.get('get_status') || 0;\nlet get_data = context.get('get_data') || 0;\nif (get_status == 0 || get_status === 'offline') {\n    return false;\n}\nif (get_data == 0) {\n    return false;\n}\n\n\n// let get_data = msg.payload;\nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/mqtt_load_auto.php\";\nmsg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\nmsg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\nmsg.payload = {\n    sn: get_data.sn,\n    mode: get_data.mode,\n    load: get_data.load,\n    status: get_data.status,\n    user: get_data.user\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4010,
        "y": 160,
        "wires": [
            [
                "4e3d0f59a950f008"
            ]
        ]
    },
    {
        "id": "d5c9e0c8d5454a94",
        "type": "inject",
        "z": "96f306faac18dafe",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 2970,
        "y": 1280,
        "wires": [
            [
                "46d06d5311785549"
            ]
        ]
    },
    {
        "id": "46d06d5311785549",
        "type": "moment",
        "z": "96f306faac18dafe",
        "name": "timmer",
        "topic": "timer",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "minutes",
        "adjDir": "subtract",
        "format": "HH:mm:ss",
        "locale": "th_TH",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 3130,
        "y": 1280,
        "wires": [
            [
                "c6755ebda4977266"
            ]
        ]
    },
    {
        "id": "f584411b788c5c1e",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT007/control/config/time_auto",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 2900,
        "y": 1240,
        "wires": [
            [
                "65f8d2d0c3b7ac24"
            ]
        ]
    },
    {
        "id": "2b3671aa7465b3be",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT007/control/loads/mode",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 2899.0000038146973,
        "y": 959.0000057220459,
        "wires": [
            [
                "f10507142351aa56"
            ]
        ]
    },
    {
        "id": "f10507142351aa56",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"get_mode\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3119.0000038146973,
        "y": 959.0000057220459,
        "wires": [
            [
                "12ad690fb9a73cb8"
            ]
        ]
    },
    {
        "id": "65f8d2d0c3b7ac24",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "// var result = JSON.parse(msg.payload);\n\nmsg.payload = msg.payload;\nmsg.topic = \"get_timeAuto\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3130,
        "y": 1240,
        "wires": [
            [
                "c6755ebda4977266"
            ]
        ]
    },
    {
        "id": "febdec8e1294be0b",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT007/control/set_config",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 2909.0000038146973,
        "y": 919.0000057220459,
        "wires": [
            [
                "fbfb311a8d8d2a08"
            ]
        ]
    },
    {
        "id": "fbfb311a8d8d2a08",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"set_config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3119.0000038146973,
        "y": 919.0000057220459,
        "wires": [
            [
                "12ad690fb9a73cb8",
                "c6755ebda4977266",
                "382f8b70021b7e9f"
            ]
        ]
    },
    {
        "id": "c6755ebda4977266",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Timer",
        "func": "if (msg.topic === \"timer\"){\n    context.set('timer',msg.timer);\n}\nif (msg.topic === \"set_config\"){\n    context.set('set_config',msg.payload);\n}\nif (msg.topic === \"get_timeAuto\"){\n    context.set('get_timeAuto',msg.payload);\n}\nif (msg.topic === \"response\"){\n    context.set('response',msg.payload);\n}\n\nlet get_timer = context.get('timer') || 0;\nlet set_config = context.get('set_config') || 0;\nlet get_timeAuto = context.get('get_timeAuto') || 0;\nlet response = context.get('response') || 0;\nif (get_timer == 0) {\n    return false;\n}\nif (set_config == 0) {\n    return false;\n}\nif (get_timeAuto == 0) {\n    return false;\n}\nif (response == 0) {\n    return false;\n}\nif (response.mode === 'Auto'){\n    if (set_config.sub_mode.sub_mode === 'Timer') {\n        msg.payload = {\n                time :  get_timer,\n                set_config: set_config,\n                time_auto : get_timeAuto,\n                response: response\n            };\n        // msg.topic = 'config';\n        return msg;\n    }\n}\n// else{\n//     msg.payload = set_config.sub_mode.sub_mode\n//     return msg\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3299.0000038146973,
        "y": 1239.000005722046,
        "wires": [
            [
                "3454eeaa15175669",
                "96af7e260fb544ef",
                "5841ba836d5e5950",
                "1f9f324848e47715",
                "a6e664eaece43284",
                "12c36a4edbe9cdc2",
                "b67f36808dfe64b0",
                "efcb0c020a92ced1",
                "2ed7e96307b53ac8",
                "e78240964bc38a0f",
                "df7726b6f9c0fb4a",
                "4cc3edcb97ae917a"
            ]
        ]
    },
    {
        "id": "12ad690fb9a73cb8",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Mode",
        "func": "if (msg.topic == \"get_mode\") {\n    context.set('get_mode', msg.payload);\n}\nif (msg.topic == \"set_config\") {\n    context.set('get_submode', msg.payload);\n}\n\nvar get_mode = context.get('get_mode') || 0;\nvar get_submode = context.get('get_submode') || 0;\nvar log_control = context.get('log_control') || 'No';\n\nif (get_mode == 0) {\n    return false;\n}\nif (get_submode == 0) {\n    return false;\n}\nif (log_control === 'No') {\n    context.set('log_control', get_mode)\n}else{\n    if (get_mode !== log_control){\n        // msg.headers = {};\n        // msg.method = \"POST\";\n        // msg.url = \"http://localhost/smartfarm/server/insert_data/tu/mode.php\";\n        // msg.payload = {\n        //     output: get_mode,\n        //     get_: get_submode.sub_mode.sn\n        // }\n        // msg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n        // msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n        get_submode['mode'] = get_mode;\n        msg.payload = get_submode;\n        context.set('log_control', get_mode);\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 960,
        "wires": [
            [
                "9e35e271cfbeb464"
            ]
        ]
    },
    {
        "id": "9e35e271cfbeb464",
        "type": "mqtt out",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT007/control/set_config",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 4050,
        "y": 960,
        "wires": []
    },
    {
        "id": "efcb0c020a92ced1",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 4",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_8;\nlet user = set_config.config_timeSet.load_8.user_control;\nlet load = 'fan_4';\nlet log_control = res.response.fan_4;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 1520,
        "wires": [
            [
                "67a60d0444f93134"
            ]
        ]
    },
    {
        "id": "e78240964bc38a0f",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Foggy 2",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_10;\nlet user, load = 'foggy_2';\nlet log_control = res.response.foggy_2;\nif (sub_mode.sub_mode_10 === 'Time_set') {\n    user = set_config.config_timeSet.load_10.user_control;\n} else {\n    user = set_config.config_timeLoop.load_10.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3560,
        "y": 1600,
        "wires": [
            [
                "67a60d0444f93134"
            ]
        ]
    },
    {
        "id": "df7726b6f9c0fb4a",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Spray",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_11;\nlet user, load = 'spray';\nlet log_control = res.response.spray;\nif (sub_mode.sub_mode_11 === 'Time_set') {\n    user = set_config.config_timeSet.load_11.user_control;\n} else {\n    user = set_config.config_timeLoop.load_11.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 1640,
        "wires": [
            [
                "67a60d0444f93134"
            ]
        ]
    },
    {
        "id": "4cc3edcb97ae917a",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Shading",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_12;\nlet user = set_config.config_timeSet.load_12.user_control;\nlet load = 'shading';\nlet log_control = res.response.shading; //context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto'){\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user,\n                log_control:log_control\n            };\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3560,
        "y": 1680,
        "wires": [
            [
                "67a60d0444f93134"
            ]
        ]
    },
    {
        "id": "de2bc21e464199c1",
        "type": "http request",
        "z": "96f306faac18dafe",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 4010,
        "y": 1040,
        "wires": [
            [
                "ce8582d15a13841b"
            ]
        ]
    },
    {
        "id": "ce8582d15a13841b",
        "type": "debug",
        "z": "96f306faac18dafe",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 4010,
        "y": 1080,
        "wires": []
    },
    {
        "id": "b67f36808dfe64b0",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 3",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_7;\nlet user = set_config.config_timeSet.load_7.user_control;\nlet load = 'fan_3';\nlet log_control = res.response.fan_3;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 1480,
        "wires": [
            [
                "67a60d0444f93134"
            ]
        ]
    },
    {
        "id": "a6e664eaece43284",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 1",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_5;\nlet user = set_config.config_timeSet.load_5.user_control;\nlet load = 'fan_1';\nlet log_control = res.response.fan_1;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto'){\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 1400,
        "wires": [
            [
                "67a60d0444f93134"
            ]
        ]
    },
    {
        "id": "12c36a4edbe9cdc2",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Fan 2",
        "func": "let res = msg.payload;\nlet time = res.time;\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_6;\nlet user = set_config.config_timeSet.load_6.user_control;\nlet load = 'fan_2';\nlet log_control = res.response.fan_2;\n// var log_control = context.get('log_control') || 'No';\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3550,
        "y": 1440,
        "wires": [
            [
                "67a60d0444f93134"
            ]
        ]
    },
    {
        "id": "1f9f324848e47715",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 4",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_4;\nlet user, load = 'dripper_4';\nlet log_control = res.response.dripper_4;\nif (sub_mode.sub_mode_4 === 'Time_set') {\n    user = set_config.config_timeSet.load_4.user_control;\n} else {\n    user = set_config.config_timeLoop.load_4.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n\n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3560,
        "y": 1360,
        "wires": [
            [
                "67a60d0444f93134"
            ]
        ]
    },
    {
        "id": "5841ba836d5e5950",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 3",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_3;\nlet user, load = 'dripper_3';\nlet log_control = res.response.dripper_3;\nif (sub_mode.sub_mode_3 === 'Time_set') {\n    user = set_config.config_timeSet.load_3.user_control;\n} else {\n    user = set_config.config_timeLoop.load_3.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3560,
        "y": 1320,
        "wires": [
            [
                "67a60d0444f93134"
            ]
        ]
    },
    {
        "id": "96af7e260fb544ef",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 2",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_2;\nlet user, load = 'dripper_2';\nlet log_control = res.response.dripper_2;\nif (sub_mode.sub_mode_2 === 'Time_set') {\n    user = set_config.config_timeSet.load_2.user_control;\n} else {\n    user = set_config.config_timeLoop.load_2.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3560,
        "y": 1280,
        "wires": [
            [
                "67a60d0444f93134"
            ]
        ]
    },
    {
        "id": "3454eeaa15175669",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Dripper 1",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_1;\nlet user, load = 'dripper_1';\nlet log_control = res.response.dripper_1;\nif (sub_mode.sub_mode_1 === 'Time_set') {\n    user = set_config.config_timeSet.load_1.user_control;\n} else {\n    user = set_config.config_timeLoop.load_1.user_control;\n}\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        // msg.payload = Object.keys(time_auto).length/2 \n        // msg.payload = sub_mode\n        // return msg;\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        // msg.payload = log.filter(function(value){ return value === 'ON'; }).length;\n        // return msg;\n        // return false;\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3560,
        "y": 1240,
        "wires": [
            [
                "67a60d0444f93134"
            ]
        ]
    },
    {
        "id": "382f8b70021b7e9f",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_config",
        "func": "if (msg.topic === \"set_config\"){\n    context.set('config',msg.payload);\n}\nif (msg.topic === \"filter_raw\"){\n    context.set('filter_raw',msg.payload);\n}\nif (msg.topic === \"filter_eq\"){\n    context.set('filter_eq',msg.payload);\n}\nif (msg.topic === \"response\"){\n    context.set('response',msg.payload);\n}\n\n// var get_date_timer = context.get('timer') || 0;\nlet set_config = context.get('config') || 0;\nlet filter_raw = context.get('filter_raw') || 0;\nlet filter_eq = context.get('filter_eq') || 0;\nlet response = context.get('response') || 0;\n\nif(set_config == 0){\n    return false;\n}\nif(filter_raw == 0){\n    return false;\n}\nif(filter_eq == 0){\n    return false;\n}\nif(response == 0){\n    return false;\n}\nlet sub_mode = set_config.sub_mode;\nlet tracking = set_config.config_tracking;\nlet data_;\nif (response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Tracking') {\n        if(set_config.eq == 0){ // ไม่ผ่านสมการ\n            data_ = filter_raw;\n        }else{\n            data_ = filter_eq;\n        }\n        msg.payload = {\n            // date_time : get_date_timer,\n            tracking : tracking,\n            data_ : data_,\n            response : response,\n            eq: set_config.eq,\n            sub_mode: sub_mode.sub_mode,\n            control_v: set_config.control_V\n        }\n        return msg;\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3329.0000038146973,
        "y": 1039.000005722046,
        "wires": [
            [
                "166c67b12eea56ce"
            ]
        ]
    },
    {
        "id": "3a21b8759476eb52",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT007/data_sensor/filter",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 2909.0000038146973,
        "y": 1039.000005722046,
        "wires": [
            [
                "20de680b010eb09d"
            ]
        ]
    },
    {
        "id": "20de680b010eb09d",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"filter_raw\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3119.0000038146973,
        "y": 1039.000005722046,
        "wires": [
            [
                "382f8b70021b7e9f"
            ]
        ]
    },
    {
        "id": "4f0164fc37757841",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT007/data_sensor/filter_eq",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 2899.0000038146973,
        "y": 1079.000005722046,
        "wires": [
            [
                "c62d415a9078397d"
            ]
        ]
    },
    {
        "id": "c62d415a9078397d",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"filter_eq\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3119.0000038146973,
        "y": 1079.000005722046,
        "wires": [
            [
                "382f8b70021b7e9f"
            ]
        ]
    },
    {
        "id": "67a60d0444f93134",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "// var result = JSON.parse(msg.payload);\n\nmsg.payload = msg.payload;\nmsg.topic = \"get_data\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3799.0000038146973,
        "y": 1239.000005722046,
        "wires": [
            [
                "e2c10b384f111818"
            ]
        ]
    },
    {
        "id": "2ed7e96307b53ac8",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Foggy 1",
        "func": "let res = msg.payload;\nlet time = res.time;\n// var log_control = context.get('log_control') || 'No';\nlet set_config = res.set_config;\nlet sub_mode = set_config.sub_mode;\nlet time_auto = res.time_auto.load_9;\nlet user, load = 'foggy_1';\nlet log_control = res.response.foggy_1;\nif (sub_mode.sub_mode_9 === 'Time_set') {\n    user = set_config.config_timeSet.load_9.user_control;\n} else {\n    user = set_config.config_timeLoop.load_9.user_control;\n}\n\nif (res.response.mode === 'Auto') {\n    if (sub_mode.sub_mode === 'Timer'){\n        let log = [], status;\n        for (let i = 1; i <= (Object.keys(time_auto).length)/2; i++){\n            if(time_auto['s_'+i] != \"\"){\n                if(time >= time_auto['s_'+i] && time < time_auto['e_'+i]){\n                    log.push('ON');\n                }else{\n                    log.push('OFF');\n                }\n                // log.push(\"'\"+time+\"' >= '\"+ time_auto['s_'+i]+\"' && '\"+ time+\"' < '\"+ time_auto['e_'+i]+\"' ||\");\n            }\n        }\n        if (log.filter(function (value) { return value == 'ON'; }).length > 0) {\n            status = 'ON';  \n        } else { \n            status = 'OFF'; \n        }\n        \n        if (log_control != status) {\n            msg.payload = {\n                sn: sub_mode.sn,\n                mode: sub_mode.sub_mode,\n                load: load,\n                status: status,\n                user: user\n            };\n            // context.set('log_control', status)\n            return msg;\n        }\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3560,
        "y": 1560,
        "wires": [
            [
                "67a60d0444f93134"
            ]
        ]
    },
    {
        "id": "6f623aca75427e81",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "TUSMT007/control/response",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 2909.0000038146973,
        "y": 1119.000005722046,
        "wires": [
            [
                "fe0df4feb6d8a4c4"
            ]
        ]
    },
    {
        "id": "fe0df4feb6d8a4c4",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"response\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3119.0000038146973,
        "y": 1119.000005722046,
        "wires": [
            [
                "382f8b70021b7e9f",
                "c6755ebda4977266"
            ]
        ]
    },
    {
        "id": "166c67b12eea56ce",
        "type": "moment",
        "z": "96f306faac18dafe",
        "name": "timer",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "months",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "th_TH",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 3379.0000038146973,
        "y": 1119.000005722046,
        "wires": [
            [
                "4bd738a41d88666f",
                "f9ca3db70f7ac087",
                "fbf5c1a3f70d3dcc",
                "998b21ca7a37717a",
                "97e2811cc00fd6fa"
            ]
        ]
    },
    {
        "id": "4bd738a41d88666f",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_dripper",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        let status, load=[], load_res=[], msg_status = [], log_control=[],  res_status, stop_time;\n        for (let i = 1; i <= 4; i++) {\n            if (tracking['dripper_' + i] == \"ON\") {\n                load_res.push(response['dripper_' + i]);\n            }\n            load.push('dripper_' + i);\n            log_control.push(response['dripper_' + i]);\n        }\n        if (load_res.filter(function (value) { return value == 'ON'; }).length > 0) {\n            res_status = 'ON';\n        } else {\n            res_status = 'OFF';\n        }\n\n        if (tracking.status_1 == 0) {\n            status = 'OFF';\n        } else {\n            if (control_v == \"2\"){ // V อ.อร\n                stop_time = '16:00:00'\n            }else{\n                stop_time = '18:00:00'\n            }\n            if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00'){\n                status = 'OFF';\n            }else{\n                if (parseFloat(data_.data.soil_in) <= parseFloat(tracking.soil_min)){\n                    status = 'ON';\n                } else if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)){\n                    status = 'OFF';\n                }else{\n                    status = res_status;\n                }\n            }\n        }\n        for (let a = 1; a <= 4; a++){ // load.length;\n            if(tracking['dripper_'+a] == \"ON\"){\n                msg_status.push(status);\n            }else{\n                msg_status.push('OFF');\n            }\n        }\n        if (log_control.toString() != msg_status.toString()) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(msg_status),\n                user: tracking.user_control,\n                soil_min: tracking.soil_min,\n                soil_max: tracking.soil_max,\n                data: Number(data_.data.soil_in),\n                data2: parseFloat(data_.data.soil_in),\n                date_time:date_time,\n            };\n            // context.set('log_control', status)\n            // if(old_nowsec != nowsec){\n                // context.set('old_nowsec', nowsec);\n                return msg;\n            // }\n        }\n    }\n}\n\n// msg.payload =tracking\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3590,
        "y": 1040,
        "wires": [
            [
                "67a60d0444f93134"
            ]
        ]
    },
    {
        "id": "fbf5c1a3f70d3dcc",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_fan",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\n// let nsec = date_time.split(\" \")[1].split(\":\");\n// let nowsec = Number(nsec[2]);\n// let old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\n\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        let status, load = [], load_res = [], msg_status = [], log_control = [], res_status;\n        for (let i = 1; i <= 4; i++) {\n            if (tracking['fan_' + i] == \"ON\") {\n                load_res.push(response['fan_' + i]);\n            }\n            load.push('fan_' + i);\n            log_control.push(response['fan_' + i]);\n        }\n        if (tracking.status_3 == 0) {\n            status = 'OFF';\n        } else {\n            if (load_res.filter(function (value) { return value == 'ON'; }).length > 0) {\n                res_status = 'ON';\n            } else {\n                res_status = 'OFF';\n            }\n\n            if (control_v == \"2\") { // V อ.อร\n                if (date_time.split(\" \")[1] > '16:00:00' || date_time.split(\" \")[1] < '07:00:00') {\n                    status = 'OFF';\n                } else {\n                    if (parseFloat(data_.data.temp_in) <= parseFloat(tracking.temp_min)) {\n                        status = 'OFF';\n                    } else if (parseFloat(data_.data.temp_in) >= parseFloat(tracking.temp_max)) {\n                        status = 'ON';\n                    } else {\n                        status = res_status;\n                    }\n                }\n            } else {\n                if (parseFloat(data_.data.temp_in) <= parseFloat(tracking.temp_min)) {\n                    status = 'OFF';\n                } else if (parseFloat(data_.data.temp_in) >= parseFloat(tracking.temp_max)) {\n                    status = 'ON';\n                } else {\n                    status = res_status;\n                }\n            }\n        }\n        for (let a = 1; a <= 4; a++){ // load.length;\n            if(tracking['fan_'+a] == \"ON\"){\n                msg_status.push(status);\n            }else{\n                msg_status.push('OFF');\n            }\n        }\n        if (log_control.toString() != msg_status.toString()) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(msg_status),\n                user: tracking.user_control,\n                temp_min: tracking.temp_min,\n                temp_max: tracking.temp_max,\n                data: Number(data_.data.temp_in),\n            };\n            // context.set('log_control', status)\n            // if(old_nowsec != nowsec){\n                // context.set('old_nowsec', nowsec);\n                return msg;\n            // }\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3570,
        "y": 1160,
        "wires": [
            [
                "67a60d0444f93134"
            ]
        ]
    },
    {
        "id": "f9ca3db70f7ac087",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_slan",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\n\nlet log_control = response['shading']; //context.get('log_control') || 'No';\nlet status = [], load = [], load_res = [], msg_status = [], a;\n\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n    a = 1\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"shading\");\n\n        if (control_v == \"2\") { // V อ.อร\n            if (tracking.status_3 == 0) { // ปิดโหมด Temp\n                status.push(status_slan('t<m'));\n                a = 3\n            } else { // เปิดโหมด Temp\n                if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                    status.push(status_slan('t<m'));\n                    a = 4\n                } else { // temp > max\n                    // จับเวลา Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(45)); //45\n                        context.set('tracking', tracking);\n                    } else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(45)); //45\n                        }\n                    }\n                    // ------------------------------------\n\n                    if (date_time.split(\" \")[1] >= '12:00:00' && date_time.split(\" \")[1] < '16:00:00') {\n                        // 12:00 - 16:00\n                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) { //<=\n                            // timw ปัจจุบัน <= time_fan\n                            status.push(status_slan('t>m'));\n                            a = 7\n                        } else {\n                            status.push('ON');\n                            a = 8\n                        }\n                    } else {\n                        // นอกช่วงเวลา 12:00 - 16:00\n                        status.push(status_slan('t>m'));\n                    }\n                }\n            }\n        } else { // No V อ.อร\n            status.push(status_slan('t<m'));\n        }\n        if (log_control != status[0]) {\n            msg.payload = {\n                sn: data_.serial_id,\n                mode: 'Tracking',\n                load: JSON.stringify(load),\n                status: JSON.stringify(status),\n                user: tracking.user_control,\n                light_min: tracking.light_min,\n                light_max: tracking.light_max,\n                ss: log_control,\n                s2: tracking.status_4\n            };\n            // context.set('log_control', status)\n\n            // if(old_nowsec != nowsec){\n            //     context.set('old_nowsec', nowsec);\n            return msg;\n            // }\n        }\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n    }\n}\n\nfunction status_slan(val) {\n    if (val == 't<m') {\n        context.set('time_fan', \"\");\n    }\n    let s_slan, n_data, stop_time;\n\n    if (tracking.status_4 == 0) { // ปิดโหมด Slan\n        s_slan = \"OFF\";\n    } else { // เปิดโหมด Slan\n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            s_slan = \"OFF\";\n        } else {\n            // if (parseFloat(tracking.light_in_mode) == 5) {\n            //     n_data = parseFloat(data_.data.light_in) / 54;\n            // } else {\n            n_data = parseFloat(data_.data.light_in) / 1000;\n            // }\n\n            if (parseFloat(n_data) <= parseFloat(tracking.light_min)) {\n                s_slan = \"OFF\"; // เปิดม่าน\n            } else if (parseFloat(n_data) >= parseFloat(tracking.light_max)) {\n                s_slan = \"ON\"; // ปิดม่าน\n            } else {\n                s_slan = log_control;\n            }\n        }\n    }\n    return s_slan;\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3580,
        "y": 1200,
        "wires": [
            [
                "67a60d0444f93134"
            ]
        ]
    },
    {
        "id": "998b21ca7a37717a",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_Foggy",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nlet log_control = response['foggy_1'];\nlet status = [], load = [], stop_time // load_res = [], msg_status = [], a;\nlet submode_, num_\n\n// msg.payload = tracking.status_2\n// return msg\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"foggy_1\");\n\n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            // กรณีนอกเวลา\n            status.push('OFF')\n            submode_ = 'out of time H&T';\n            num_ = 1;\n        } else {\n            if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                let ress = load_modeHum('t<m')\n                status.push(ress[0]);\n                num_ = 't < max ' + ress[1];\n            }\n            else { // temp > max\n                if (tracking.status_3 == 0) {\n                    let ress = load_modeHum('t>m')\n                    status.push(ress[0]);\n                    num_ = 't = off ' + ress[1];\n                }\n                else { // ON Mode Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(15)); //15\n                        context.set('tracking', tracking);\n                    }\n                    else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(15)); //15\n                        }\n                    }\n                    if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) {\n                        // time <= time_fan\n                        let ress = load_modeHum('t>m')\n                        status.push(ress[0]);\n                        num_ = 't <= 15m ' + ress[1] + ' t= ' + context.get('time_fan');\n                    } else { // หลัง 15 นาที\n                        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n                            status.push('OFF');\n                            num_ = 't > 15m | soil > m';\n                            context.set('timeON_foggy', \"\");\n                            context.set('timeOFF_foggy', \"\");\n                        }\n                        else { // Soil < Max\n                            if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max2)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | soil < m | hum >= config';\n                                context.set('timeON_foggy', \"\");\n                                context.set('timeOFF_foggy', \"\");\n                            } else { // hum < config\n                                if (context.get('timeON_foggy') == \"\" && context.get('timeOFF_foggy') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_foggy', add_time(13)); // 13\n                                        num_ = 't > 15m | soil < m | hum < config จะ on เวลา ' + add_time(13);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_foggy', add_time(2));\n                                        num_ = 't > 15m | soil < m | hum < config จะ off เวลา ' + add_time(2);\n                                    }\n                                }\n                                else {\n                                    // timeON_foggy != '' || timeOFF_foggy != ''\n                                    if (context.get('timeON_foggy') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_foggy'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_foggy', add_time(2)); // 2\n                                                context.set('timeON_foggy', \"\");\n                                                num_ = 't > 15m | soil < m | hum < config จะ off เวลา ' + add_time(2);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeON_foggy'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_foggy') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_foggy'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_foggy', \"\");\n                                                context.set('timeON_foggy', add_time(13)); // 13\n                                                num_ = 't > 15m | soil < m | hum < config จะ on เวลา ' + add_time(13);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n\n\n        let payload = {\n            'sn': data_.serial_id,\n            'mode': 'Tracking',\n            'load': JSON.stringify(load),\n            'status': JSON.stringify(status),\n            'user': tracking.user_control,\n            'soil_max': tracking.soil_max,\n            'data_soil': Number(data_.data.soil_in),\n            'hum_min': tracking.hum_min,\n            'hum_max': tracking.hum_max,\n            'hum_max2': tracking.hum_max2,\n            'data_hum': Number(data_.data.hum_in),\n            time_fan: context.get('time_fan'),\n            nt: add_time(0),\n            ONfoggy: context.get('timeON_foggy'),\n            OFFfoggy: context.get('timeOFF_foggy'),\n            // ONspray: context.get('timeON_spray'),\n            // OFFspray: context.get('timeOFF_spray'),\n            // load_resp: load_resp,\n            // submode: submode_,\n            num_: num_,\n            // z_1: load_resp.toString(),\n            // z_2: status.toString(),\n            s: (new Date(ndate + ' ' + add_time(0))).getTime() / 1000,\n            xx: (new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000,\n            zzz: context.get('status_log')\n        };\n        msg.payload = payload\n        if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n            if (log_control != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }else{\n            if (context.get('status_log') != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }\n\n\n\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n            context.set('timeON_foggy', \"\");\n            context.set('timeOFF_foggy', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n        context.set('timeON_foggy', \"\");\n        context.set('timeOFF_foggy', \"\");\n    }\n}\nfunction load_modeHum(val) {\n    if (val == 't<m') {\n        context.set('time_fan', \"\");\n    }\n    context.set('timeON_foggy', \"\");\n    context.set('timeOFF_foggy', \"\");\n    if (tracking.status_2 == 0) {\n        return ['OFF', 'h_0'];\n    }\n    else {\n        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n            return ['OFF', 'h_1'];\n        }\n        else { // Soil < soil_max\n            if (parseFloat(data_.data.hum_in) <= parseFloat(tracking.hum_min)) {\n                return ['ON', 'h_2'];\n            } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max2)) {\n                return ['OFF', 'h_3'];\n            } else {\n                return [log_control, 'h_4'];\n            }\n        }\n    }\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3580,
        "y": 1080,
        "wires": [
            [
                "67a60d0444f93134"
            ]
        ]
    },
    {
        "id": "97e2811cc00fd6fa",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "Tracking_Spray",
        "func": "let config = msg.payload;\nlet date_time = msg.timer;\nlet ndate = date_time.split(\" \")[0];\nlet ntime = date_time.split(\" \")[1].split(\":\");\n// var nsec = date_time.split(\" \")[1].split(\":\");\n// var nowsec = Number(nsec[2]);\n// var old_nowsec = context.get('old_nowsec')||0;\n// old_nowsec = Number(old_nowsec);\n\nlet tracking = config.tracking;\nlet data_ = config.data_;\nlet response = config.response;\nlet control_v = config.control_v;\nlet log_control = response['spray'];\nlet status = [], load = [], stop_time \nlet submode_, num_\n\n// msg.payload = tracking.status_2\n// return msg\nif (context.get('tracking') == undefined) {\n    context.set('tracking', tracking);\n}\nif (response.mode === 'Auto') {\n    if (config.sub_mode === 'Tracking') {\n        load.push(\"spray\");\n\n        if (context.get('log_foggy') == undefined || context.get('log_foggy') == '') {\n            context.set('log_foggy', response['foggy_1']);\n        }\n                \n        if (control_v == \"2\") { // V อ.อร\n            stop_time = '16:00:00'\n        } else {\n            stop_time = '18:00:00'\n        }\n        if (date_time.split(\" \")[1] > stop_time || date_time.split(\" \")[1] < '07:00:00') {\n            // กรณีนอกเวลา\n            status.push('OFF')\n            submode_ = 'out of time H&T';\n            num_ = 1;\n        } else {\n            if (parseFloat(data_.data.temp_in) < parseFloat(tracking.temp_max)) {\n                let ress = load_modeHum('t<m')\n                status.push(ress[0]);\n                num_ = 't < max ' + ress[1];\n            } \n            else { // temp > max\n                if (tracking.status_3 == 0) {\n                    let ress = load_modeHum('t>m')\n                    status.push(ress[0]);\n                    num_ = 't = off ' + ress[1];\n                }\n                else{ // ON Mode Temp\n                    if (JSON.stringify(context.get('tracking')) != JSON.stringify(tracking)) {\n                        context.set('time_fan', add_time(15)); //15\n                        context.set('tracking', tracking);\n                    }\n                    else {\n                        if (context.get('time_fan') == \"\" || context.get('time_fan') == undefined) {\n                            context.set('time_fan', add_time(15)); //15\n                        }\n                    }\n                    if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) <= ((new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000)) {\n                        // time <= time_fan\n                        let ress = load_modeHum('t>m')\n                        status.push(ress[0]);\n                        num_ = 't <= 15m ' + ress[1] + ' t= ' + context.get('time_fan');\n                    } else { // หลัง 15 นาที\n                        // ------------------------------------\n                        if (parseFloat(data_.data.soil_in) >= parseFloat(tracking.soil_max)) {\n                            if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum >= max';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                                context.set('log_foggy', 'OFF')\n                            } else { // hum < config\n                                if (context.get('timeON_spray') == \"\" && context.get('timeOFF_spray') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                    }\n                                }\n                                else {\n                                    // timeON_spray != '' || timeOFF_spray != ''\n                                    if (context.get('timeON_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_spray', add_time(5)); // 5\n                                                context.set('timeON_spray', \"\");\n                                                num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | hum >= config | time <= timeON_spray'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_spray', \"\");\n                                                context.set('timeON_spray', add_time(5)); // 5\n                                                num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }else{\n                            // soil < soil_Max\n                            if (parseFloat(data_.data.hum_in) < parseFloat(tracking.hum_max2)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum < config';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                            } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n                                status.push('OFF');\n                                num_ = 't > 15m | hum >= max';\n                                context.set('timeON_spray', \"\");\n                                context.set('timeOFF_spray', \"\");\n                                context.set('log_foggy', 'OFF')\n                            } else { // hum < config\n                                if (context.get('timeON_spray') == \"\" && context.get('timeOFF_spray') == \"\") {\n                                    if (log_control == 'ON') {\n                                        status.push('OFF');\n                                        context.set('timeON_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                    }\n                                    else {\n                                        status.push('ON');\n                                        context.set('timeOFF_spray', add_time(5)); // 5\n                                        num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                    }\n                                }\n                                else {\n                                    // timeON_spray != '' || timeOFF_spray != ''\n                                    if (context.get('timeON_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeON_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'OFF') {\n                                                status.push('ON');\n                                                context.set('timeOFF_spray', add_time(5)); // 5\n                                                context.set('timeON_spray', \"\");\n                                                num_ = 't > 15m | hum >= config จะ off เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | hum >= config | time <= timeON_spray'\n                                        }\n                                    }\n                                    else if (context.get('timeOFF_spray') != '') {\n                                        if (((new Date(ndate + ' ' + add_time(0))).getTime() / 1000) > ((new Date(ndate + ' ' + context.get('timeOFF_spray'))).getTime() / 1000)) {\n                                            if (context.get('status_log') == 'ON') {\n                                                status.push('OFF');\n                                                context.set('timeOFF_spray', \"\");\n                                                context.set('timeON_spray', add_time(5)); // 5\n                                                num_ = 't > 15m | hum >= config จะ on เวลา ' + add_time(5);\n                                            }\n                                        } else {\n                                            // ON OFF\n                                            if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n                                                status.push(log_control);\n                                            } else {\n                                                status.push(context.get('status_log'));\n                                            }\n                                            num_ = 't > 15m | soil < m | hum < config | time <= timeOFF_foggy'\n                                        }\n                                    }\n                                    else {\n                                        status.push(log_control);\n                                        num_ = 13;\n                                    }\n                                }\n                            }\n                        }\n                        // ==================================\n                    }\n                }\n            }\n        }\n       \n        let payload = {\n            'sn': data_.serial_id,\n            'mode': 'Tracking',\n            'load': JSON.stringify(load),\n            'status': JSON.stringify(status),\n            'user': tracking.user_control,\n            'soil_max': tracking.soil_max,\n            'data_soil': Number(data_.data.soil_in),\n            'hum_min': tracking.hum_min,\n            'hum_max': tracking.hum_max,\n            'hum_max2': tracking.hum_max2,\n            'data_hum': Number(data_.data.hum_in),\n            time_fan: context.get('time_fan'),\n            nt: add_time(0),\n            // ONfoggy: context.get('timeON_foggy'),\n            // OFFfoggy: context.get('timeOFF_foggy'),\n            ONspray: context.get('timeON_spray'),\n            OFFspray: context.get('timeOFF_spray'),\n            // load_resp: load_resp,\n            // submode: submode_,\n            num_: num_,\n            // z_1: load_resp.toString(),\n            // z_2: status.toString(),\n            s: (new Date(ndate + ' ' + add_time(0))).getTime() / 1000,\n            xx: (new Date(ndate + ' ' + context.get('time_fan'))).getTime() / 1000,\n            zzz: context.get('status_log'),\n            log_foggy: context.get('log_foggy')\n        };\n        msg.payload = payload\n        if (context.get('status_log') == \"\" || context.get('status_log') == undefined) {\n            if (log_control != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }else{\n            if (context.get('status_log') != status[0]) {\n                context.set('status_log', status[0])\n                return msg;\n            }\n        }\n    } else {\n        if (context.get('time_fan') != '') {\n            context.set('time_fan', \"\");\n            context.set('timeON_spray', \"\");\n            context.set('timeOFF_spray', \"\");\n        }\n    }\n} else {\n    if (context.get('time_fan') != '') {\n        context.set('time_fan', \"\");\n        context.set('timeON_spray', \"\");\n        context.set('timeOFF_spray', \"\");\n    }\n}\nfunction load_modeHum(val) {\n    if(val == 't<m'){\n        context.set('time_fan', \"\");\n    }\n    context.set('timeON_spray', \"\");\n    context.set('timeOFF_spray', \"\");\n    if (tracking.status_2 == 0) {\n        return ['OFF', 'h_0'];\n    }\n    else {\n        if (parseFloat(data_.data.hum_in) < parseFloat(tracking.hum_max2)) {\n            if (parseFloat(data_.data.hum_in) <= parseFloat(tracking.hum_min)) {\n                context.set('log_foggy', 'ON')\n            }\n            return ['OFF', 'h_1'];\n        } else if (parseFloat(data_.data.hum_in) >= parseFloat(tracking.hum_max)) {\n            context.set('log_foggy', 'OFF')\n            return ['OFF', 'h_2'];\n        } else { // hum >= config && < max\n            if (context.get('log_foggy') == 'ON') {\n                return ['ON', 'h_3'];\n            } else {\n                return ['OFF', 'h_4'];\n            }\n        }\n    }\n}\n\nfunction add_time(val) {\n    let hour = Number(ntime[0])\n    let minutes = Number(ntime[1])\n    let n_minutes = Number(minutes) + Number(val);\n    let n_hour, now_hour, now_minures;\n    if (n_minutes >= 60) {\n        if ((n_minutes - 60) < 10) {\n            now_minures = '0' + (n_minutes - 60);\n        } else {\n            now_minures = (n_minutes - 60);\n        }\n        n_hour = (Number(hour) + 1)\n        if (n_hour < 10) {\n            now_hour = '0' + n_hour;\n        } else {\n            now_hour = n_hour;\n        }\n    } else { // นาทีน้อยกว่า 60\n        if (n_minutes < 10) {\n            now_minures = '0' + n_minutes;\n        } else {\n            now_minures = n_minutes;\n        }\n        if (hour < 10) {\n            now_hour = '0' + hour;\n        } else {\n            now_hour = hour;\n        }\n    }\n    return now_hour + ':' + now_minures;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3580,
        "y": 1120,
        "wires": [
            [
                "67a60d0444f93134"
            ]
        ]
    },
    {
        "id": "9c78c9c83239dc44",
        "type": "mqtt in",
        "z": "96f306faac18dafe",
        "name": "",
        "topic": "connect/status/TUSMT007",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 2919.0000038146973,
        "y": 999.0000057220459,
        "wires": [
            [
                "e47660bcdc091582"
            ]
        ]
    },
    {
        "id": "e47660bcdc091582",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "topic",
        "func": "msg.payload = msg.payload;\nmsg.topic = \"get_status\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3119.0000038146973,
        "y": 999.0000057220459,
        "wires": [
            [
                "e2c10b384f111818"
            ]
        ]
    },
    {
        "id": "e2c10b384f111818",
        "type": "function",
        "z": "96f306faac18dafe",
        "name": "send_load_to_mqtt",
        "func": "if (msg.topic === \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic === \"get_data\") {\n    context.set('get_data', msg.payload);\n}\nlet get_status = context.get('get_status') || 0;\nlet get_data = context.get('get_data') || 0;\nif (get_status == 0 || get_status === 'offline') {\n    return false;\n}\nif (get_data == 0) {\n    return false;\n}\n\n\n// let get_data = msg.payload;\nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/mqtt_load_auto.php\";\nmsg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\nmsg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\nmsg.payload = {\n    sn: get_data.sn,\n    mode: get_data.mode,\n    load: get_data.load,\n    status: get_data.status,\n    user: get_data.user\n}\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4010,
        "y": 1000,
        "wires": [
            [
                "de2bc21e464199c1"
            ]
        ]
    }
]