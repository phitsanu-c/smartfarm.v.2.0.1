[
    {
        "id": "9ef40e3051cd8cc7",
        "type": "tab",
        "label": "Filter_&_control_tu",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9ec4714069b3f5ce",
        "type": "tab",
        "label": "insert_data_tu",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8116f63f.e78778",
        "type": "mqtt-broker",
        "name": "new_DECC_Bigdata",
        "broker": "203.154.83.117",
        "port": "4563",
        "clientid": "node-red__",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "95872f6831c2632c",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "Change Topic to \"config\"",
        "func": "var output = msg.payload;\nmsg.topic = \"config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 60,
        "wires": [
            [
                "046237806a264344",
                "867f22ba9d25290f",
                "9d76b5b515a5bc7d",
                "102895429242dcac",
                "4d26f4fa396edb80",
                "afb88d734cacd235",
                "212cda779db4b3d7"
            ]
        ]
    },
    {
        "id": "f94725a2776d3fab",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "Initial Last Data from DB",
        "func": "    var output = msg.payload;\n    // var pase_json = output.control_status;\n    // var parseJSON = JSON.parse(output);\n    // msg.payload =output;\n    \nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/get_sensor_log.php\"; \nmsg.payload = {house_master:output}\nmsg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\nmsg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 60,
        "wires": [
            [
                "a5d7d53d48201b00"
            ]
        ]
    },
    {
        "id": "19ca9a77027a8cde",
        "type": "inject",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 90,
        "y": 60,
        "wires": [
            [
                "f94725a2776d3fab"
            ]
        ]
    },
    {
        "id": "63a2b70a75a59b73",
        "type": "mqtt out",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT001/data_sensor/filter",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1180,
        "y": 100,
        "wires": []
    },
    {
        "id": "b18c02c377c84d45",
        "type": "mqtt out",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT001/data_sensor/filter_eq",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1200,
        "y": 140,
        "wires": []
    },
    {
        "id": "a5b28f0b86372349",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT001/data_sensor/realtime",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 190,
        "y": 100,
        "wires": [
            [
                "21d88a2e6aeb9893"
            ]
        ]
    },
    {
        "id": "653ad7edece52e7d",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT001/data_sensor/equation",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 330,
        "y": 180,
        "wires": [
            [
                "233024e407aed99a"
            ]
        ]
    },
    {
        "id": "233024e407aed99a",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_equation\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 180,
        "wires": [
            [
                "f9bdc65a35c6eaa8"
            ]
        ]
    },
    {
        "id": "490cc85f211e66ec",
        "type": "mqtt out",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT002/data_sensor/filter",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1180,
        "y": 260,
        "wires": []
    },
    {
        "id": "cfba80f2fff09812",
        "type": "mqtt out",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT002/data_sensor/filter_eq",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1200,
        "y": 300,
        "wires": []
    },
    {
        "id": "fced6e8a37763168",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT002/data_sensor/realtime",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 190,
        "y": 260,
        "wires": [
            [
                "a5fdf6f27e28a99e"
            ]
        ]
    },
    {
        "id": "7b12de8c9ee79c99",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT002/data_sensor/equation",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 330,
        "y": 340,
        "wires": [
            [
                "2e9988a09e1e1783"
            ]
        ]
    },
    {
        "id": "2e9988a09e1e1783",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_equation\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 340,
        "wires": [
            [
                "5a456b218e6357fd"
            ]
        ]
    },
    {
        "id": "e6441d02d3a6e708",
        "type": "mqtt out",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT003/data_sensor/filter",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1180,
        "y": 420,
        "wires": []
    },
    {
        "id": "e9112214efdea2fe",
        "type": "mqtt out",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT003/data_sensor/filter_eq",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1200,
        "y": 460,
        "wires": []
    },
    {
        "id": "8c93a1f913695d36",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT003/data_sensor/realtime",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 190,
        "y": 420,
        "wires": [
            [
                "e312266b2b26a3d5"
            ]
        ]
    },
    {
        "id": "15fc386d13158899",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT003/data_sensor/equation",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 330,
        "y": 500,
        "wires": [
            [
                "a1dc1042616efa2a"
            ]
        ]
    },
    {
        "id": "a1dc1042616efa2a",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_equation\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 500,
        "wires": [
            [
                "0edd4f7fd9aab01c"
            ]
        ]
    },
    {
        "id": "4c683431943e2ebc",
        "type": "mqtt out",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT004/data_sensor/filter",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1180,
        "y": 580,
        "wires": []
    },
    {
        "id": "89c01bb5523cf894",
        "type": "mqtt out",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT004/data_sensor/filter_eq",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1200,
        "y": 620,
        "wires": []
    },
    {
        "id": "eeccd9b9aa949aca",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT004/data_sensor/realtime",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 190,
        "y": 580,
        "wires": [
            [
                "c8599bbac23a850d"
            ]
        ]
    },
    {
        "id": "bee094fb8ea752ca",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT004/data_sensor/equation",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 330,
        "y": 660,
        "wires": [
            [
                "a888bfadc9f0e4cf"
            ]
        ]
    },
    {
        "id": "a888bfadc9f0e4cf",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_equation\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 660,
        "wires": [
            [
                "99fe0831eb87afd4"
            ]
        ]
    },
    {
        "id": "0b471e8bafe66d0b",
        "type": "mqtt out",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT005/data_sensor/filter",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1180,
        "y": 740,
        "wires": []
    },
    {
        "id": "98fa1dac10b8244a",
        "type": "mqtt out",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT005/data_sensor/filter_eq",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1200,
        "y": 780,
        "wires": []
    },
    {
        "id": "31369b7acf40b522",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT005/data_sensor/realtime",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 190,
        "y": 740,
        "wires": [
            [
                "03d904298cb19f4e"
            ]
        ]
    },
    {
        "id": "bd23382b69e4eace",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT005/data_sensor/equation",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 330,
        "y": 820,
        "wires": [
            [
                "e955a7e6b7c7d0af"
            ]
        ]
    },
    {
        "id": "e955a7e6b7c7d0af",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_equation\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 820,
        "wires": [
            [
                "485b29611edf7568"
            ]
        ]
    },
    {
        "id": "7cf9a3fd7836e0d5",
        "type": "mqtt out",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT006/data_sensor/filter",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1180,
        "y": 900,
        "wires": []
    },
    {
        "id": "1bb9ab26892241ae",
        "type": "mqtt out",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT006/data_sensor/filter_eq",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1200,
        "y": 940,
        "wires": []
    },
    {
        "id": "1b689eed4994617e",
        "type": "moment",
        "z": "9ef40e3051cd8cc7",
        "name": "timmer",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "hours",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "C",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 770,
        "y": 940,
        "wires": [
            [
                "b38abb6804878cf4",
                "8167e41bd5c08ede"
            ]
        ]
    },
    {
        "id": "a4e4dac95ab706f1",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT006/data_sensor/realtime",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 190,
        "y": 900,
        "wires": [
            [
                "6ee4444f5c8dd8df"
            ]
        ]
    },
    {
        "id": "fbed5ee92fbc576d",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT006/data_sensor/equation",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 330,
        "y": 980,
        "wires": [
            [
                "491365cb6d96dc7a"
            ]
        ]
    },
    {
        "id": "491365cb6d96dc7a",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_equation\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 980,
        "wires": [
            [
                "fc1884a0f703a195"
            ]
        ]
    },
    {
        "id": "3466c37a03c2f5fb",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "topic",
        "func": "let timestamp = msg.timer;\nlet ntime = timestamp.split(\" \");\nlet nowtime = ntime[1];\nlet nowdate = ntime[0];\n\nlet output = msg.payload;\nlet result = JSON.parse(output);\nlet temp_out, hum_out, light_out, temp_in, hum_in, light_in, soil_in;\nif (result.data.temp_out === undefined) { temp_out = 0; } else { temp_out = result.data.temp_out; }\nif (result.data.hum_out === undefined) { hum_out = 0; } else { hum_out = result.data.hum_out; }\nif (result.data.light_out === undefined) { light_out = 0; } else { light_out = result.data.light_out; }\nif (result.data.temp_in === undefined) { temp_in = 0; } else { temp_in = result.data.temp_in; }\nif (result.data.hum_in === undefined) { hum_in = 0; } else { hum_in = result.data.hum_in; }\nif (result.data.light_in === undefined) { light_in = 0; } else { light_in = result.data.light_in; }\nif (result.data.soil_in === undefined) { soil_in = 0; } else { soil_in = result.data.soil_in; }\n\n\nlet count_ = context.get('count_') || 0;\n\nif (count_ >= 3) {\n    context.set('count_', 0)\n\n    let jsonstring = {};\n    jsonstring = {\n        \"serial_id\": result.serial_id,\n        \"date\": nowdate,\n        \"time\": nowtime,\n        \"data\": {\n            \"temp_out\": temp_out,\n            \"hum_out\": hum_out,\n            \"light_out\": light_out,\n            \"temp_in\": temp_in,\n            \"hum_in\": hum_in,\n            \"light_in\": light_in,\n            \"soil_in\": soil_in\n        }\n    };\n\n    msg.payload = jsonstring //JSON.stringify(jsonstring);\n    msg.topic = \"mqtt_data\";\n    return msg;\n} else {\n    let nminute = nowtime.split(\":\");\n    let nowminute = Number(nminute[1]);\n    let old_minute = context.get('old_nowminute') || 0;\n    old_minute = Number(old_minute)\n\n    if (old_minute != nowminute) {\n        context.set('old_nowminute', nowminute);\n        context.set('count_', 0);\n    } else {\n        context.set('count_', count_ + 1);\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 900,
        "wires": [
            [
                "b38abb6804878cf4",
                "e1258404c280379d",
                "fc1884a0f703a195"
            ]
        ]
    },
    {
        "id": "6ee4444f5c8dd8df",
        "type": "moment",
        "z": "9ef40e3051cd8cc7",
        "name": "timmer",
        "topic": "time_",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "hours",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "C",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 410,
        "y": 900,
        "wires": [
            [
                "3466c37a03c2f5fb"
            ]
        ]
    },
    {
        "id": "b38abb6804878cf4",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "filter data",
        "func": "\nvar output = msg.payload;\n\nvar timestamp = msg.timer;\nvar ntime = timestamp.split(\" \");\nvar nowtime = ntime[1];\nvar nowdate = ntime[0];\n\nvar nminute = nowtime.split(\":\");\nvar nowminute = Number(nminute[1]);\nvar old_minute = context.get('old_nowminute')||0;\nold_minute = Number(old_minute)\n\nif(old_minute != nowminute){\n    context.set('old_nowminute',nowminute);\n\n    msg.payload = output // JSON.stringify(jsonstring);\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 900,
        "wires": [
            [
                "7cf9a3fd7836e0d5"
            ]
        ]
    },
    {
        "id": "8f69349329b49449",
        "type": "mqtt out",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT007/data_sensor/filter",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1180,
        "y": 1100,
        "wires": []
    },
    {
        "id": "c6daa0b6e82fbb7b",
        "type": "mqtt out",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT007/data_sensor/filter_eq",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1200,
        "y": 1140,
        "wires": []
    },
    {
        "id": "106e0658b9e7291c",
        "type": "moment",
        "z": "9ef40e3051cd8cc7",
        "name": "timmer",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "hours",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "C",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 770,
        "y": 1140,
        "wires": [
            [
                "c99a39aa4195a1e4",
                "0c22ec7466b62dca"
            ]
        ]
    },
    {
        "id": "952876a3b0622091",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT007/data_sensor/realtime",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 190,
        "y": 1100,
        "wires": [
            [
                "3471d1a9b00a37af"
            ]
        ]
    },
    {
        "id": "ec30d3c207b4409c",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "TUSMT007/data_sensor/equation",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 330,
        "y": 1180,
        "wires": [
            [
                "7e3f9db7142a74e1"
            ]
        ]
    },
    {
        "id": "7e3f9db7142a74e1",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_equation\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1180,
        "wires": [
            [
                "aa2873351d93839e"
            ]
        ]
    },
    {
        "id": "13e91bbd7bbe9f09",
        "type": "debug",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1180,
        "wires": []
    },
    {
        "id": "3471d1a9b00a37af",
        "type": "moment",
        "z": "9ef40e3051cd8cc7",
        "name": "timmer",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "hours",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "C",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 410,
        "y": 1100,
        "wires": [
            [
                "e7802ad4c9cbf86e"
            ]
        ]
    },
    {
        "id": "e1258404c280379d",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"get_mqtt_6\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1060,
        "wires": [
            [
                "e7802ad4c9cbf86e"
            ]
        ]
    },
    {
        "id": "e7802ad4c9cbf86e",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "topic",
        "func": "let timestamp = msg.timer;\nlet ntime = timestamp.split(\" \");\nlet nowtime = ntime[1];\nlet nowdate = ntime[0];\n\nif (msg.topic == \"get_mqtt_6\"){\n    context.set('get_mqtt_6',msg.payload);\n}\nif (msg.topic == \"TUSMT007/data_sensor/realtime\"){\n    context.set('get_d',msg.payload);\n}\n\nlet get_mqtt_6 = context.get('get_mqtt_6') || 'n';\nlet output = context.get('get_d') || 'n';\nif(get_mqtt_6 == 'n'){\n    return false;\n}\nif(output == 'n'){\n    return false;\n}\nlet result = JSON.parse(output);\nlet temp_out, hum_out, light_out, temp_in, hum_in, light_in, soil_in;\nif(get_mqtt_6.data.temp_out  === undefined ){ temp_out  = 0; }else{ temp_out  = get_mqtt_6.data.temp_out; }\nif(get_mqtt_6.data.hum_out   === undefined ){ hum_out   = 0; }else{ hum_out   = get_mqtt_6.data.hum_out; }\nif(get_mqtt_6.data.light_out === undefined ){ light_out = 0; }else{ light_out = get_mqtt_6.data.light_out; }\nif(result.data.temp_in   === undefined ){ temp_in   = 0; }else{ temp_in   = result.data.temp_in; }\nif(result.data.hum_in    === undefined ){ hum_in    = 0; }else{ hum_in    = result.data.hum_in; }\nif(result.data.light_in  === undefined ){ light_in  = 0; }else{ light_in  = result.data.light_in; }\nif(result.data.soil_in   === undefined ){ soil_in   = 0; }else{ soil_in   = result.data.soil_in; }\n\n\nlet count_ = context.get('count_') || 0;\n\nif (count_ >= 3) {\n    context.set('count_', 0)\n\n\n    let jsonstring = {};\n    jsonstring = {\n        \"serial_id\": result.serial_id,\n        \"date\": nowdate,\n        \"time\": nowtime,\n        \"data\": {\n            \"temp_out\": temp_out,\n            \"hum_out\": hum_out,\n            \"light_out\": light_out,\n            \"temp_in\": temp_in,\n            \"hum_in\": hum_in,\n            \"light_in\": light_in,\n            \"soil_in\": soil_in\n        }\n    };\n\n    msg.payload = jsonstring //JSON.stringify(jsonstring);\n    msg.topic = \"mqtt_data\";\n    return msg;\n} else {\n    let nminute = nowtime.split(\":\");\n    let nowminute = Number(nminute[1]);\n    let old_minute = context.get('old_nowminute') || 0;\n    old_minute = Number(old_minute)\n\n    if (old_minute != nowminute) {\n        context.set('old_nowminute', nowminute);\n        context.set('count_', 0);\n    } else {\n        context.set('count_', count_ + 1);\n    }\n}\n\n\n\n\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1100,
        "wires": [
            [
                "c99a39aa4195a1e4",
                "aa2873351d93839e"
            ]
        ]
    },
    {
        "id": "c99a39aa4195a1e4",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "filter data",
        "func": "\nvar output = msg.payload;\n\nvar timestamp = msg.timer;\nvar ntime = timestamp.split(\" \");\nvar nowtime = ntime[1];\nvar nowdate = ntime[0];\n\nvar nminute = nowtime.split(\":\");\nvar nowminute = Number(nminute[1]);\nvar old_minute = context.get('old_nowminute')||0;\nold_minute = Number(old_minute)\n\nif(old_minute != nowminute){\n    context.set('old_nowminute',nowminute);\n\n    msg.payload = output // JSON.stringify(jsonstring);\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1100,
        "wires": [
            [
                "8f69349329b49449"
            ]
        ]
    },
    {
        "id": "03d904298cb19f4e",
        "type": "moment",
        "z": "9ef40e3051cd8cc7",
        "name": "timmer",
        "topic": "time_",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "hours",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "C",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 410,
        "y": 740,
        "wires": [
            [
                "6706f956b8b16c27"
            ]
        ]
    },
    {
        "id": "6706f956b8b16c27",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "topic",
        "func": "let timestamp = msg.timer;\nlet ntime = timestamp.split(\" \");\nlet nowtime = ntime[1];\nlet nowdate = ntime[0];\n\nlet output = msg.payload;\nlet result = JSON.parse(output);\nlet temp_out, hum_out, light_out, temp_in, hum_in, light_in, soil_in;\nif (result.data.temp_out === undefined) { temp_out = 0; } else { temp_out = result.data.temp_out; }\nif (result.data.hum_out === undefined) { hum_out = 0; } else { hum_out = result.data.hum_out; }\nif (result.data.light_out === undefined) { light_out = 0; } else { light_out = result.data.light_out; }\nif (result.data.temp_in === undefined) { temp_in = 0; } else { temp_in = result.data.temp_in; }\nif (result.data.hum_in === undefined) { hum_in = 0; } else { hum_in = result.data.hum_in; }\nif (result.data.light_in === undefined) { light_in = 0; } else { light_in = result.data.light_in; }\nif (result.data.soil_in === undefined) { soil_in = 0; } else { soil_in = result.data.soil_in; }\n\n\nlet count_ = context.get('count_') || 0;\n\nif (count_ >= 3) {\n    context.set('count_', 0)\n\n\n    let jsonstring = {};\n    jsonstring = {\n        \"serial_id\": result.serial_id,\n        \"date\": nowdate,\n        \"time\": nowtime,\n        \"data\": {\n            \"temp_out\": temp_out,\n            \"hum_out\": hum_out,\n            \"light_out\": light_out,\n            \"temp_in\": temp_in,\n            \"hum_in\": hum_in,\n            \"light_in\": light_in,\n            \"soil_in\": soil_in\n        }\n    };\n\n    msg.payload = jsonstring //JSON.stringify(jsonstring);\n    msg.topic = \"mqtt_data\";\n    return msg;\n} else {\n    let nminute = nowtime.split(\":\");\n    let nowminute = Number(nminute[1]);\n    let old_minute = context.get('old_nowminute') || 0;\n    old_minute = Number(old_minute)\n\n    if (old_minute != nowminute) {\n        context.set('old_nowminute', nowminute);\n        context.set('count_', 0);\n    } else {\n        context.set('count_', count_ + 1);\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 740,
        "wires": [
            [
                "746864b2b0413a03",
                "485b29611edf7568"
            ]
        ]
    },
    {
        "id": "d1e71a55c765eb37",
        "type": "moment",
        "z": "9ef40e3051cd8cc7",
        "name": "timmer",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "hours",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "C",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 770,
        "y": 780,
        "wires": [
            [
                "746864b2b0413a03",
                "81129df9fc083c54"
            ]
        ]
    },
    {
        "id": "746864b2b0413a03",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "filter data",
        "func": "\nvar output = msg.payload;\n\nvar timestamp = msg.timer;\nvar ntime = timestamp.split(\" \");\nvar nowtime = ntime[1];\nvar nowdate = ntime[0];\n\nvar nminute = nowtime.split(\":\");\nvar nowminute = Number(nminute[1]);\nvar old_minute = context.get('old_nowminute')||0;\nold_minute = Number(old_minute)\n\nif(old_minute != nowminute){\n    context.set('old_nowminute',nowminute);\n\n    msg.payload = output // JSON.stringify(jsonstring);\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 740,
        "wires": [
            [
                "0b471e8bafe66d0b"
            ]
        ]
    },
    {
        "id": "78055cd3e7ad0d06",
        "type": "moment",
        "z": "9ef40e3051cd8cc7",
        "name": "timmer",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "hours",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "C",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 770,
        "y": 620,
        "wires": [
            [
                "caa63efad7873a7b",
                "bc2676e305ab8b97"
            ]
        ]
    },
    {
        "id": "f088858b78c5b16d",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "topic",
        "func": "let timestamp = msg.timer;\nlet ntime = timestamp.split(\" \");\nlet nowtime = ntime[1];\nlet nowdate = ntime[0];\n\nlet output = msg.payload;\nlet result = JSON.parse(output);\nlet temp_out, hum_out, light_out, temp_in, hum_in, light_in, soil_in;\nif (result.data.temp_out === undefined) { temp_out = 0; } else { temp_out = result.data.temp_out; }\nif (result.data.hum_out === undefined) { hum_out = 0; } else { hum_out = result.data.hum_out; }\nif (result.data.light_out === undefined) { light_out = 0; } else { light_out = result.data.light_out; }\nif (result.data.temp_in === undefined) { temp_in = 0; } else { temp_in = result.data.temp_in; }\nif (result.data.hum_in === undefined) { hum_in = 0; } else { hum_in = result.data.hum_in; }\nif (result.data.light_in === undefined) { light_in = 0; } else { light_in = result.data.light_in; }\nif (result.data.soil_in === undefined) { soil_in = 0; } else { soil_in = result.data.soil_in; }\n\n\nlet count_ = context.get('count_') || 0;\n\nif (count_ >= 3) {\n    context.set('count_', 0)\n\n    let jsonstring = {};\n    jsonstring = {\n        \"serial_id\": result.serial_id,\n        \"date\": nowdate,\n        \"time\": nowtime,\n        \"data\": {\n            \"temp_out\": temp_out,\n            \"hum_out\": hum_out,\n            \"light_out\": light_out,\n            \"temp_in\": temp_in,\n            \"hum_in\": hum_in,\n            \"light_in\": light_in,\n            \"soil_in\": soil_in\n        }\n    };\n\n    msg.payload = jsonstring //JSON.stringify(jsonstring);\n    msg.topic = \"mqtt_data\";\n    return msg;\n} else {\n    let nminute = nowtime.split(\":\");\n    let nowminute = Number(nminute[1]);\n    let old_minute = context.get('old_nowminute') || 0;\n    old_minute = Number(old_minute)\n\n    if (old_minute != nowminute) {\n        context.set('old_nowminute', nowminute);\n        context.set('count_', 0);\n    } else {\n        context.set('count_', count_ + 1);\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 580,
        "wires": [
            [
                "caa63efad7873a7b",
                "99fe0831eb87afd4"
            ]
        ]
    },
    {
        "id": "caa63efad7873a7b",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "filter data",
        "func": "\nvar output = msg.payload;\n\nvar timestamp = msg.timer;\nvar ntime = timestamp.split(\" \");\nvar nowtime = ntime[1];\nvar nowdate = ntime[0];\n\nvar nminute = nowtime.split(\":\");\nvar nowminute = Number(nminute[1]);\nvar old_minute = context.get('old_nowminute')||0;\nold_minute = Number(old_minute)\n\nif(old_minute != nowminute){\n    context.set('old_nowminute',nowminute);\n\n    msg.payload = output // JSON.stringify(jsonstring);\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 580,
        "wires": [
            [
                "4c683431943e2ebc"
            ]
        ]
    },
    {
        "id": "c8599bbac23a850d",
        "type": "moment",
        "z": "9ef40e3051cd8cc7",
        "name": "timmer",
        "topic": "time_",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "hours",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "C",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 410,
        "y": 580,
        "wires": [
            [
                "f088858b78c5b16d"
            ]
        ]
    },
    {
        "id": "29ed3412ecbaa932",
        "type": "moment",
        "z": "9ef40e3051cd8cc7",
        "name": "timmer",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "hours",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "C",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 770,
        "y": 460,
        "wires": [
            [
                "5a26a9430da5cebb",
                "db82214066b0f77d"
            ]
        ]
    },
    {
        "id": "73960ad5bdbf9c3b",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "topic",
        "func": "let timestamp = msg.timer;\nlet ntime = timestamp.split(\" \");\nlet nowtime = ntime[1];\nlet nowdate = ntime[0];\n\nlet output = msg.payload;\nlet result = JSON.parse(output);\nlet temp_out, hum_out, light_out, temp_in, hum_in, light_in, soil_in;\nif (result.data.temp_out === undefined) { temp_out = 0; } else { temp_out = result.data.temp_out; }\nif (result.data.hum_out === undefined) { hum_out = 0; } else { hum_out = result.data.hum_out; }\nif (result.data.light_out === undefined) { light_out = 0; } else { light_out = result.data.light_out; }\nif (result.data.temp_in === undefined) { temp_in = 0; } else { temp_in = result.data.temp_in; }\nif (result.data.hum_in === undefined) { hum_in = 0; } else { hum_in = result.data.hum_in; }\nif (result.data.light_in === undefined) { light_in = 0; } else { light_in = result.data.light_in; }\nif (result.data.soil_in === undefined) { soil_in = 0; } else { soil_in = result.data.soil_in; }\n\n\nlet count_ = context.get('count_') || 0;\n\nif (count_ >= 3) {\n    context.set('count_', 0)\n\n\n    let jsonstring = {};\n    jsonstring = {\n        \"serial_id\": result.serial_id,\n        \"date\": nowdate,\n        \"time\": nowtime,\n        \"data\": {\n            \"temp_out\": temp_out,\n            \"hum_out\": hum_out,\n            \"light_out\": light_out,\n            \"temp_in\": temp_in,\n            \"hum_in\": hum_in,\n            \"light_in\": light_in,\n            \"soil_in\": soil_in\n        }\n    };\n\n    msg.payload = jsonstring //JSON.stringify(jsonstring);\n    msg.topic = \"mqtt_data\";\n    return msg;\n} else {\n    let nminute = nowtime.split(\":\");\n    let nowminute = Number(nminute[1]);\n    let old_minute = context.get('old_nowminute') || 0;\n    old_minute = Number(old_minute)\n\n    if (old_minute != nowminute) {\n        context.set('old_nowminute', nowminute);\n        context.set('count_', 0);\n    } else {\n        context.set('count_', count_ + 1);\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 420,
        "wires": [
            [
                "5a26a9430da5cebb",
                "0edd4f7fd9aab01c"
            ]
        ]
    },
    {
        "id": "5a26a9430da5cebb",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "filter data",
        "func": "\nvar output = msg.payload;\n\nvar timestamp = msg.timer;\nvar ntime = timestamp.split(\" \");\nvar nowtime = ntime[1];\nvar nowdate = ntime[0];\n\nvar nminute = nowtime.split(\":\");\nvar nowminute = Number(nminute[1]);\nvar old_minute = context.get('old_nowminute')||0;\nold_minute = Number(old_minute)\n\nif(old_minute != nowminute){\n    context.set('old_nowminute',nowminute);\n\n    msg.payload = output // JSON.stringify(jsonstring);\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 420,
        "wires": [
            [
                "e6441d02d3a6e708"
            ]
        ]
    },
    {
        "id": "e312266b2b26a3d5",
        "type": "moment",
        "z": "9ef40e3051cd8cc7",
        "name": "timmer",
        "topic": "time_",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "hours",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "C",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 410,
        "y": 420,
        "wires": [
            [
                "73960ad5bdbf9c3b"
            ]
        ]
    },
    {
        "id": "96d35319f5e12c7b",
        "type": "moment",
        "z": "9ef40e3051cd8cc7",
        "name": "timmer",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "hours",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "C",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 770,
        "y": 300,
        "wires": [
            [
                "585b021007ede7f2",
                "8f8df5d7c14ff6a2"
            ]
        ]
    },
    {
        "id": "c59db05bd354f52d",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "topic",
        "func": "let timestamp = msg.timer;\nlet ntime = timestamp.split(\" \");\nlet nowtime = ntime[1];\nlet nowdate = ntime[0];\n\nlet output = msg.payload;\nlet result = JSON.parse(output);\nlet temp_out, hum_out, light_out, temp_in, hum_in, light_in, soil_in;\nif (result.data.temp_out === undefined) { temp_out = 0; } else { temp_out = result.data.temp_out; }\nif (result.data.hum_out === undefined) { hum_out = 0; } else { hum_out = result.data.hum_out; }\nif (result.data.light_out === undefined) { light_out = 0; } else { light_out = result.data.light_out; }\nif (result.data.temp_in === undefined) { temp_in = 0; } else { temp_in = result.data.temp_in; }\nif (result.data.hum_in === undefined) { hum_in = 0; } else { hum_in = result.data.hum_in; }\nif (result.data.light_in === undefined) { light_in = 0; } else { light_in = result.data.light_in; }\nif (result.data.soil_in === undefined) { soil_in = 0; } else { soil_in = result.data.soil_in; }\n\n\nlet count_ = context.get('count_') || 0;\n\nif (count_ >= 3) {\n    context.set('count_', 0)\n\n    let jsonstring = {};\n    jsonstring = {\n        \"serial_id\": result.serial_id,\n        \"date\": nowdate,\n        \"time\": nowtime,\n        \"data\": {\n            \"temp_out\": temp_out,\n            \"hum_out\": hum_out,\n            \"light_out\": light_out,\n            \"temp_in\": temp_in,\n            \"hum_in\": hum_in,\n            \"light_in\": light_in,\n            \"soil_in\": soil_in\n        }\n    };\n\n    msg.payload = jsonstring //JSON.stringify(jsonstring);\n    msg.topic = \"mqtt_data\";\n    return msg;\n} else {\n    let nminute = nowtime.split(\":\");\n    let nowminute = Number(nminute[1]);\n    let old_minute = context.get('old_nowminute') || 0;\n    old_minute = Number(old_minute)\n\n    if (old_minute != nowminute) {\n        context.set('old_nowminute', nowminute);\n        context.set('count_', 0);\n    } else {\n        context.set('count_', count_ + 1);\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 260,
        "wires": [
            [
                "585b021007ede7f2",
                "5a456b218e6357fd"
            ]
        ]
    },
    {
        "id": "585b021007ede7f2",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "filter data",
        "func": "\nvar output = msg.payload;\n\nvar timestamp = msg.timer;\nvar ntime = timestamp.split(\" \");\nvar nowtime = ntime[1];\nvar nowdate = ntime[0];\n\nvar nminute = nowtime.split(\":\");\nvar nowminute = Number(nminute[1]);\nvar old_minute = context.get('old_nowminute')||0;\nold_minute = Number(old_minute)\n\nif(old_minute != nowminute){\n    context.set('old_nowminute',nowminute);\n\n    msg.payload = output // JSON.stringify(jsonstring);\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 260,
        "wires": [
            [
                "490cc85f211e66ec"
            ]
        ]
    },
    {
        "id": "a5fdf6f27e28a99e",
        "type": "moment",
        "z": "9ef40e3051cd8cc7",
        "name": "timmer",
        "topic": "time_",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "hours",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "C",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 410,
        "y": 260,
        "wires": [
            [
                "c59db05bd354f52d"
            ]
        ]
    },
    {
        "id": "67bffca3c535e05d",
        "type": "moment",
        "z": "9ef40e3051cd8cc7",
        "name": "timmer",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "hours",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "C",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 770,
        "y": 140,
        "wires": [
            [
                "d61446a9a78b217b",
                "65db83078f4e9e6d"
            ]
        ]
    },
    {
        "id": "fd904200bc28e89a",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "topic",
        "func": "let timestamp = msg.timer;\nlet ntime = timestamp.split(\" \");\nlet nowtime = ntime[1];\nlet nowdate = ntime[0];\n\nlet output = msg.payload;\nlet result = JSON.parse(output);\nlet temp_out, hum_out, light_out, temp_in, hum_in, light_in, soil_in;\nif(result.data.temp_out  === undefined ){ temp_out  = 0; }else{ temp_out  = result.data.temp_out; }\nif(result.data.hum_out   === undefined ){ hum_out   = 0; }else{ hum_out   = result.data.hum_out; }\nif(result.data.light_out === undefined ){ light_out = 0; }else{ light_out = result.data.light_out; }\nif(result.data.temp_in   === undefined ){ temp_in   = 0; }else{ temp_in   = result.data.temp_in; }\nif(result.data.hum_in    === undefined ){ hum_in    = 0; }else{ hum_in    = result.data.hum_in; }\nif(result.data.light_in  === undefined ){ light_in  = 0; }else{ light_in  = result.data.light_in; }\nif(result.data.soil_in   === undefined ){ soil_in   = 0; }else{ soil_in   = result.data.soil_in; }\n\n\nlet count_ = context.get('count_') || 0;\n\nif (count_ >= 3) {\n    context.set('count_', 0)\n    let jsonstring = {};\n    jsonstring = {\n        \"serial_id\": result.serial_id,\n        \"date\": nowdate,\n        \"time\": nowtime,\n        \"data\": {\n            \"temp_out\": temp_out,\n            \"hum_out\": hum_out,\n            \"light_out\": light_out,\n            \"temp_in\": temp_in,\n            \"hum_in\": hum_in,\n            \"light_in\": light_in,\n            \"soil_in\": soil_in\n        }\n    };\n\n    msg.payload = jsonstring //JSON.stringify(jsonstring);\n    msg.topic = \"mqtt_data\";\n    return msg;\n}else{\n    let nminute = nowtime.split(\":\");\n    let nowminute = Number(nminute[1]);\n    let old_minute = context.get('old_nowminute') || 0;\n    old_minute = Number(old_minute)\n\n    if (old_minute != nowminute) {\n        context.set('old_nowminute', nowminute);\n        context.set('count_', 0);\n    } else {\n        context.set('count_', count_ + 1);\n    }\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 100,
        "wires": [
            [
                "d61446a9a78b217b",
                "f9bdc65a35c6eaa8"
            ]
        ]
    },
    {
        "id": "d61446a9a78b217b",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "filter data",
        "func": "\nvar output = msg.payload;\n\nvar timestamp = msg.timer;\nvar ntime = timestamp.split(\" \");\nvar nowtime = ntime[1];\nvar nowdate = ntime[0];\n\nvar nminute = nowtime.split(\":\");\nvar nowminute = Number(nminute[1]);\nvar old_minute = context.get('old_nowminute')||0;\nold_minute = Number(old_minute)\n\nif(old_minute != nowminute){\n    context.set('old_nowminute',nowminute);\n\n    msg.payload = output // JSON.stringify(jsonstring);\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 100,
        "wires": [
            [
                "63a2b70a75a59b73"
            ]
        ]
    },
    {
        "id": "046237806a264344",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "line_notify",
        "func": "\n// var output = msg.payload;\n\nif (msg.topic == \"config\"){\n    context.set('get_config',msg.payload);\n}\nif (msg.topic == \"get_mqtt\"){\n    context.set('get_mqtt',msg.payload);\n}\nvar n_config = context.get('get_config') || 0;\nvar result = context.get('get_mqtt') || 0;\nvar log_status_to = context.get('log_status_to') || 'No';\nvar log_status_ti = context.get('log_status_ti') || 'No';\nvar log_status_ho = context.get('log_status_ho') || 'No';\nvar log_status_hi = context.get('log_status_hi') || 'No';\nvar log_status_lo = context.get('log_status_lo') || 'No';\nvar log_status_li = context.get('log_status_li') || 'No';\nvar log_status_si = context.get('log_status_si') || 'No';\n\nif(n_config !== 0){\n    if(result !== 0){\n        // var result = JSON.parse(get_mqtt);\n        var get_db = n_config[result.serial_id];\n        // if(log_status_to == 'No'){\n        //     context.set('log_status_to',get_db[0].status);\n        // }\n        // msg.payload = log_status_to\n        // return msg;\n        // return false;\n        // var temp_out  = result.data.temp_out;\n        // var hum_out   = result.data.hum_out;\n        // var light_out = result.data.light_out;\n        // var temp_in   = result.data.temp_in;\n        // var hum_in    = result.data.hum_in;\n        // var light_in  = result.data.light_in;\n        // var soil_in   = result.data.soil_in;\n        \n        // if(temp_out <= 0){\n        //     msg.payload =0\n        // }else{\n        //     msg.payload ='aas'\n        // }\n        for(var i=0; i<7; i++){\n            if(get_db[i].name == 'temp_out'){\n                if(result.data.temp_out <= 0 || result.data.temp_out > 55){\n                    if(log_status_to === 'No'){log_status_to = get_db[i].status;}\n                    if(log_status_to === 'good' && log_status_to !== 'No'){\n                        // msg.payload = result.data.temp_out;\n                        \n                        var data_c = [];\n                        data_c.push('Temp นอกโรงเรือน : ผิดปกติ')\n                        data_c.push('Temp_Out : '+result.data.temp_out+' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\"; \n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn : result.serial_id,\n                            output : JSON.stringify(data_c),\n                            sensor : 'temp_out',\n                            status : 'bad'\n                        }\n                        context.set('log_status_to', 'bad');\n                        return msg;\n                    }\n                }else{\n                    if(log_status_to === 'No'){log_status_to = get_db[i].status;}\n                    if(log_status_to === 'bad' && log_status_to !== 'No'){\n                        var data_c = [];\n                        data_c.push('Temp นอกโรงเรือน : ปกติ')\n                        data_c.push('Temp_Out : '+result.data.temp_out+' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\"; \n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn : result.serial_id,\n                            output : JSON.stringify(data_c),\n                            sensor : 'temp_out',\n                            status : 'good'\n                        }\n                        context.set('log_status_to', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if(get_db[i].name == 'temp_in'){\n                if(result.data.temp_in <= 0 || result.data.temp_out > 55){\n                    if(log_status_ti === 'No'){log_status_ti = get_db[i].status;}\n                    if(log_status_ti == 'good' && log_status_to !== 'No'){\n                        var data_c = [];\n                        data_c.push('Temp ในโรงเรือน : ผิดปกติ')\n                        data_c.push('Temp_In : '+result.data.temp_in+' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\"; \n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn : result.serial_id,\n                            output : JSON.stringify(data_c),\n                            sensor : 'temp_in',\n                            status : 'bad'\n                        }\n                        context.set('log_status_ti', 'bad');\n                        return msg;\n                    }\n                }else{\n                    if(log_status_ti === 'No'){log_status_ti = get_db[i].status;}\n                    if(log_status_ti == 'bad' && log_status_to !== 'No'){\n                        var data_c = [];\n                        data_c.push('Temp ในโรงเรือน : ปกติ')\n                        data_c.push('Temp_In : '+result.data.temp_in+' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\"; \n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn : result.serial_id,\n                            output : JSON.stringify(data_c),\n                            sensor : 'temp_in',\n                            status : 'good'\n                        }\n                        context.set('log_status_ti', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if(get_db[i].name === 'hum_out'){\n                if(result.data.hum_out <= 0 || result.data.hum_out > 100){\n                    if(log_status_ho === 'No'){log_status_ho = get_db[i].status;}\n                    if(log_status_ho === 'good' && log_status_to !== 'No'){\n                        var data_c = [];\n                        data_c.push('Hum นอกโรงเรือน : ผิดปกติ')\n                        data_c.push('Hum_Out : '+result.data.hum_out+' percentRh')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\"; \n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn : result.serial_id,\n                            output : JSON.stringify(data_c),\n                            sensor : 'hum_out',\n                            status : 'bad'\n                        }\n                        context.set('log_status_ho', 'bad');\n                        return msg;\n                    }\n                }else{\n                    if(log_status_ho === 'No'){log_status_ho = get_db[i].status;}\n                    if(log_status_ho === 'bad' && log_status_to !== 'No'){\n                        var data_c = [];\n                        data_c.push('Hum นอกโรงเรือน : ปกติ')\n                        data_c.push('Hum_Out : '+result.data.hum_out+' percentRh')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\"; \n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn : result.serial_id,\n                            output : JSON.stringify(data_c),\n                            sensor : 'hum_out',\n                            status : 'good'\n                        }\n                        context.set('log_status_ho', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if(get_db[i].name === 'hum_in'){\n                if(result.data.hum_in <= 0 || result.data.hum_out > 100){\n                    if(log_status_hi === 'No'){log_status_hi = get_db[i].status;}\n                    if(log_status_hi === 'good' && log_status_to !== 'No'){\n                        var data_c = [];\n                        data_c.push('Hum ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Hum_In : '+result.data.hum_in+' percentRh');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\"; \n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn : result.serial_id,\n                            output : JSON.stringify(data_c),\n                            sensor : 'hum_in',\n                            status : 'bad'\n                        }\n                        context.set('log_status_hi', 'bad');\n                        return msg;\n                    }\n                }else{\n                    if(log_status_hi === 'No'){log_status_hi = get_db[i].status;}\n                    if(log_status_hi == 'bad' && log_status_to !== 'No'){\n                        var data_c = [];\n                        data_c.push('Hum ในโรงเรือน : ปกติ');\n                        data_c.push('Hum_In : '+result.data.hum_in+' percentRh');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\"; \n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn : result.serial_id,\n                            output : JSON.stringify(data_c),\n                            sensor : 'hum_in',\n                            status : 'good'\n                        }\n                        context.set('log_status_hi', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if(get_db[i].name === 'light_out'){\n                if(result.data.light_out < 0 || result.data.light_out > 260000){\n                    if(log_status_lo === 'No'){log_status_lo = get_db[i].status;}\n                    if(log_status_lo === 'good' && log_status_to !== 'No'){\n                        var data_c = [];\n                        data_c.push('Light นอกโรงเรือน : ผิดปกติ');\n                        data_c.push('Light_Out : '+result.data.light_out+' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\"; \n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn : result.serial_id,\n                            output : JSON.stringify(data_c),\n                            sensor : 'light_out',\n                            status : 'bad'\n                        }\n                        context.set('log_status_lo', 'bad');\n                        return msg;\n                    }\n                }else{\n                    if(log_status_lo === 'No'){log_status_lo = get_db[i].status;}\n                    if(log_status_lo === 'bad' && log_status_to !== 'No'){\n                        var data_c = [];\n                        data_c.push('Light นอกโรงเรือน : ปกติ');\n                        data_c.push('Light_Out : '+result.data.light_out+' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\"; \n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn : result.serial_id,\n                            output : JSON.stringify(data_c),\n                            sensor : 'light_out',\n                            status : 'good'\n                        }\n                        context.set('log_status_lo', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if(get_db[i].name === 'light_in'){\n                if(result.data.light_in < 0 || result.data.light_out > 260000){\n                    if(log_status_li === 'No'){log_status_li = get_db[i].status;}\n                    if(log_status_li === 'good' && log_status_to !== 'No'){\n                        var data_c = [];\n                        data_c.push('Light ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Light_In : '+result.data.light_in+' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\"; \n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn : result.serial_id,\n                            output : JSON.stringify(data_c),\n                            sensor : 'light_in',\n                            status : 'bad'\n                        }\n                        context.set('log_status_li', 'bad');\n                        return msg;\n                    }\n                }else{\n                    if(log_status_li === 'No'){log_status_li = get_db[i].status;}\n                    if(log_status_li === 'bad' && log_status_to !== 'No'){\n                        var data_c = [];\n                        data_c.push('Light ในโรงเรือน : ปกติ');\n                        data_c.push('Light_In : '+result.data.light_in+' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\"; \n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn : result.serial_id,\n                            output : JSON.stringify(data_c),\n                            sensor : 'light_in',\n                            status : 'good'\n                        }\n                        context.set('log_status_li', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if(get_db[i].name === 'soil_in'){\n                if(result.data.soil_in <= 0 || result.data.soil_in > 100){\n                    if(log_status_si === 'No'){log_status_si = get_db[i].status;}\n                    if(log_status_si === 'good' && log_status_to !== 'No'){\n                        var data_c = [];\n                        data_c.push('Soil ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Soil_In : '+result.data.soil_in+' percent');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\"; \n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn : result.serial_id,\n                            output : JSON.stringify(data_c),\n                            sensor : 'soil_in',\n                            status : 'bad'\n                        }\n                        context.set('log_status_si', 'bad');\n                        return msg;\n                    }\n                }else{\n                    if(log_status_si === 'No'){log_status_si = get_db[i].status;}\n                    if(log_status_si == 'bad' && log_status_to !== 'No'){\n                        var data_c = [];\n                        data_c.push('Soil ในโรงเรือน : ปกติ');\n                        data_c.push('Soil_In : '+result.data.soil_in+' percent');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\"; \n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn : result.serial_id,\n                            output : JSON.stringify(data_c),\n                            sensor : 'soil_in',\n                            status : 'good'\n                        }\n                        context.set('log_status_si', 'good');\n                        return msg;\n                    }\n                }\n            }\n        }\n            \n        // msg.payload = get_db[0] // JSON.stringify(jsonstring);\n        // return msg;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 180,
        "wires": [
            [
                "185e5520e955e438"
            ]
        ]
    },
    {
        "id": "21d88a2e6aeb9893",
        "type": "moment",
        "z": "9ef40e3051cd8cc7",
        "name": "timmer",
        "topic": "time_",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "hours",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "C",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 410,
        "y": 100,
        "wires": [
            [
                "fd904200bc28e89a"
            ]
        ]
    },
    {
        "id": "9aabff260b4a0097",
        "type": "debug",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 980,
        "wires": []
    },
    {
        "id": "e882c7c654b6bf34",
        "type": "debug",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 820,
        "wires": []
    },
    {
        "id": "a5d7d53d48201b00",
        "type": "http request",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 510,
        "y": 60,
        "wires": [
            [
                "c51a15d6f53fb731",
                "95872f6831c2632c"
            ]
        ]
    },
    {
        "id": "45dcbd5ffa21eca9",
        "type": "http request",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1130,
        "y": 1180,
        "wires": [
            [
                "13e91bbd7bbe9f09"
            ]
        ]
    },
    {
        "id": "857acd71f92d2c30",
        "type": "http request",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1130,
        "y": 980,
        "wires": [
            [
                "9aabff260b4a0097"
            ]
        ]
    },
    {
        "id": "5fd84cea85e0164f",
        "type": "http request",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1130,
        "y": 820,
        "wires": [
            [
                "e882c7c654b6bf34"
            ]
        ]
    },
    {
        "id": "1f639233bb7cef2f",
        "type": "debug",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 660,
        "wires": []
    },
    {
        "id": "775b59d489428649",
        "type": "http request",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1130,
        "y": 660,
        "wires": [
            [
                "1f639233bb7cef2f"
            ]
        ]
    },
    {
        "id": "48df29b80d66174a",
        "type": "debug",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 500,
        "wires": []
    },
    {
        "id": "97c4946095b395ae",
        "type": "http request",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1130,
        "y": 500,
        "wires": [
            [
                "48df29b80d66174a"
            ]
        ]
    },
    {
        "id": "72e164c3813007d7",
        "type": "debug",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 340,
        "wires": []
    },
    {
        "id": "a979f1ce6b3ec68f",
        "type": "http request",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1130,
        "y": 340,
        "wires": [
            [
                "72e164c3813007d7"
            ]
        ]
    },
    {
        "id": "5a86bffd310394b8",
        "type": "debug",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 180,
        "wires": []
    },
    {
        "id": "af143fbc3dc9ad32",
        "type": "http request",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1130,
        "y": 180,
        "wires": [
            [
                "5a86bffd310394b8"
            ]
        ]
    },
    {
        "id": "f9bdc65a35c6eaa8",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "equation data",
        "func": "if (msg.topic == \"mqtt_data\"){\n    context.set('mqtt_data',msg.payload);\n}\nif (msg.topic == \"mqtt_equation\"){\n    context.set('mqtt_equation',msg.payload);\n}\nvar n_data_mq = context.get('mqtt_data') || 'n';\nvar mqtt_equation = context.get('mqtt_equation') || 'n';\nvar count_ = context.get('count_') || 0;\n\nif(n_data_mq === 'n'){\n    return false;\n}\nif(mqtt_equation === 'n'){\n    return false;\n}\n// var n_data_mq = JSON.parse(mqtt_data);\nvar eq = JSON.parse(mqtt_equation);\nvar d_1;\nvar d_2; \nvar d_3;\nvar d_4;\nvar d_5;\nvar d_6;\nvar d_7;\nif(n_data_mq.data.temp_out  === undefined ){ \n    d_1 = 0; \n}else{\n    var e_1 = eq['e_1'].replaceAll('x', n_data_mq.data.temp_out);\n    if(e_1.split(\"^\").length > 1){ var e1_ = e_1.replaceAll(\"^\",'**') }else{ var e1_ = e_1 }\n    if(eval(e1_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_1 = eval(e1_); \n    }else{ \n        d_1 = eval(e1_).toFixed(2);\n    }\n }\n if(n_data_mq.data.hum_out   === undefined ){ \n    d_2 = 0; \n }else{ \n    var e_2 = eq['e_2'].replaceAll(\"x\", n_data_mq.data.hum_out);\n    if(e_2.split(\"^\").length > 1){ var e2_ = e_2.replaceAll(\"^\",'**') }else{ var e2_ = e_2 }\n    if(eval(e2_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_2 = eval(e2_); \n    }else{ \n        d_2 = eval(e2_).toFixed(2); \n    }\n }\n if(n_data_mq.data.light_out === undefined ){ \n    d_3 = 0; \n }else{ \n    var e_3 = eq['e_3'].replaceAll(\"x\", n_data_mq.data.light_out);\n    if(e_3.split(\"^\").length > 1){ var e3_ = e_3.replaceAll(\"^\",'**') }else{ var e3_ = e_3 }\n    if(eval(e3_).toFixed(2).toString().split(\".\")[1] === \"00\"){ var d_3 = eval(e3_); }else{ var d_3 = eval(e3_).toFixed(2); }\n}\nif(n_data_mq.data.temp_in   === undefined ){ \n    d_4 = 0; \n}else{ \n    var e_4 = eq['e_4'].replaceAll(\"x\", n_data_mq.data.temp_in);\n    if(e_4.split(\"^\").length > 1){ var e4_ = e_4.replaceAll(\"^\",'**') }else{ var e4_ = e_4 }\n    if(eval(e4_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_4 = eval(e4_); \n    }else{ \n        d_4 = eval(e4_).toFixed(2); \n    }\n}\nif(n_data_mq.data.hum_in    === undefined ){ \n    d_5 = 0; \n}else{ \n    var e_5 = eq['e_5'].replaceAll(\"x\", n_data_mq.data.hum_in);\n    if(e_5.split(\"^\").length > 1){ var e5_ = e_5.replaceAll(\"^\",'**') }else{ var e5_ = e_5 }\n    if(eval(e5_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_5 = eval(e5_); \n    }else{ \n        d_5 = eval(e5_).toFixed(2); \n    }\n}\nif(n_data_mq.data.light_in  === undefined ){ \n    d_6 = 0; \n}else{ \n    var e_6 = eq['e_6'].replaceAll(\"x\", n_data_mq.data.light_in);\n    if(e_6.split(\"^\").length > 1){ var e6_ = e_6.replaceAll(\"^\",'**') }else{ var e6_ = e_6 }\n    if(eval(e6_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_6 = eval(e6_); \n    }else{ \n        d_6 = eval(e6_).toFixed(2); \n    }\n}\nif(n_data_mq.data.soil_in   === undefined ){ \n    d_7 = 0; \n}else{ \n    var e_7 = eq['e_7'].replaceAll('x', n_data_mq.data.soil_in);\n    if(e_7.split(\"^\").length > 1){ var e7_ = e_7.replaceAll(\"^\",'**'); }else{ var e7_ = e_7; }\n    if(eq['e_7'] === \"(-0.0346 * (x)^2) + (3.9116 * x) - 0.3984\"){\n        if(eval(e7_) < 0){\n            d_7 = 0;\n        }else if(eval(e7_) > 100){\n            d_7 = 100;\n        }else{\n            if(eval(e7_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n                d_7 = eval(e7_); \n            }else{ \n                d_7 = eval(e7_).toFixed(2); \n            }\n         }\n    }else{\n        if(eval(e7_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n            d_7 = eval(e7_); \n        }else{ \n            d_7 = eval(e7_).toFixed(2); \n        }\n    }\n}\n\nvar jsonstring ={};\njsonstring = {\n    \"serial_id\": n_data_mq.serial_id, \n    \"date\": n_data_mq.date, \n    \"time\": n_data_mq.time,\n    \"data\":{ \n        \"temp_out\": d_1, \n        \"hum_out\":  d_2, \n        \"light_out\":d_3, \n        \"temp_in\":  d_4, \n        \"hum_in\":   d_5, \n        \"light_in\": d_6, \n        \"soil_in\":  d_7\n    } \n};\n// msg.payload = eval(eq['e_1'].split(\"x\")[0] + n_data_mq.data.soil_in  + eq['e_1'].split(\"x\")[1]).toFixed(2).split(\".\")[1];\n// return msg;\n\nif(count_ !== jsonstring.date+' '+jsonstring.time){\n    msg.payload = jsonstring // JSON.stringify(jsonstring);\n    msg.topic = \"get_mqtt\";\n    context.set('count_',jsonstring.date+' '+jsonstring.time);\n    // msg.payload = count_\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 180,
        "wires": [
            [
                "67bffca3c535e05d",
                "046237806a264344"
            ]
        ]
    },
    {
        "id": "65db83078f4e9e6d",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "filter data",
        "func": "\nvar result = msg.payload;\n\nvar timestamp = msg.timer;\nvar ntime = timestamp.split(\" \");\nvar nowtime = ntime[1];\nvar nowdate = ntime[0];\n\nvar nminute = nowtime.split(\":\");\nvar nowminute = Number(nminute[1]);\nvar old_minute = context.get('old_nowminute')||0;\nold_minute = Number(old_minute)\n\nif(old_minute != nowminute){\n    context.set('old_nowminute',nowminute);\n\n    // var result = JSON.parse(output);\n    var temp_out;\n    var hum_out;\n    var light_out;\n    var temp_in;\n    var hum_in;\n    var light_in;\n    var soil_in;\n    if(result.data.temp_out  === undefined ){ temp_out  = 0; }else{ temp_out  = result.data.temp_out; }\n    if(result.data.hum_out   === undefined ){ hum_out   = 0; }else{ hum_out   = result.data.hum_out; }\n    if(result.data.light_out === undefined ){ light_out = 0; }else{ light_out = result.data.light_out; }\n    if(result.data.temp_in   === undefined ){ temp_in   = 0; }else{ temp_in   = result.data.temp_in; }\n    if(result.data.hum_in    === undefined ){ hum_in    = 0; }else{ hum_in    = result.data.hum_in; }\n    if(result.data.light_in  === undefined ){ light_in  = 0; }else{ light_in  = result.data.light_in; }\n    if(result.data.soil_in   === undefined ){ soil_in   = 0; }else{ soil_in   = result.data.soil_in; }\n\n    var jsonstring ={};\n    jsonstring = {\n        \"serial_id\": result.serial_id, \n        \"date\": nowdate, \n        \"time\":nowtime,\n        \"data\":{ \n            \"temp_out\": temp_out, \n            \"hum_out\":hum_out, \n            \"light_out\":light_out, \n            \"temp_in\":temp_in, \n            \"hum_in\":hum_in, \n            \"light_in\":light_in, \n            \"soil_in\":soil_in \n        } \n    };\n    msg.payload = jsonstring // JSON.stringify(jsonstring);\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 140,
        "wires": [
            [
                "b18c02c377c84d45"
            ]
        ]
    },
    {
        "id": "5a456b218e6357fd",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "equation data",
        "func": "if (msg.topic == \"mqtt_data\"){\n    context.set('mqtt_data',msg.payload);\n}\nif (msg.topic == \"mqtt_equation\"){\n    context.set('mqtt_equation',msg.payload);\n}\nvar n_data_mq = context.get('mqtt_data') || 'n';\nvar mqtt_equation = context.get('mqtt_equation') || 'n';\nvar count_ = context.get('count_') || 0;\n\nif(n_data_mq === 'n'){\n    return false;\n}\nif(mqtt_equation === 'n'){\n    return false;\n}\n// var n_data_mq = JSON.parse(mqtt_data);\nvar eq = JSON.parse(mqtt_equation);\nvar d_1;\nvar d_2; \nvar d_3;\nvar d_4;\nvar d_5;\nvar d_6;\nvar d_7;\nif(n_data_mq.data.temp_out  === undefined ){ \n    d_1 = 0; \n}else{\n    var e_1 = eq['e_1'].replaceAll('x', n_data_mq.data.temp_out);\n    if(e_1.split(\"^\").length > 1){ var e1_ = e_1.replaceAll(\"^\",'**') }else{ var e1_ = e_1 }\n    if(eval(e1_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_1 = eval(e1_); \n    }else{ \n        d_1 = eval(e1_).toFixed(2);\n    }\n }\n if(n_data_mq.data.hum_out   === undefined ){ \n    d_2 = 0; \n }else{ \n    var e_2 = eq['e_2'].replaceAll(\"x\", n_data_mq.data.hum_out);\n    if(e_2.split(\"^\").length > 1){ var e2_ = e_2.replaceAll(\"^\",'**') }else{ var e2_ = e_2 }\n    if(eval(e2_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_2 = eval(e2_); \n    }else{ \n        d_2 = eval(e2_).toFixed(2); \n    }\n }\n if(n_data_mq.data.light_out === undefined ){ \n    d_3 = 0; \n }else{ \n    var e_3 = eq['e_3'].replaceAll(\"x\", n_data_mq.data.light_out);\n    if(e_3.split(\"^\").length > 1){ var e3_ = e_3.replaceAll(\"^\",'**') }else{ var e3_ = e_3 }\n    if(eval(e3_).toFixed(2).toString().split(\".\")[1] === \"00\"){ var d_3 = eval(e3_); }else{ var d_3 = eval(e3_).toFixed(2); }\n}\nif(n_data_mq.data.temp_in   === undefined ){ \n    d_4 = 0; \n}else{ \n    var e_4 = eq['e_4'].replaceAll(\"x\", n_data_mq.data.temp_in);\n    if(e_4.split(\"^\").length > 1){ var e4_ = e_4.replaceAll(\"^\",'**') }else{ var e4_ = e_4 }\n    if(eval(e4_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_4 = eval(e4_); \n    }else{ \n        d_4 = eval(e4_).toFixed(2); \n    }\n}\nif(n_data_mq.data.hum_in    === undefined ){ \n    d_5 = 0; \n}else{ \n    var e_5 = eq['e_5'].replaceAll(\"x\", n_data_mq.data.hum_in);\n    if(e_5.split(\"^\").length > 1){ var e5_ = e_5.replaceAll(\"^\",'**') }else{ var e5_ = e_5 }\n    if(eval(e5_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_5 = eval(e5_); \n    }else{ \n        d_5 = eval(e5_).toFixed(2); \n    }\n}\nif(n_data_mq.data.light_in  === undefined ){ \n    d_6 = 0; \n}else{ \n    var e_6 = eq['e_6'].replaceAll(\"x\", n_data_mq.data.light_in);\n    if(e_6.split(\"^\").length > 1){ var e6_ = e_6.replaceAll(\"^\",'**') }else{ var e6_ = e_6 }\n    if(eval(e6_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_6 = eval(e6_); \n    }else{ \n        d_6 = eval(e6_).toFixed(2); \n    }\n}\nif(n_data_mq.data.soil_in   === undefined ){ \n    d_7 = 0; \n}else{ \n    var e_7 = eq['e_7'].replaceAll('x', n_data_mq.data.soil_in);\n    if(e_7.split(\"^\").length > 1){ var e7_ = e_7.replaceAll(\"^\",'**'); }else{ var e7_ = e_7; }\n    if(eq['e_7'] === \"(-0.0346 * (x)^2) + (3.9116 * x) - 0.3984\"){\n        if(eval(e7_) < 0){\n            d_7 = 0;\n        }else if(eval(e7_) > 100){\n            d_7 = 100;\n        }else{\n            if(eval(e7_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n                d_7 = eval(e7_); \n            }else{ \n                d_7 = eval(e7_).toFixed(2); \n            }\n         }\n    }else{\n        if(eval(e7_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n            d_7 = eval(e7_); \n        }else{ \n            d_7 = eval(e7_).toFixed(2); \n        }\n    }\n}\n\nvar jsonstring ={};\njsonstring = {\n    \"serial_id\": n_data_mq.serial_id, \n    \"date\": n_data_mq.date, \n    \"time\": n_data_mq.time,\n    \"data\":{ \n        \"temp_out\": d_1, \n        \"hum_out\":  d_2, \n        \"light_out\":d_3, \n        \"temp_in\":  d_4, \n        \"hum_in\":   d_5, \n        \"light_in\": d_6, \n        \"soil_in\":  d_7\n    } \n};\n// msg.payload = eval(eq['e_1'].split(\"x\")[0] + n_data_mq.data.soil_in  + eq['e_1'].split(\"x\")[1]).toFixed(2).split(\".\")[1];\n// return msg;\n\nif(count_ !== jsonstring.date+' '+jsonstring.time){\n    msg.payload = jsonstring // JSON.stringify(jsonstring);\n    msg.topic = \"get_mqtt\";\n    context.set('count_',jsonstring.date+' '+jsonstring.time);\n    // msg.payload = count_\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 340,
        "wires": [
            [
                "96d35319f5e12c7b",
                "867f22ba9d25290f"
            ]
        ]
    },
    {
        "id": "8f8df5d7c14ff6a2",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "filter data",
        "func": "\nvar result = msg.payload;\n\nvar timestamp = msg.timer;\nvar ntime = timestamp.split(\" \");\nvar nowtime = ntime[1];\nvar nowdate = ntime[0];\n\nvar nminute = nowtime.split(\":\");\nvar nowminute = Number(nminute[1]);\nvar old_minute = context.get('old_nowminute')||0;\nold_minute = Number(old_minute)\n\nif(old_minute != nowminute){\n    context.set('old_nowminute',nowminute);\n\n    // var result = JSON.parse(output);\n    var temp_out;\n    var hum_out;\n    var light_out;\n    var temp_in;\n    var hum_in;\n    var light_in;\n    var soil_in;\n    if(result.data.temp_out  === undefined ){ temp_out  = 0; }else{ temp_out  = result.data.temp_out; }\n    if(result.data.hum_out   === undefined ){ hum_out   = 0; }else{ hum_out   = result.data.hum_out; }\n    if(result.data.light_out === undefined ){ light_out = 0; }else{ light_out = result.data.light_out; }\n    if(result.data.temp_in   === undefined ){ temp_in   = 0; }else{ temp_in   = result.data.temp_in; }\n    if(result.data.hum_in    === undefined ){ hum_in    = 0; }else{ hum_in    = result.data.hum_in; }\n    if(result.data.light_in  === undefined ){ light_in  = 0; }else{ light_in  = result.data.light_in; }\n    if(result.data.soil_in   === undefined ){ soil_in   = 0; }else{ soil_in   = result.data.soil_in; }\n\n    var jsonstring ={};\n    jsonstring = {\n        \"serial_id\": result.serial_id, \n        \"date\": nowdate, \n        \"time\":nowtime,\n        \"data\":{ \n            \"temp_out\": temp_out, \n            \"hum_out\":hum_out, \n            \"light_out\":light_out, \n            \"temp_in\":temp_in, \n            \"hum_in\":hum_in, \n            \"light_in\":light_in, \n            \"soil_in\":soil_in \n        } \n    };\n    msg.payload = jsonstring // JSON.stringify(jsonstring);\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 300,
        "wires": [
            [
                "cfba80f2fff09812"
            ]
        ]
    },
    {
        "id": "0edd4f7fd9aab01c",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "equation data",
        "func": "if (msg.topic == \"mqtt_data\"){\n    context.set('mqtt_data',msg.payload);\n}\nif (msg.topic == \"mqtt_equation\"){\n    context.set('mqtt_equation',msg.payload);\n}\nvar n_data_mq = context.get('mqtt_data') || 'n';\nvar mqtt_equation = context.get('mqtt_equation') || 'n';\nvar count_ = context.get('count_') || 0;\n\nif(n_data_mq === 'n'){\n    return false;\n}\nif(mqtt_equation === 'n'){\n    return false;\n}\n// var n_data_mq = JSON.parse(mqtt_data);\nvar eq = JSON.parse(mqtt_equation);\nvar d_1;\nvar d_2; \nvar d_3;\nvar d_4;\nvar d_5;\nvar d_6;\nvar d_7;\nif(n_data_mq.data.temp_out  === undefined ){ \n    d_1 = 0; \n}else{\n    var e_1 = eq['e_1'].replaceAll('x', n_data_mq.data.temp_out);\n    if(e_1.split(\"^\").length > 1){ var e1_ = e_1.replaceAll(\"^\",'**') }else{ var e1_ = e_1 }\n    if(eval(e1_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_1 = eval(e1_); \n    }else{ \n        d_1 = eval(e1_).toFixed(2);\n    }\n }\n if(n_data_mq.data.hum_out   === undefined ){ \n    d_2 = 0; \n }else{ \n    var e_2 = eq['e_2'].replaceAll(\"x\", n_data_mq.data.hum_out);\n    if(e_2.split(\"^\").length > 1){ var e2_ = e_2.replaceAll(\"^\",'**') }else{ var e2_ = e_2 }\n    if(eval(e2_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_2 = eval(e2_); \n    }else{ \n        d_2 = eval(e2_).toFixed(2); \n    }\n }\n if(n_data_mq.data.light_out === undefined ){ \n    d_3 = 0; \n }else{ \n    var e_3 = eq['e_3'].replaceAll(\"x\", n_data_mq.data.light_out);\n    if(e_3.split(\"^\").length > 1){ var e3_ = e_3.replaceAll(\"^\",'**') }else{ var e3_ = e_3 }\n    if(eval(e3_).toFixed(2).toString().split(\".\")[1] === \"00\"){ var d_3 = eval(e3_); }else{ var d_3 = eval(e3_).toFixed(2); }\n}\nif(n_data_mq.data.temp_in   === undefined ){ \n    d_4 = 0; \n}else{ \n    var e_4 = eq['e_4'].replaceAll(\"x\", n_data_mq.data.temp_in);\n    if(e_4.split(\"^\").length > 1){ var e4_ = e_4.replaceAll(\"^\",'**') }else{ var e4_ = e_4 }\n    if(eval(e4_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_4 = eval(e4_); \n    }else{ \n        d_4 = eval(e4_).toFixed(2); \n    }\n}\nif(n_data_mq.data.hum_in    === undefined ){ \n    d_5 = 0; \n}else{ \n    var e_5 = eq['e_5'].replaceAll(\"x\", n_data_mq.data.hum_in);\n    if(e_5.split(\"^\").length > 1){ var e5_ = e_5.replaceAll(\"^\",'**') }else{ var e5_ = e_5 }\n    if(eval(e5_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_5 = eval(e5_); \n    }else{ \n        d_5 = eval(e5_).toFixed(2); \n    }\n}\nif(n_data_mq.data.light_in  === undefined ){ \n    d_6 = 0; \n}else{ \n    var e_6 = eq['e_6'].replaceAll(\"x\", n_data_mq.data.light_in);\n    if(e_6.split(\"^\").length > 1){ var e6_ = e_6.replaceAll(\"^\",'**') }else{ var e6_ = e_6 }\n    if(eval(e6_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_6 = eval(e6_); \n    }else{ \n        d_6 = eval(e6_).toFixed(2); \n    }\n}\nif(n_data_mq.data.soil_in   === undefined ){ \n    d_7 = 0; \n}else{ \n    var e_7 = eq['e_7'].replaceAll('x', n_data_mq.data.soil_in);\n    if(e_7.split(\"^\").length > 1){ var e7_ = e_7.replaceAll(\"^\",'**'); }else{ var e7_ = e_7; }\n    if(eq['e_7'] === \"(-0.0346 * (x)^2) + (3.9116 * x) - 0.3984\"){\n        if(eval(e7_) < 0){\n            d_7 = 0;\n        }else if(eval(e7_) > 100){\n            d_7 = 100;\n        }else{\n            if(eval(e7_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n                d_7 = eval(e7_); \n            }else{ \n                d_7 = eval(e7_).toFixed(2); \n            }\n         }\n    }else{\n        if(eval(e7_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n            d_7 = eval(e7_); \n        }else{ \n            d_7 = eval(e7_).toFixed(2); \n        }\n    }\n}\n\nvar jsonstring ={};\njsonstring = {\n    \"serial_id\": n_data_mq.serial_id, \n    \"date\": n_data_mq.date, \n    \"time\": n_data_mq.time,\n    \"data\":{ \n        \"temp_out\": d_1, \n        \"hum_out\":  d_2, \n        \"light_out\":d_3, \n        \"temp_in\":  d_4, \n        \"hum_in\":   d_5, \n        \"light_in\": d_6, \n        \"soil_in\":  d_7\n    } \n};\n// msg.payload = eval(eq['e_1'].split(\"x\")[0] + n_data_mq.data.soil_in  + eq['e_1'].split(\"x\")[1]).toFixed(2).split(\".\")[1];\n// return msg;\n\nif(count_ !== jsonstring.date+' '+jsonstring.time){\n    msg.payload = jsonstring // JSON.stringify(jsonstring);\n    msg.topic = \"get_mqtt\";\n    context.set('count_',jsonstring.date+' '+jsonstring.time);\n    // msg.payload = count_\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 500,
        "wires": [
            [
                "29ed3412ecbaa932",
                "9d76b5b515a5bc7d"
            ]
        ]
    },
    {
        "id": "db82214066b0f77d",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "filter data",
        "func": "\nvar result = msg.payload;\n\nvar timestamp = msg.timer;\nvar ntime = timestamp.split(\" \");\nvar nowtime = ntime[1];\nvar nowdate = ntime[0];\n\nvar nminute = nowtime.split(\":\");\nvar nowminute = Number(nminute[1]);\nvar old_minute = context.get('old_nowminute')||0;\nold_minute = Number(old_minute)\n\nif(old_minute != nowminute){\n    context.set('old_nowminute',nowminute);\n\n    // var result = JSON.parse(output);\n    var temp_out;\n    var hum_out;\n    var light_out;\n    var temp_in;\n    var hum_in;\n    var light_in;\n    var soil_in;\n    if(result.data.temp_out  === undefined ){ temp_out  = 0; }else{ temp_out  = result.data.temp_out; }\n    if(result.data.hum_out   === undefined ){ hum_out   = 0; }else{ hum_out   = result.data.hum_out; }\n    if(result.data.light_out === undefined ){ light_out = 0; }else{ light_out = result.data.light_out; }\n    if(result.data.temp_in   === undefined ){ temp_in   = 0; }else{ temp_in   = result.data.temp_in; }\n    if(result.data.hum_in    === undefined ){ hum_in    = 0; }else{ hum_in    = result.data.hum_in; }\n    if(result.data.light_in  === undefined ){ light_in  = 0; }else{ light_in  = result.data.light_in; }\n    if(result.data.soil_in   === undefined ){ soil_in   = 0; }else{ soil_in   = result.data.soil_in; }\n\n    var jsonstring ={};\n    jsonstring = {\n        \"serial_id\": result.serial_id, \n        \"date\": nowdate, \n        \"time\":nowtime,\n        \"data\":{ \n            \"temp_out\": temp_out, \n            \"hum_out\":hum_out, \n            \"light_out\":light_out, \n            \"temp_in\":temp_in, \n            \"hum_in\":hum_in, \n            \"light_in\":light_in, \n            \"soil_in\":soil_in \n        } \n    };\n    msg.payload = jsonstring // JSON.stringify(jsonstring);\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 460,
        "wires": [
            [
                "e9112214efdea2fe"
            ]
        ]
    },
    {
        "id": "99fe0831eb87afd4",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "equation data",
        "func": "if (msg.topic == \"mqtt_data\"){\n    context.set('mqtt_data',msg.payload);\n}\nif (msg.topic == \"mqtt_equation\"){\n    context.set('mqtt_equation',msg.payload);\n}\nvar n_data_mq = context.get('mqtt_data') || 'n';\nvar mqtt_equation = context.get('mqtt_equation') || 'n';\nvar count_ = context.get('count_') || 0;\n\nif(n_data_mq === 'n'){\n    return false;\n}\nif(mqtt_equation === 'n'){\n    return false;\n}\n// var n_data_mq = JSON.parse(mqtt_data);\nvar eq = JSON.parse(mqtt_equation);\nvar d_1;\nvar d_2; \nvar d_3;\nvar d_4;\nvar d_5;\nvar d_6;\nvar d_7;\nif(n_data_mq.data.temp_out  === undefined ){ \n    d_1 = 0; \n}else{\n    var e_1 = eq['e_1'].replaceAll('x', n_data_mq.data.temp_out);\n    if(e_1.split(\"^\").length > 1){ var e1_ = e_1.replaceAll(\"^\",'**') }else{ var e1_ = e_1 }\n    if(eval(e1_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_1 = eval(e1_); \n    }else{ \n        d_1 = eval(e1_).toFixed(2);\n    }\n }\n if(n_data_mq.data.hum_out   === undefined ){ \n    d_2 = 0; \n }else{ \n    var e_2 = eq['e_2'].replaceAll(\"x\", n_data_mq.data.hum_out);\n    if(e_2.split(\"^\").length > 1){ var e2_ = e_2.replaceAll(\"^\",'**') }else{ var e2_ = e_2 }\n    if(eval(e2_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_2 = eval(e2_); \n    }else{ \n        d_2 = eval(e2_).toFixed(2); \n    }\n }\n if(n_data_mq.data.light_out === undefined ){ \n    d_3 = 0; \n }else{ \n    var e_3 = eq['e_3'].replaceAll(\"x\", n_data_mq.data.light_out);\n    if(e_3.split(\"^\").length > 1){ var e3_ = e_3.replaceAll(\"^\",'**') }else{ var e3_ = e_3 }\n    if(eval(e3_).toFixed(2).toString().split(\".\")[1] === \"00\"){ var d_3 = eval(e3_); }else{ var d_3 = eval(e3_).toFixed(2); }\n}\nif(n_data_mq.data.temp_in   === undefined ){ \n    d_4 = 0; \n}else{ \n    var e_4 = eq['e_4'].replaceAll(\"x\", n_data_mq.data.temp_in);\n    if(e_4.split(\"^\").length > 1){ var e4_ = e_4.replaceAll(\"^\",'**') }else{ var e4_ = e_4 }\n    if(eval(e4_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_4 = eval(e4_); \n    }else{ \n        d_4 = eval(e4_).toFixed(2); \n    }\n}\nif(n_data_mq.data.hum_in    === undefined ){ \n    d_5 = 0; \n}else{ \n    var e_5 = eq['e_5'].replaceAll(\"x\", n_data_mq.data.hum_in);\n    if(e_5.split(\"^\").length > 1){ var e5_ = e_5.replaceAll(\"^\",'**') }else{ var e5_ = e_5 }\n    if(eval(e5_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_5 = eval(e5_); \n    }else{ \n        d_5 = eval(e5_).toFixed(2); \n    }\n}\nif(n_data_mq.data.light_in  === undefined ){ \n    d_6 = 0; \n}else{ \n    var e_6 = eq['e_6'].replaceAll(\"x\", n_data_mq.data.light_in);\n    if(e_6.split(\"^\").length > 1){ var e6_ = e_6.replaceAll(\"^\",'**') }else{ var e6_ = e_6 }\n    if(eval(e6_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_6 = eval(e6_); \n    }else{ \n        d_6 = eval(e6_).toFixed(2); \n    }\n}\nif(n_data_mq.data.soil_in   === undefined ){ \n    d_7 = 0; \n}else{ \n    var e_7 = eq['e_7'].replaceAll('x', n_data_mq.data.soil_in);\n    if(e_7.split(\"^\").length > 1){ var e7_ = e_7.replaceAll(\"^\",'**'); }else{ var e7_ = e_7; }\n    if(eq['e_7'] === \"(-0.0346 * (x)^2) + (3.9116 * x) - 0.3984\"){\n        if(eval(e7_) < 0){\n            d_7 = 0;\n        }else if(eval(e7_) > 100){\n            d_7 = 100;\n        }else{\n            if(eval(e7_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n                d_7 = eval(e7_); \n            }else{ \n                d_7 = eval(e7_).toFixed(2); \n            }\n         }\n    }else{\n        if(eval(e7_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n            d_7 = eval(e7_); \n        }else{ \n            d_7 = eval(e7_).toFixed(2); \n        }\n    }\n}\n\nvar jsonstring ={};\njsonstring = {\n    \"serial_id\": n_data_mq.serial_id, \n    \"date\": n_data_mq.date, \n    \"time\": n_data_mq.time,\n    \"data\":{ \n        \"temp_out\": d_1, \n        \"hum_out\":  d_2, \n        \"light_out\":d_3, \n        \"temp_in\":  d_4, \n        \"hum_in\":   d_5, \n        \"light_in\": d_6, \n        \"soil_in\":  d_7\n    } \n};\n// msg.payload = eval(eq['e_1'].split(\"x\")[0] + n_data_mq.data.soil_in  + eq['e_1'].split(\"x\")[1]).toFixed(2).split(\".\")[1];\n// return msg;\n\nif(count_ !== jsonstring.date+' '+jsonstring.time){\n    msg.payload = jsonstring // JSON.stringify(jsonstring);\n    msg.topic = \"get_mqtt\";\n    context.set('count_',jsonstring.date+' '+jsonstring.time);\n    // msg.payload = count_\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 660,
        "wires": [
            [
                "78055cd3e7ad0d06",
                "102895429242dcac"
            ]
        ]
    },
    {
        "id": "bc2676e305ab8b97",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "filter data",
        "func": "\nvar result = msg.payload;\n\nvar timestamp = msg.timer;\nvar ntime = timestamp.split(\" \");\nvar nowtime = ntime[1];\nvar nowdate = ntime[0];\n\nvar nminute = nowtime.split(\":\");\nvar nowminute = Number(nminute[1]);\nvar old_minute = context.get('old_nowminute')||0;\nold_minute = Number(old_minute)\n\nif(old_minute != nowminute){\n    context.set('old_nowminute',nowminute);\n\n    // var result = JSON.parse(output);\n    var temp_out;\n    var hum_out;\n    var light_out;\n    var temp_in;\n    var hum_in;\n    var light_in;\n    var soil_in;\n    if(result.data.temp_out  === undefined ){ temp_out  = 0; }else{ temp_out  = result.data.temp_out; }\n    if(result.data.hum_out   === undefined ){ hum_out   = 0; }else{ hum_out   = result.data.hum_out; }\n    if(result.data.light_out === undefined ){ light_out = 0; }else{ light_out = result.data.light_out; }\n    if(result.data.temp_in   === undefined ){ temp_in   = 0; }else{ temp_in   = result.data.temp_in; }\n    if(result.data.hum_in    === undefined ){ hum_in    = 0; }else{ hum_in    = result.data.hum_in; }\n    if(result.data.light_in  === undefined ){ light_in  = 0; }else{ light_in  = result.data.light_in; }\n    if(result.data.soil_in   === undefined ){ soil_in   = 0; }else{ soil_in   = result.data.soil_in; }\n\n    var jsonstring ={};\n    jsonstring = {\n        \"serial_id\": result.serial_id, \n        \"date\": nowdate, \n        \"time\":nowtime,\n        \"data\":{ \n            \"temp_out\": temp_out, \n            \"hum_out\":hum_out, \n            \"light_out\":light_out, \n            \"temp_in\":temp_in, \n            \"hum_in\":hum_in, \n            \"light_in\":light_in, \n            \"soil_in\":soil_in \n        } \n    };\n    msg.payload = jsonstring // JSON.stringify(jsonstring);\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 620,
        "wires": [
            [
                "89c01bb5523cf894"
            ]
        ]
    },
    {
        "id": "485b29611edf7568",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "equation data",
        "func": "if (msg.topic == \"mqtt_data\"){\n    context.set('mqtt_data',msg.payload);\n}\nif (msg.topic == \"mqtt_equation\"){\n    context.set('mqtt_equation',msg.payload);\n}\nvar n_data_mq = context.get('mqtt_data') || 'n';\nvar mqtt_equation = context.get('mqtt_equation') || 'n';\nvar count_ = context.get('count_') || 0;\n\nif(n_data_mq === 'n'){\n    return false;\n}\nif(mqtt_equation === 'n'){\n    return false;\n}\n// var n_data_mq = JSON.parse(mqtt_data);\nvar eq = JSON.parse(mqtt_equation);\nvar d_1;\nvar d_2; \nvar d_3;\nvar d_4;\nvar d_5;\nvar d_6;\nvar d_7;\nif(n_data_mq.data.temp_out  === undefined ){ \n    d_1 = 0; \n}else{\n    var e_1 = eq['e_1'].replaceAll('x', n_data_mq.data.temp_out);\n    if(e_1.split(\"^\").length > 1){ var e1_ = e_1.replaceAll(\"^\",'**') }else{ var e1_ = e_1 }\n    if(eval(e1_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_1 = eval(e1_); \n    }else{ \n        d_1 = eval(e1_).toFixed(2);\n    }\n }\n if(n_data_mq.data.hum_out   === undefined ){ \n    d_2 = 0; \n }else{ \n    var e_2 = eq['e_2'].replaceAll(\"x\", n_data_mq.data.hum_out);\n    if(e_2.split(\"^\").length > 1){ var e2_ = e_2.replaceAll(\"^\",'**') }else{ var e2_ = e_2 }\n    if(eval(e2_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_2 = eval(e2_); \n    }else{ \n        d_2 = eval(e2_).toFixed(2); \n    }\n }\n if(n_data_mq.data.light_out === undefined ){ \n    d_3 = 0; \n }else{ \n    var e_3 = eq['e_3'].replaceAll(\"x\", n_data_mq.data.light_out);\n    if(e_3.split(\"^\").length > 1){ var e3_ = e_3.replaceAll(\"^\",'**') }else{ var e3_ = e_3 }\n    if(eval(e3_).toFixed(2).toString().split(\".\")[1] === \"00\"){ var d_3 = eval(e3_); }else{ var d_3 = eval(e3_).toFixed(2); }\n}\nif(n_data_mq.data.temp_in   === undefined ){ \n    d_4 = 0; \n}else{ \n    var e_4 = eq['e_4'].replaceAll(\"x\", n_data_mq.data.temp_in);\n    if(e_4.split(\"^\").length > 1){ var e4_ = e_4.replaceAll(\"^\",'**') }else{ var e4_ = e_4 }\n    if(eval(e4_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_4 = eval(e4_); \n    }else{ \n        d_4 = eval(e4_).toFixed(2); \n    }\n}\nif(n_data_mq.data.hum_in    === undefined ){ \n    d_5 = 0; \n}else{ \n    var e_5 = eq['e_5'].replaceAll(\"x\", n_data_mq.data.hum_in);\n    if(e_5.split(\"^\").length > 1){ var e5_ = e_5.replaceAll(\"^\",'**') }else{ var e5_ = e_5 }\n    if(eval(e5_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_5 = eval(e5_); \n    }else{ \n        d_5 = eval(e5_).toFixed(2); \n    }\n}\nif(n_data_mq.data.light_in  === undefined ){ \n    d_6 = 0; \n}else{ \n    var e_6 = eq['e_6'].replaceAll(\"x\", n_data_mq.data.light_in);\n    if(e_6.split(\"^\").length > 1){ var e6_ = e_6.replaceAll(\"^\",'**') }else{ var e6_ = e_6 }\n    if(eval(e6_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_6 = eval(e6_); \n    }else{ \n        d_6 = eval(e6_).toFixed(2); \n    }\n}\nif(n_data_mq.data.soil_in   === undefined ){ \n    d_7 = 0; \n}else{ \n    var e_7 = eq['e_7'].replaceAll('x', n_data_mq.data.soil_in);\n    if(e_7.split(\"^\").length > 1){ var e7_ = e_7.replaceAll(\"^\",'**'); }else{ var e7_ = e_7; }\n    if(eq['e_7'] === \"(-0.0346 * (x)^2) + (3.9116 * x) - 0.3984\"){\n        if(eval(e7_) < 0){\n            d_7 = 0;\n        }else if(eval(e7_) > 100){\n            d_7 = 100;\n        }else{\n            if(eval(e7_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n                d_7 = eval(e7_); \n            }else{ \n                d_7 = eval(e7_).toFixed(2); \n            }\n         }\n    }else{\n        if(eval(e7_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n            d_7 = eval(e7_); \n        }else{ \n            d_7 = eval(e7_).toFixed(2); \n        }\n    }\n}\n\nvar jsonstring ={};\njsonstring = {\n    \"serial_id\": n_data_mq.serial_id, \n    \"date\": n_data_mq.date, \n    \"time\": n_data_mq.time,\n    \"data\":{ \n        \"temp_out\": d_1, \n        \"hum_out\":  d_2, \n        \"light_out\":d_3, \n        \"temp_in\":  d_4, \n        \"hum_in\":   d_5, \n        \"light_in\": d_6, \n        \"soil_in\":  d_7\n    } \n};\n// msg.payload = eval(eq['e_1'].split(\"x\")[0] + n_data_mq.data.soil_in  + eq['e_1'].split(\"x\")[1]).toFixed(2).split(\".\")[1];\n// return msg;\n\nif(count_ !== jsonstring.date+' '+jsonstring.time){\n    msg.payload = jsonstring // JSON.stringify(jsonstring);\n    msg.topic = \"get_mqtt\";\n    context.set('count_',jsonstring.date+' '+jsonstring.time);\n    // msg.payload = count_\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 820,
        "wires": [
            [
                "d1e71a55c765eb37",
                "4d26f4fa396edb80"
            ]
        ]
    },
    {
        "id": "81129df9fc083c54",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "filter data",
        "func": "\nvar result = msg.payload;\n\nvar timestamp = msg.timer;\nvar ntime = timestamp.split(\" \");\nvar nowtime = ntime[1];\nvar nowdate = ntime[0];\n\nvar nminute = nowtime.split(\":\");\nvar nowminute = Number(nminute[1]);\nvar old_minute = context.get('old_nowminute')||0;\nold_minute = Number(old_minute)\n\nif(old_minute != nowminute){\n    context.set('old_nowminute',nowminute);\n\n    // var result = JSON.parse(output);\n    var temp_out;\n    var hum_out;\n    var light_out;\n    var temp_in;\n    var hum_in;\n    var light_in;\n    var soil_in;\n    if(result.data.temp_out  === undefined ){ temp_out  = 0; }else{ temp_out  = result.data.temp_out; }\n    if(result.data.hum_out   === undefined ){ hum_out   = 0; }else{ hum_out   = result.data.hum_out; }\n    if(result.data.light_out === undefined ){ light_out = 0; }else{ light_out = result.data.light_out; }\n    if(result.data.temp_in   === undefined ){ temp_in   = 0; }else{ temp_in   = result.data.temp_in; }\n    if(result.data.hum_in    === undefined ){ hum_in    = 0; }else{ hum_in    = result.data.hum_in; }\n    if(result.data.light_in  === undefined ){ light_in  = 0; }else{ light_in  = result.data.light_in; }\n    if(result.data.soil_in   === undefined ){ soil_in   = 0; }else{ soil_in   = result.data.soil_in; }\n\n    var jsonstring ={};\n    jsonstring = {\n        \"serial_id\": result.serial_id, \n        \"date\": nowdate, \n        \"time\":nowtime,\n        \"data\":{ \n            \"temp_out\": temp_out, \n            \"hum_out\":hum_out, \n            \"light_out\":light_out, \n            \"temp_in\":temp_in, \n            \"hum_in\":hum_in, \n            \"light_in\":light_in, \n            \"soil_in\":soil_in \n        } \n    };\n    msg.payload = jsonstring // JSON.stringify(jsonstring);\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 780,
        "wires": [
            [
                "98fa1dac10b8244a"
            ]
        ]
    },
    {
        "id": "fc1884a0f703a195",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "equation data",
        "func": "if (msg.topic == \"mqtt_data\"){\n    context.set('mqtt_data',msg.payload);\n}\nif (msg.topic == \"mqtt_equation\"){\n    context.set('mqtt_equation',msg.payload);\n}\nvar n_data_mq = context.get('mqtt_data') || 'n';\nvar mqtt_equation = context.get('mqtt_equation') || 'n';\nvar count_ = context.get('count_') || 0;\n\nif(n_data_mq === 'n'){\n    return false;\n}\nif(mqtt_equation === 'n'){\n    return false;\n}\n// var n_data_mq = JSON.parse(mqtt_data);\nvar eq = JSON.parse(mqtt_equation);\nvar d_1;\nvar d_2; \nvar d_3;\nvar d_4;\nvar d_5;\nvar d_6;\nvar d_7;\nif(n_data_mq.data.temp_out  === undefined ){ \n    d_1 = 0; \n}else{\n    var e_1 = eq['e_1'].replaceAll('x', n_data_mq.data.temp_out);\n    if(e_1.split(\"^\").length > 1){ var e1_ = e_1.replaceAll(\"^\",'**') }else{ var e1_ = e_1 }\n    if(eval(e1_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_1 = eval(e1_); \n    }else{ \n        d_1 = eval(e1_).toFixed(2);\n    }\n }\n if(n_data_mq.data.hum_out   === undefined ){ \n    d_2 = 0; \n }else{ \n    var e_2 = eq['e_2'].replaceAll(\"x\", n_data_mq.data.hum_out);\n    if(e_2.split(\"^\").length > 1){ var e2_ = e_2.replaceAll(\"^\",'**') }else{ var e2_ = e_2 }\n    if(eval(e2_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_2 = eval(e2_); \n    }else{ \n        d_2 = eval(e2_).toFixed(2); \n    }\n }\n if(n_data_mq.data.light_out === undefined ){ \n    d_3 = 0; \n }else{ \n    var e_3 = eq['e_3'].replaceAll(\"x\", n_data_mq.data.light_out);\n    if(e_3.split(\"^\").length > 1){ var e3_ = e_3.replaceAll(\"^\",'**') }else{ var e3_ = e_3 }\n    if(eval(e3_).toFixed(2).toString().split(\".\")[1] === \"00\"){ var d_3 = eval(e3_); }else{ var d_3 = eval(e3_).toFixed(2); }\n}\nif(n_data_mq.data.temp_in   === undefined ){ \n    d_4 = 0; \n}else{ \n    var e_4 = eq['e_4'].replaceAll(\"x\", n_data_mq.data.temp_in);\n    if(e_4.split(\"^\").length > 1){ var e4_ = e_4.replaceAll(\"^\",'**') }else{ var e4_ = e_4 }\n    if(eval(e4_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_4 = eval(e4_); \n    }else{ \n        d_4 = eval(e4_).toFixed(2); \n    }\n}\nif(n_data_mq.data.hum_in    === undefined ){ \n    d_5 = 0; \n}else{ \n    var e_5 = eq['e_5'].replaceAll(\"x\", n_data_mq.data.hum_in);\n    if(e_5.split(\"^\").length > 1){ var e5_ = e_5.replaceAll(\"^\",'**') }else{ var e5_ = e_5 }\n    if(eval(e5_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_5 = eval(e5_); \n    }else{ \n        d_5 = eval(e5_).toFixed(2); \n    }\n}\nif(n_data_mq.data.light_in  === undefined ){ \n    d_6 = 0; \n}else{ \n    var e_6 = eq['e_6'].replaceAll(\"x\", n_data_mq.data.light_in);\n    if(e_6.split(\"^\").length > 1){ var e6_ = e_6.replaceAll(\"^\",'**') }else{ var e6_ = e_6 }\n    if(eval(e6_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_6 = eval(e6_); \n    }else{ \n        d_6 = eval(e6_).toFixed(2); \n    }\n}\nif(n_data_mq.data.soil_in   === undefined ){ \n    d_7 = 0; \n}else{ \n    var e_7 = eq['e_7'].replaceAll('x', n_data_mq.data.soil_in);\n    if(e_7.split(\"^\").length > 1){ var e7_ = e_7.replaceAll(\"^\",'**'); }else{ var e7_ = e_7; }\n    if(eq['e_7'] === \"(-0.0346 * (x)^2) + (3.9116 * x) - 0.3984\"){\n        if(eval(e7_) < 0){\n            d_7 = 0;\n        }else if(eval(e7_) > 100){\n            d_7 = 100;\n        }else{\n            if(eval(e7_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n                d_7 = eval(e7_); \n            }else{ \n                d_7 = eval(e7_).toFixed(2); \n            }\n         }\n    }else{\n        if(eval(e7_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n            d_7 = eval(e7_); \n        }else{ \n            d_7 = eval(e7_).toFixed(2); \n        }\n    }\n}\n\nvar jsonstring ={};\njsonstring = {\n    \"serial_id\": n_data_mq.serial_id, \n    \"date\": n_data_mq.date, \n    \"time\": n_data_mq.time,\n    \"data\":{ \n        \"temp_out\": d_1, \n        \"hum_out\":  d_2, \n        \"light_out\":d_3, \n        \"temp_in\":  d_4, \n        \"hum_in\":   d_5, \n        \"light_in\": d_6, \n        \"soil_in\":  d_7\n    } \n};\n// msg.payload = eval(eq['e_1'].split(\"x\")[0] + n_data_mq.data.soil_in  + eq['e_1'].split(\"x\")[1]).toFixed(2).split(\".\")[1];\n// return msg;\n\nif(count_ !== jsonstring.date+' '+jsonstring.time){\n    msg.payload = jsonstring // JSON.stringify(jsonstring);\n    msg.topic = \"get_mqtt\";\n    context.set('count_',jsonstring.date+' '+jsonstring.time);\n    // msg.payload = count_\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 980,
        "wires": [
            [
                "1b689eed4994617e",
                "afb88d734cacd235"
            ]
        ]
    },
    {
        "id": "8167e41bd5c08ede",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "filter data",
        "func": "\nvar result = msg.payload;\n\nvar timestamp = msg.timer;\nvar ntime = timestamp.split(\" \");\nvar nowtime = ntime[1];\nvar nowdate = ntime[0];\n\nvar nminute = nowtime.split(\":\");\nvar nowminute = Number(nminute[1]);\nvar old_minute = context.get('old_nowminute')||0;\nold_minute = Number(old_minute)\n\nif(old_minute != nowminute){\n    context.set('old_nowminute',nowminute);\n\n    // var result = JSON.parse(output);\n    var temp_out;\n    var hum_out;\n    var light_out;\n    var temp_in;\n    var hum_in;\n    var light_in;\n    var soil_in;\n    if(result.data.temp_out  === undefined ){ temp_out  = 0; }else{ temp_out  = result.data.temp_out; }\n    if(result.data.hum_out   === undefined ){ hum_out   = 0; }else{ hum_out   = result.data.hum_out; }\n    if(result.data.light_out === undefined ){ light_out = 0; }else{ light_out = result.data.light_out; }\n    if(result.data.temp_in   === undefined ){ temp_in   = 0; }else{ temp_in   = result.data.temp_in; }\n    if(result.data.hum_in    === undefined ){ hum_in    = 0; }else{ hum_in    = result.data.hum_in; }\n    if(result.data.light_in  === undefined ){ light_in  = 0; }else{ light_in  = result.data.light_in; }\n    if(result.data.soil_in   === undefined ){ soil_in   = 0; }else{ soil_in   = result.data.soil_in; }\n\n    var jsonstring ={};\n    jsonstring = {\n        \"serial_id\": result.serial_id, \n        \"date\": nowdate, \n        \"time\":nowtime,\n        \"data\":{ \n            \"temp_out\": temp_out, \n            \"hum_out\":hum_out, \n            \"light_out\":light_out, \n            \"temp_in\":temp_in, \n            \"hum_in\":hum_in, \n            \"light_in\":light_in, \n            \"soil_in\":soil_in \n        } \n    };\n    msg.payload = jsonstring // JSON.stringify(jsonstring);\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 940,
        "wires": [
            [
                "1bb9ab26892241ae"
            ]
        ]
    },
    {
        "id": "aa2873351d93839e",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "equation data",
        "func": "if (msg.topic == \"mqtt_data\"){\n    context.set('mqtt_data',msg.payload);\n}\nif (msg.topic == \"mqtt_equation\"){\n    context.set('mqtt_equation',msg.payload);\n}\nvar n_data_mq = context.get('mqtt_data') || 'n';\nvar mqtt_equation = context.get('mqtt_equation') || 'n';\nvar count_ = context.get('count_') || 0;\n\nif(n_data_mq === 'n'){\n    return false;\n}\nif(mqtt_equation === 'n'){\n    return false;\n}\n// var n_data_mq = JSON.parse(mqtt_data);\nvar eq = JSON.parse(mqtt_equation);\nvar d_1;\nvar d_2; \nvar d_3;\nvar d_4;\nvar d_5;\nvar d_6;\nvar d_7;\nif(n_data_mq.data.temp_out  === undefined ){ \n    d_1 = 0; \n}else{\n    var e_1 = eq['e_1'].replaceAll('x', n_data_mq.data.temp_out);\n    if(e_1.split(\"^\").length > 1){ var e1_ = e_1.replaceAll(\"^\",'**') }else{ var e1_ = e_1 }\n    if(eval(e1_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_1 = eval(e1_); \n    }else{ \n        d_1 = eval(e1_).toFixed(2);\n    }\n }\n if(n_data_mq.data.hum_out   === undefined ){ \n    d_2 = 0; \n }else{ \n    var e_2 = eq['e_2'].replaceAll(\"x\", n_data_mq.data.hum_out);\n    if(e_2.split(\"^\").length > 1){ var e2_ = e_2.replaceAll(\"^\",'**') }else{ var e2_ = e_2 }\n    if(eval(e2_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_2 = eval(e2_); \n    }else{ \n        d_2 = eval(e2_).toFixed(2); \n    }\n }\n if(n_data_mq.data.light_out === undefined ){ \n    d_3 = 0; \n }else{ \n    var e_3 = eq['e_3'].replaceAll(\"x\", n_data_mq.data.light_out);\n    if(e_3.split(\"^\").length > 1){ var e3_ = e_3.replaceAll(\"^\",'**') }else{ var e3_ = e_3 }\n    if(eval(e3_).toFixed(2).toString().split(\".\")[1] === \"00\"){ var d_3 = eval(e3_); }else{ var d_3 = eval(e3_).toFixed(2); }\n}\nif(n_data_mq.data.temp_in   === undefined ){ \n    d_4 = 0; \n}else{ \n    var e_4 = eq['e_4'].replaceAll(\"x\", n_data_mq.data.temp_in);\n    if(e_4.split(\"^\").length > 1){ var e4_ = e_4.replaceAll(\"^\",'**') }else{ var e4_ = e_4 }\n    if(eval(e4_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_4 = eval(e4_); \n    }else{ \n        d_4 = eval(e4_).toFixed(2); \n    }\n}\nif(n_data_mq.data.hum_in    === undefined ){ \n    d_5 = 0; \n}else{ \n    var e_5 = eq['e_5'].replaceAll(\"x\", n_data_mq.data.hum_in);\n    if(e_5.split(\"^\").length > 1){ var e5_ = e_5.replaceAll(\"^\",'**') }else{ var e5_ = e_5 }\n    if(eval(e5_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_5 = eval(e5_); \n    }else{ \n        d_5 = eval(e5_).toFixed(2); \n    }\n}\nif(n_data_mq.data.light_in  === undefined ){ \n    d_6 = 0; \n}else{ \n    var e_6 = eq['e_6'].replaceAll(\"x\", n_data_mq.data.light_in);\n    if(e_6.split(\"^\").length > 1){ var e6_ = e_6.replaceAll(\"^\",'**') }else{ var e6_ = e_6 }\n    if(eval(e6_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n        d_6 = eval(e6_); \n    }else{ \n        d_6 = eval(e6_).toFixed(2); \n    }\n}\nif(n_data_mq.data.soil_in   === undefined ){ \n    d_7 = 0; \n}else{ \n    var e_7 = eq['e_7'].replaceAll('x', n_data_mq.data.soil_in);\n    if(e_7.split(\"^\").length > 1){ var e7_ = e_7.replaceAll(\"^\",'**'); }else{ var e7_ = e_7; }\n    if(eq['e_7'] === \"(-0.0346 * (x)^2) + (3.9116 * x) - 0.3984\"){\n        if(eval(e7_) < 0){\n            d_7 = 0;\n        }else if(eval(e7_) > 100){\n            d_7 = 100;\n        }else{\n            if(eval(e7_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n                d_7 = eval(e7_); \n            }else{ \n                d_7 = eval(e7_).toFixed(2); \n            }\n         }\n    }else{\n        if(eval(e7_).toFixed(2).toString().split(\".\")[1] === \"00\"){ \n            d_7 = eval(e7_); \n        }else{ \n            d_7 = eval(e7_).toFixed(2); \n        }\n    }\n}\n\nvar jsonstring ={};\njsonstring = {\n    \"serial_id\": n_data_mq.serial_id, \n    \"date\": n_data_mq.date, \n    \"time\": n_data_mq.time,\n    \"data\":{ \n        \"temp_out\": d_1, \n        \"hum_out\":  d_2, \n        \"light_out\":d_3, \n        \"temp_in\":  d_4, \n        \"hum_in\":   d_5, \n        \"light_in\": d_6, \n        \"soil_in\":  d_7\n    } \n};\n// msg.payload = eval(eq['e_1'].split(\"x\")[0] + n_data_mq.data.soil_in  + eq['e_1'].split(\"x\")[1]).toFixed(2).split(\".\")[1];\n// return msg;\n\nif(count_ !== jsonstring.date+' '+jsonstring.time){\n    msg.payload = jsonstring // JSON.stringify(jsonstring);\n    msg.topic = \"get_mqtt\";\n    context.set('count_',jsonstring.date+' '+jsonstring.time);\n    // msg.payload = count_\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1180,
        "wires": [
            [
                "106e0658b9e7291c",
                "212cda779db4b3d7"
            ]
        ]
    },
    {
        "id": "0c22ec7466b62dca",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "filter data",
        "func": "\nvar result = msg.payload;\n\nvar timestamp = msg.timer;\nvar ntime = timestamp.split(\" \");\nvar nowtime = ntime[1];\nvar nowdate = ntime[0];\n\nvar nminute = nowtime.split(\":\");\nvar nowminute = Number(nminute[1]);\nvar old_minute = context.get('old_nowminute')||0;\nold_minute = Number(old_minute)\n\nif(old_minute != nowminute){\n    context.set('old_nowminute',nowminute);\n\n    // var result = JSON.parse(output);\n    var temp_out;\n    var hum_out;\n    var light_out;\n    var temp_in;\n    var hum_in;\n    var light_in;\n    var soil_in;\n    if(result.data.temp_out  === undefined ){ temp_out  = 0; }else{ temp_out  = result.data.temp_out; }\n    if(result.data.hum_out   === undefined ){ hum_out   = 0; }else{ hum_out   = result.data.hum_out; }\n    if(result.data.light_out === undefined ){ light_out = 0; }else{ light_out = result.data.light_out; }\n    if(result.data.temp_in   === undefined ){ temp_in   = 0; }else{ temp_in   = result.data.temp_in; }\n    if(result.data.hum_in    === undefined ){ hum_in    = 0; }else{ hum_in    = result.data.hum_in; }\n    if(result.data.light_in  === undefined ){ light_in  = 0; }else{ light_in  = result.data.light_in; }\n    if(result.data.soil_in   === undefined ){ soil_in   = 0; }else{ soil_in   = result.data.soil_in; }\n\n    var jsonstring ={};\n    jsonstring = {\n        \"serial_id\": result.serial_id, \n        \"date\": nowdate, \n        \"time\":nowtime,\n        \"data\":{ \n            \"temp_out\": temp_out, \n            \"hum_out\":hum_out, \n            \"light_out\":light_out, \n            \"temp_in\":temp_in, \n            \"hum_in\":hum_in, \n            \"light_in\":light_in, \n            \"soil_in\":soil_in \n        } \n    };\n    msg.payload = jsonstring // JSON.stringify(jsonstring);\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1140,
        "wires": [
            [
                "c6daa0b6e82fbb7b"
            ]
        ]
    },
    {
        "id": "867f22ba9d25290f",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "line_notify",
        "func": "\n// var output = msg.payload;\n\nif (msg.topic == \"config\") {\n    context.set('get_config', msg.payload);\n}\nif (msg.topic == \"get_mqtt\") {\n    context.set('get_mqtt', msg.payload);\n}\nvar n_config = context.get('get_config') || 0;\nvar result = context.get('get_mqtt') || 0;\nvar log_status_to = context.get('log_status_to') || 'No';\nvar log_status_ti = context.get('log_status_ti') || 'No';\nvar log_status_ho = context.get('log_status_ho') || 'No';\nvar log_status_hi = context.get('log_status_hi') || 'No';\nvar log_status_lo = context.get('log_status_lo') || 'No';\nvar log_status_li = context.get('log_status_li') || 'No';\nvar log_status_si = context.get('log_status_si') || 'No';\n\nif (n_config !== 0) {\n    if (result !== 0) {\n        // var result = JSON.parse(get_mqtt);\n        var get_db = n_config[result.serial_id];\n        // if(log_status_to == 'No'){\n        //     context.set('log_status_to',get_db[0].status);\n        // }\n        // msg.payload = log_status_to\n        // return msg;\n        // return false;\n        // var temp_out  = result.data.temp_out;\n        // var hum_out   = result.data.hum_out;\n        // var light_out = result.data.light_out;\n        // var temp_in   = result.data.temp_in;\n        // var hum_in    = result.data.hum_in;\n        // var light_in  = result.data.light_in;\n        // var soil_in   = result.data.soil_in;\n\n        // if(temp_out <= 0){\n        //     msg.payload =0\n        // }else{\n        //     msg.payload ='aas'\n        // }\n        for (var i = 0; i < 7; i++) {\n            if (get_db[i].name == 'temp_out') {\n                if (result.data.temp_out <= 0 || result.data.temp_out > 55) {\n                    if (log_status_to === 'No') { log_status_to = get_db[i].status; }\n                    if (log_status_to === 'good' && log_status_to !== 'No') {\n                        // msg.payload = result.data.temp_out;\n\n                        var data_c = [];\n                        data_c.push('Temp นอกโรงเรือน : ผิดปกติ')\n                        data_c.push('Temp_Out : ' + result.data.temp_out + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_out',\n                            status: 'bad'\n                        }\n                        context.set('log_status_to', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_to === 'No') { log_status_to = get_db[i].status; }\n                    if (log_status_to === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Temp นอกโรงเรือน : ปกติ')\n                        data_c.push('Temp_Out : ' + result.data.temp_out + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_out',\n                            status: 'good'\n                        }\n                        context.set('log_status_to', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name == 'temp_in') {\n                if (result.data.temp_in <= 0 || result.data.temp_out > 55) {\n                    if (log_status_ti === 'No') { log_status_ti = get_db[i].status; }\n                    if (log_status_ti == 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Temp ในโรงเรือน : ผิดปกติ')\n                        data_c.push('Temp_In : ' + result.data.temp_in + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_ti', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_ti === 'No') { log_status_ti = get_db[i].status; }\n                    if (log_status_ti == 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Temp ในโรงเรือน : ปกติ')\n                        data_c.push('Temp_In : ' + result.data.temp_in + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_ti', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'hum_out') {\n                if (result.data.hum_out <= 0 || result.data.hum_out > 100) {\n                    if (log_status_ho === 'No') { log_status_ho = get_db[i].status; }\n                    if (log_status_ho === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum นอกโรงเรือน : ผิดปกติ')\n                        data_c.push('Hum_Out : ' + result.data.hum_out + ' percentRh')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_out',\n                            status: 'bad'\n                        }\n                        context.set('log_status_ho', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_ho === 'No') { log_status_ho = get_db[i].status; }\n                    if (log_status_ho === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum นอกโรงเรือน : ปกติ')\n                        data_c.push('Hum_Out : ' + result.data.hum_out + ' percentRh')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_out',\n                            status: 'good'\n                        }\n                        context.set('log_status_ho', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'hum_in') {\n                if (result.data.hum_in <= 0 || result.data.hum_out > 100) {\n                    if (log_status_hi === 'No') { log_status_hi = get_db[i].status; }\n                    if (log_status_hi === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Hum_In : ' + result.data.hum_in + ' percentRh');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_hi', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_hi === 'No') { log_status_hi = get_db[i].status; }\n                    if (log_status_hi == 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum ในโรงเรือน : ปกติ');\n                        data_c.push('Hum_In : ' + result.data.hum_in + ' percentRh');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_hi', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'light_out') {\n                if (result.data.light_out < 0 || result.data.light_out > 260000) {\n                    if (log_status_lo === 'No') { log_status_lo = get_db[i].status; }\n                    if (log_status_lo === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light นอกโรงเรือน : ผิดปกติ');\n                        data_c.push('Light_Out : ' + result.data.light_out + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_out',\n                            status: 'bad'\n                        }\n                        context.set('log_status_lo', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_lo === 'No') { log_status_lo = get_db[i].status; }\n                    if (log_status_lo === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light นอกโรงเรือน : ปกติ');\n                        data_c.push('Light_Out : ' + result.data.light_out + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_out',\n                            status: 'good'\n                        }\n                        context.set('log_status_lo', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'light_in') {\n                if (result.data.light_in < 0 || result.data.light_out > 260000) {\n                    if (log_status_li === 'No') { log_status_li = get_db[i].status; }\n                    if (log_status_li === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Light_In : ' + result.data.light_in + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_li', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_li === 'No') { log_status_li = get_db[i].status; }\n                    if (log_status_li === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light ในโรงเรือน : ปกติ');\n                        data_c.push('Light_In : ' + result.data.light_in + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_li', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'soil_in') {\n                if (result.data.soil_in <= 0 || result.data.soil_in > 100) {\n                    if (log_status_si === 'No') { log_status_si = get_db[i].status; }\n                    if (log_status_si === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Soil ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Soil_In : ' + result.data.soil_in + ' percent');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'soil_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_si', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_si === 'No') { log_status_si = get_db[i].status; }\n                    if (log_status_si == 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Soil ในโรงเรือน : ปกติ');\n                        data_c.push('Soil_In : ' + result.data.soil_in + ' percent');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'soil_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_si', 'good');\n                        return msg;\n                    }\n                }\n            }\n        }\n\n        // msg.payload = get_db[0] // JSON.stringify(jsonstring);\n        // return msg;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "212cda779db4b3d7",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "line_notify",
        "func": "\n// var output = msg.payload;\n\nif (msg.topic == \"config\") {\n    context.set('get_config', msg.payload);\n}\nif (msg.topic == \"get_mqtt\") {\n    context.set('get_mqtt', msg.payload);\n}\nvar n_config = context.get('get_config') || 0;\nvar result = context.get('get_mqtt') || 0;\nvar log_status_to = context.get('log_status_to') || 'No';\nvar log_status_ti = context.get('log_status_ti') || 'No';\nvar log_status_ho = context.get('log_status_ho') || 'No';\nvar log_status_hi = context.get('log_status_hi') || 'No';\nvar log_status_lo = context.get('log_status_lo') || 'No';\nvar log_status_li = context.get('log_status_li') || 'No';\nvar log_status_si = context.get('log_status_si') || 'No';\n\nif (n_config !== 0) {\n    if (result !== 0) {\n        // var result = JSON.parse(get_mqtt);\n        var get_db = n_config[result.serial_id];\n        // if(log_status_to == 'No'){\n        //     context.set('log_status_to',get_db[0].status);\n        // }\n        // msg.payload = log_status_to\n        // return msg;\n        // return false;\n        // var temp_out  = result.data.temp_out;\n        // var hum_out   = result.data.hum_out;\n        // var light_out = result.data.light_out;\n        // var temp_in   = result.data.temp_in;\n        // var hum_in    = result.data.hum_in;\n        // var light_in  = result.data.light_in;\n        // var soil_in   = result.data.soil_in;\n\n        // if(temp_out <= 0){\n        //     msg.payload =0\n        // }else{\n        //     msg.payload ='aas'\n        // }\n        for (var i = 0; i < 7; i++) {\n            if (get_db[i].name == 'temp_out') {\n                if (result.data.temp_out <= 0 || result.data.temp_out > 55) {\n                    if (log_status_to === 'No') { log_status_to = get_db[i].status; }\n                    if (log_status_to === 'good' && log_status_to !== 'No') {\n                        // msg.payload = result.data.temp_out;\n\n                        var data_c = [];\n                        data_c.push('Temp นอกโรงเรือน : ผิดปกติ')\n                        data_c.push('Temp_Out : ' + result.data.temp_out + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_out',\n                            status: 'bad'\n                        }\n                        context.set('log_status_to', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_to === 'No') { log_status_to = get_db[i].status; }\n                    if (log_status_to === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Temp นอกโรงเรือน : ปกติ')\n                        data_c.push('Temp_Out : ' + result.data.temp_out + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_out',\n                            status: 'good'\n                        }\n                        context.set('log_status_to', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name == 'temp_in') {\n                if (result.data.temp_in <= 0 || result.data.temp_out > 55) {\n                    if (log_status_ti === 'No') { log_status_ti = get_db[i].status; }\n                    if (log_status_ti == 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Temp ในโรงเรือน : ผิดปกติ')\n                        data_c.push('Temp_In : ' + result.data.temp_in + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_ti', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_ti === 'No') { log_status_ti = get_db[i].status; }\n                    if (log_status_ti == 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Temp ในโรงเรือน : ปกติ')\n                        data_c.push('Temp_In : ' + result.data.temp_in + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_ti', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'hum_out') {\n                if (result.data.hum_out <= 0 || result.data.hum_out > 100) {\n                    if (log_status_ho === 'No') { log_status_ho = get_db[i].status; }\n                    if (log_status_ho === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum นอกโรงเรือน : ผิดปกติ')\n                        data_c.push('Hum_Out : ' + result.data.hum_out + ' percentRh')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_out',\n                            status: 'bad'\n                        }\n                        context.set('log_status_ho', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_ho === 'No') { log_status_ho = get_db[i].status; }\n                    if (log_status_ho === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum นอกโรงเรือน : ปกติ')\n                        data_c.push('Hum_Out : ' + result.data.hum_out + ' percentRh')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_out',\n                            status: 'good'\n                        }\n                        context.set('log_status_ho', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'hum_in') {\n                if (result.data.hum_in <= 0 || result.data.hum_out > 100) {\n                    if (log_status_hi === 'No') { log_status_hi = get_db[i].status; }\n                    if (log_status_hi === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Hum_In : ' + result.data.hum_in + ' percentRh');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_hi', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_hi === 'No') { log_status_hi = get_db[i].status; }\n                    if (log_status_hi == 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum ในโรงเรือน : ปกติ');\n                        data_c.push('Hum_In : ' + result.data.hum_in + ' percentRh');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_hi', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'light_out') {\n                if (result.data.light_out < 0 || result.data.light_out > 260000) {\n                    if (log_status_lo === 'No') { log_status_lo = get_db[i].status; }\n                    if (log_status_lo === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light นอกโรงเรือน : ผิดปกติ');\n                        data_c.push('Light_Out : ' + result.data.light_out + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_out',\n                            status: 'bad'\n                        }\n                        context.set('log_status_lo', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_lo === 'No') { log_status_lo = get_db[i].status; }\n                    if (log_status_lo === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light นอกโรงเรือน : ปกติ');\n                        data_c.push('Light_Out : ' + result.data.light_out + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_out',\n                            status: 'good'\n                        }\n                        context.set('log_status_lo', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'light_in') {\n                if (result.data.light_in < 0 || result.data.light_out > 260000) {\n                    if (log_status_li === 'No') { log_status_li = get_db[i].status; }\n                    if (log_status_li === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Light_In : ' + result.data.light_in + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_li', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_li === 'No') { log_status_li = get_db[i].status; }\n                    if (log_status_li === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light ในโรงเรือน : ปกติ');\n                        data_c.push('Light_In : ' + result.data.light_in + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_li', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'soil_in') {\n                if (result.data.soil_in <= 0 || result.data.soil_in > 100) {\n                    if (log_status_si === 'No') { log_status_si = get_db[i].status; }\n                    if (log_status_si === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Soil ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Soil_In : ' + result.data.soil_in + ' percent');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'soil_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_si', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_si === 'No') { log_status_si = get_db[i].status; }\n                    if (log_status_si == 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Soil ในโรงเรือน : ปกติ');\n                        data_c.push('Soil_In : ' + result.data.soil_in + ' percent');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'soil_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_si', 'good');\n                        return msg;\n                    }\n                }\n            }\n        }\n\n        // msg.payload = get_db[0] // JSON.stringify(jsonstring);\n        // return msg;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "afb88d734cacd235",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "line_notify",
        "func": "\n// var output = msg.payload;\n\nif (msg.topic == \"config\") {\n    context.set('get_config', msg.payload);\n}\nif (msg.topic == \"get_mqtt\") {\n    context.set('get_mqtt', msg.payload);\n}\nvar n_config = context.get('get_config') || 0;\nvar result = context.get('get_mqtt') || 0;\nvar log_status_to = context.get('log_status_to') || 'No';\nvar log_status_ti = context.get('log_status_ti') || 'No';\nvar log_status_ho = context.get('log_status_ho') || 'No';\nvar log_status_hi = context.get('log_status_hi') || 'No';\nvar log_status_lo = context.get('log_status_lo') || 'No';\nvar log_status_li = context.get('log_status_li') || 'No';\nvar log_status_si = context.get('log_status_si') || 'No';\n\nif (n_config !== 0) {\n    if (result !== 0) {\n        // var result = JSON.parse(get_mqtt);\n        var get_db = n_config[result.serial_id];\n        // if(log_status_to == 'No'){\n        //     context.set('log_status_to',get_db[0].status);\n        // }\n        // msg.payload = log_status_to\n        // return msg;\n        // return false;\n        // var temp_out  = result.data.temp_out;\n        // var hum_out   = result.data.hum_out;\n        // var light_out = result.data.light_out;\n        // var temp_in   = result.data.temp_in;\n        // var hum_in    = result.data.hum_in;\n        // var light_in  = result.data.light_in;\n        // var soil_in   = result.data.soil_in;\n\n        // if(temp_out <= 0){\n        //     msg.payload =0\n        // }else{\n        //     msg.payload ='aas'\n        // }\n        for (var i = 0; i < 7; i++) {\n            if (get_db[i].name == 'temp_out') {\n                if (result.data.temp_out <= 0 || result.data.temp_out > 55) {\n                    if (log_status_to === 'No') { log_status_to = get_db[i].status; }\n                    if (log_status_to === 'good' && log_status_to !== 'No') {\n                        // msg.payload = result.data.temp_out;\n\n                        var data_c = [];\n                        data_c.push('Temp นอกโรงเรือน : ผิดปกติ')\n                        data_c.push('Temp_Out : ' + result.data.temp_out + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_out',\n                            status: 'bad'\n                        }\n                        context.set('log_status_to', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_to === 'No') { log_status_to = get_db[i].status; }\n                    if (log_status_to === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Temp นอกโรงเรือน : ปกติ')\n                        data_c.push('Temp_Out : ' + result.data.temp_out + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_out',\n                            status: 'good'\n                        }\n                        context.set('log_status_to', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name == 'temp_in') {\n                if (result.data.temp_in <= 0 || result.data.temp_out > 55) {\n                    if (log_status_ti === 'No') { log_status_ti = get_db[i].status; }\n                    if (log_status_ti == 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Temp ในโรงเรือน : ผิดปกติ')\n                        data_c.push('Temp_In : ' + result.data.temp_in + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_ti', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_ti === 'No') { log_status_ti = get_db[i].status; }\n                    if (log_status_ti == 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Temp ในโรงเรือน : ปกติ')\n                        data_c.push('Temp_In : ' + result.data.temp_in + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_ti', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'hum_out') {\n                if (result.data.hum_out <= 0 || result.data.hum_out > 100) {\n                    if (log_status_ho === 'No') { log_status_ho = get_db[i].status; }\n                    if (log_status_ho === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum นอกโรงเรือน : ผิดปกติ')\n                        data_c.push('Hum_Out : ' + result.data.hum_out + ' percentRh')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_out',\n                            status: 'bad'\n                        }\n                        context.set('log_status_ho', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_ho === 'No') { log_status_ho = get_db[i].status; }\n                    if (log_status_ho === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum นอกโรงเรือน : ปกติ')\n                        data_c.push('Hum_Out : ' + result.data.hum_out + ' percentRh')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_out',\n                            status: 'good'\n                        }\n                        context.set('log_status_ho', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'hum_in') {\n                if (result.data.hum_in <= 0 || result.data.hum_out > 100) {\n                    if (log_status_hi === 'No') { log_status_hi = get_db[i].status; }\n                    if (log_status_hi === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Hum_In : ' + result.data.hum_in + ' percentRh');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_hi', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_hi === 'No') { log_status_hi = get_db[i].status; }\n                    if (log_status_hi == 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum ในโรงเรือน : ปกติ');\n                        data_c.push('Hum_In : ' + result.data.hum_in + ' percentRh');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_hi', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'light_out') {\n                if (result.data.light_out < 0 || result.data.light_out > 260000) {\n                    if (log_status_lo === 'No') { log_status_lo = get_db[i].status; }\n                    if (log_status_lo === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light นอกโรงเรือน : ผิดปกติ');\n                        data_c.push('Light_Out : ' + result.data.light_out + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_out',\n                            status: 'bad'\n                        }\n                        context.set('log_status_lo', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_lo === 'No') { log_status_lo = get_db[i].status; }\n                    if (log_status_lo === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light นอกโรงเรือน : ปกติ');\n                        data_c.push('Light_Out : ' + result.data.light_out + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_out',\n                            status: 'good'\n                        }\n                        context.set('log_status_lo', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'light_in') {\n                if (result.data.light_in < 0 || result.data.light_out > 260000) {\n                    if (log_status_li === 'No') { log_status_li = get_db[i].status; }\n                    if (log_status_li === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Light_In : ' + result.data.light_in + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_li', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_li === 'No') { log_status_li = get_db[i].status; }\n                    if (log_status_li === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light ในโรงเรือน : ปกติ');\n                        data_c.push('Light_In : ' + result.data.light_in + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_li', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'soil_in') {\n                if (result.data.soil_in <= 0 || result.data.soil_in > 100) {\n                    if (log_status_si === 'No') { log_status_si = get_db[i].status; }\n                    if (log_status_si === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Soil ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Soil_In : ' + result.data.soil_in + ' percent');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'soil_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_si', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_si === 'No') { log_status_si = get_db[i].status; }\n                    if (log_status_si == 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Soil ในโรงเรือน : ปกติ');\n                        data_c.push('Soil_In : ' + result.data.soil_in + ' percent');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'soil_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_si', 'good');\n                        return msg;\n                    }\n                }\n            }\n        }\n\n        // msg.payload = get_db[0] // JSON.stringify(jsonstring);\n        // return msg;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "4d26f4fa396edb80",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "line_notify",
        "func": "\n// var output = msg.payload;\n\nif (msg.topic == \"config\") {\n    context.set('get_config', msg.payload);\n}\nif (msg.topic == \"get_mqtt\") {\n    context.set('get_mqtt', msg.payload);\n}\nvar n_config = context.get('get_config') || 0;\nvar result = context.get('get_mqtt') || 0;\nvar log_status_to = context.get('log_status_to') || 'No';\nvar log_status_ti = context.get('log_status_ti') || 'No';\nvar log_status_ho = context.get('log_status_ho') || 'No';\nvar log_status_hi = context.get('log_status_hi') || 'No';\nvar log_status_lo = context.get('log_status_lo') || 'No';\nvar log_status_li = context.get('log_status_li') || 'No';\nvar log_status_si = context.get('log_status_si') || 'No';\n\nif (n_config !== 0) {\n    if (result !== 0) {\n        // var result = JSON.parse(get_mqtt);\n        var get_db = n_config[result.serial_id];\n        // if(log_status_to == 'No'){\n        //     context.set('log_status_to',get_db[0].status);\n        // }\n        // msg.payload = log_status_to\n        // return msg;\n        // return false;\n        // var temp_out  = result.data.temp_out;\n        // var hum_out   = result.data.hum_out;\n        // var light_out = result.data.light_out;\n        // var temp_in   = result.data.temp_in;\n        // var hum_in    = result.data.hum_in;\n        // var light_in  = result.data.light_in;\n        // var soil_in   = result.data.soil_in;\n\n        // if(temp_out <= 0){\n        //     msg.payload =0\n        // }else{\n        //     msg.payload ='aas'\n        // }\n        for (var i = 0; i < 7; i++) {\n            if (get_db[i].name == 'temp_out') {\n                if (result.data.temp_out <= 0 || result.data.temp_out > 55) {\n                    if (log_status_to === 'No') { log_status_to = get_db[i].status; }\n                    if (log_status_to === 'good' && log_status_to !== 'No') {\n                        // msg.payload = result.data.temp_out;\n\n                        var data_c = [];\n                        data_c.push('Temp นอกโรงเรือน : ผิดปกติ')\n                        data_c.push('Temp_Out : ' + result.data.temp_out + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_out',\n                            status: 'bad'\n                        }\n                        context.set('log_status_to', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_to === 'No') { log_status_to = get_db[i].status; }\n                    if (log_status_to === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Temp นอกโรงเรือน : ปกติ')\n                        data_c.push('Temp_Out : ' + result.data.temp_out + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_out',\n                            status: 'good'\n                        }\n                        context.set('log_status_to', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name == 'temp_in') {\n                if (result.data.temp_in <= 0 || result.data.temp_out > 55) {\n                    if (log_status_ti === 'No') { log_status_ti = get_db[i].status; }\n                    if (log_status_ti == 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Temp ในโรงเรือน : ผิดปกติ')\n                        data_c.push('Temp_In : ' + result.data.temp_in + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_ti', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_ti === 'No') { log_status_ti = get_db[i].status; }\n                    if (log_status_ti == 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Temp ในโรงเรือน : ปกติ')\n                        data_c.push('Temp_In : ' + result.data.temp_in + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_ti', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'hum_out') {\n                if (result.data.hum_out <= 0 || result.data.hum_out > 100) {\n                    if (log_status_ho === 'No') { log_status_ho = get_db[i].status; }\n                    if (log_status_ho === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum นอกโรงเรือน : ผิดปกติ')\n                        data_c.push('Hum_Out : ' + result.data.hum_out + ' percentRh')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_out',\n                            status: 'bad'\n                        }\n                        context.set('log_status_ho', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_ho === 'No') { log_status_ho = get_db[i].status; }\n                    if (log_status_ho === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum นอกโรงเรือน : ปกติ')\n                        data_c.push('Hum_Out : ' + result.data.hum_out + ' percentRh')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_out',\n                            status: 'good'\n                        }\n                        context.set('log_status_ho', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'hum_in') {\n                if (result.data.hum_in <= 0 || result.data.hum_out > 100) {\n                    if (log_status_hi === 'No') { log_status_hi = get_db[i].status; }\n                    if (log_status_hi === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Hum_In : ' + result.data.hum_in + ' percentRh');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_hi', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_hi === 'No') { log_status_hi = get_db[i].status; }\n                    if (log_status_hi == 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum ในโรงเรือน : ปกติ');\n                        data_c.push('Hum_In : ' + result.data.hum_in + ' percentRh');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_hi', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'light_out') {\n                if (result.data.light_out < 0 || result.data.light_out > 260000) {\n                    if (log_status_lo === 'No') { log_status_lo = get_db[i].status; }\n                    if (log_status_lo === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light นอกโรงเรือน : ผิดปกติ');\n                        data_c.push('Light_Out : ' + result.data.light_out + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_out',\n                            status: 'bad'\n                        }\n                        context.set('log_status_lo', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_lo === 'No') { log_status_lo = get_db[i].status; }\n                    if (log_status_lo === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light นอกโรงเรือน : ปกติ');\n                        data_c.push('Light_Out : ' + result.data.light_out + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_out',\n                            status: 'good'\n                        }\n                        context.set('log_status_lo', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'light_in') {\n                if (result.data.light_in < 0 || result.data.light_out > 260000) {\n                    if (log_status_li === 'No') { log_status_li = get_db[i].status; }\n                    if (log_status_li === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Light_In : ' + result.data.light_in + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_li', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_li === 'No') { log_status_li = get_db[i].status; }\n                    if (log_status_li === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light ในโรงเรือน : ปกติ');\n                        data_c.push('Light_In : ' + result.data.light_in + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_li', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'soil_in') {\n                if (result.data.soil_in <= 0 || result.data.soil_in > 100) {\n                    if (log_status_si === 'No') { log_status_si = get_db[i].status; }\n                    if (log_status_si === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Soil ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Soil_In : ' + result.data.soil_in + ' percent');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'soil_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_si', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_si === 'No') { log_status_si = get_db[i].status; }\n                    if (log_status_si == 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Soil ในโรงเรือน : ปกติ');\n                        data_c.push('Soil_In : ' + result.data.soil_in + ' percent');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'soil_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_si', 'good');\n                        return msg;\n                    }\n                }\n            }\n        }\n\n        // msg.payload = get_db[0] // JSON.stringify(jsonstring);\n        // return msg;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "102895429242dcac",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "line_notify",
        "func": "\n// var output = msg.payload;\n\nif (msg.topic == \"config\") {\n    context.set('get_config', msg.payload);\n}\nif (msg.topic == \"get_mqtt\") {\n    context.set('get_mqtt', msg.payload);\n}\nvar n_config = context.get('get_config') || 0;\nvar result = context.get('get_mqtt') || 0;\nvar log_status_to = context.get('log_status_to') || 'No';\nvar log_status_ti = context.get('log_status_ti') || 'No';\nvar log_status_ho = context.get('log_status_ho') || 'No';\nvar log_status_hi = context.get('log_status_hi') || 'No';\nvar log_status_lo = context.get('log_status_lo') || 'No';\nvar log_status_li = context.get('log_status_li') || 'No';\nvar log_status_si = context.get('log_status_si') || 'No';\n\nif (n_config !== 0) {\n    if (result !== 0) {\n        // var result = JSON.parse(get_mqtt);\n        var get_db = n_config[result.serial_id];\n        // if(log_status_to == 'No'){\n        //     context.set('log_status_to',get_db[0].status);\n        // }\n        // msg.payload = log_status_to\n        // return msg;\n        // return false;\n        // var temp_out  = result.data.temp_out;\n        // var hum_out   = result.data.hum_out;\n        // var light_out = result.data.light_out;\n        // var temp_in   = result.data.temp_in;\n        // var hum_in    = result.data.hum_in;\n        // var light_in  = result.data.light_in;\n        // var soil_in   = result.data.soil_in;\n\n        // if(temp_out <= 0){\n        //     msg.payload =0\n        // }else{\n        //     msg.payload ='aas'\n        // }\n        for (var i = 0; i < 7; i++) {\n            if (get_db[i].name == 'temp_out') {\n                if (result.data.temp_out <= 0 || result.data.temp_out > 55) {\n                    if (log_status_to === 'No') { log_status_to = get_db[i].status; }\n                    if (log_status_to === 'good' && log_status_to !== 'No') {\n                        // msg.payload = result.data.temp_out;\n\n                        var data_c = [];\n                        data_c.push('Temp นอกโรงเรือน : ผิดปกติ')\n                        data_c.push('Temp_Out : ' + result.data.temp_out + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_out',\n                            status: 'bad'\n                        }\n                        context.set('log_status_to', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_to === 'No') { log_status_to = get_db[i].status; }\n                    if (log_status_to === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Temp นอกโรงเรือน : ปกติ')\n                        data_c.push('Temp_Out : ' + result.data.temp_out + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_out',\n                            status: 'good'\n                        }\n                        context.set('log_status_to', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name == 'temp_in') {\n                if (result.data.temp_in <= 0 || result.data.temp_out > 55) {\n                    if (log_status_ti === 'No') { log_status_ti = get_db[i].status; }\n                    if (log_status_ti == 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Temp ในโรงเรือน : ผิดปกติ')\n                        data_c.push('Temp_In : ' + result.data.temp_in + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_ti', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_ti === 'No') { log_status_ti = get_db[i].status; }\n                    if (log_status_ti == 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Temp ในโรงเรือน : ปกติ')\n                        data_c.push('Temp_In : ' + result.data.temp_in + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_ti', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'hum_out') {\n                if (result.data.hum_out <= 0 || result.data.hum_out > 100) {\n                    if (log_status_ho === 'No') { log_status_ho = get_db[i].status; }\n                    if (log_status_ho === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum นอกโรงเรือน : ผิดปกติ')\n                        data_c.push('Hum_Out : ' + result.data.hum_out + ' percentRh')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_out',\n                            status: 'bad'\n                        }\n                        context.set('log_status_ho', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_ho === 'No') { log_status_ho = get_db[i].status; }\n                    if (log_status_ho === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum นอกโรงเรือน : ปกติ')\n                        data_c.push('Hum_Out : ' + result.data.hum_out + ' percentRh')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_out',\n                            status: 'good'\n                        }\n                        context.set('log_status_ho', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'hum_in') {\n                if (result.data.hum_in <= 0 || result.data.hum_out > 100) {\n                    if (log_status_hi === 'No') { log_status_hi = get_db[i].status; }\n                    if (log_status_hi === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Hum_In : ' + result.data.hum_in + ' percentRh');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_hi', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_hi === 'No') { log_status_hi = get_db[i].status; }\n                    if (log_status_hi == 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum ในโรงเรือน : ปกติ');\n                        data_c.push('Hum_In : ' + result.data.hum_in + ' percentRh');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_hi', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'light_out') {\n                if (result.data.light_out < 0 || result.data.light_out > 260000) {\n                    if (log_status_lo === 'No') { log_status_lo = get_db[i].status; }\n                    if (log_status_lo === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light นอกโรงเรือน : ผิดปกติ');\n                        data_c.push('Light_Out : ' + result.data.light_out + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_out',\n                            status: 'bad'\n                        }\n                        context.set('log_status_lo', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_lo === 'No') { log_status_lo = get_db[i].status; }\n                    if (log_status_lo === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light นอกโรงเรือน : ปกติ');\n                        data_c.push('Light_Out : ' + result.data.light_out + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_out',\n                            status: 'good'\n                        }\n                        context.set('log_status_lo', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'light_in') {\n                if (result.data.light_in < 0 || result.data.light_out > 260000) {\n                    if (log_status_li === 'No') { log_status_li = get_db[i].status; }\n                    if (log_status_li === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Light_In : ' + result.data.light_in + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_li', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_li === 'No') { log_status_li = get_db[i].status; }\n                    if (log_status_li === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light ในโรงเรือน : ปกติ');\n                        data_c.push('Light_In : ' + result.data.light_in + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_li', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'soil_in') {\n                if (result.data.soil_in <= 0 || result.data.soil_in > 100) {\n                    if (log_status_si === 'No') { log_status_si = get_db[i].status; }\n                    if (log_status_si === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Soil ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Soil_In : ' + result.data.soil_in + ' percent');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'soil_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_si', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_si === 'No') { log_status_si = get_db[i].status; }\n                    if (log_status_si == 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Soil ในโรงเรือน : ปกติ');\n                        data_c.push('Soil_In : ' + result.data.soil_in + ' percent');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'soil_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_si', 'good');\n                        return msg;\n                    }\n                }\n            }\n        }\n\n        // msg.payload = get_db[0] // JSON.stringify(jsonstring);\n        // return msg;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "9d76b5b515a5bc7d",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "line_notify",
        "func": "\n// var output = msg.payload;\n\nif (msg.topic == \"config\") {\n    context.set('get_config', msg.payload);\n}\nif (msg.topic == \"get_mqtt\") {\n    context.set('get_mqtt', msg.payload);\n}\nvar n_config = context.get('get_config') || 0;\nvar result = context.get('get_mqtt') || 0;\nvar log_status_to = context.get('log_status_to') || 'No';\nvar log_status_ti = context.get('log_status_ti') || 'No';\nvar log_status_ho = context.get('log_status_ho') || 'No';\nvar log_status_hi = context.get('log_status_hi') || 'No';\nvar log_status_lo = context.get('log_status_lo') || 'No';\nvar log_status_li = context.get('log_status_li') || 'No';\nvar log_status_si = context.get('log_status_si') || 'No';\n\nif (n_config !== 0) {\n    if (result !== 0) {\n        // var result = JSON.parse(get_mqtt);\n        var get_db = n_config[result.serial_id];\n        // if(log_status_to == 'No'){\n        //     context.set('log_status_to',get_db[0].status);\n        // }\n        // msg.payload = log_status_to\n        // return msg;\n        // return false;\n        // var temp_out  = result.data.temp_out;\n        // var hum_out   = result.data.hum_out;\n        // var light_out = result.data.light_out;\n        // var temp_in   = result.data.temp_in;\n        // var hum_in    = result.data.hum_in;\n        // var light_in  = result.data.light_in;\n        // var soil_in   = result.data.soil_in;\n\n        // if(temp_out <= 0){\n        //     msg.payload =0\n        // }else{\n        //     msg.payload ='aas'\n        // }\n        for (var i = 0; i < 7; i++) {\n            if (get_db[i].name == 'temp_out') {\n                if (result.data.temp_out <= 0 || result.data.temp_out > 55) {\n                    if (log_status_to === 'No') { log_status_to = get_db[i].status; }\n                    if (log_status_to === 'good' && log_status_to !== 'No') {\n                        // msg.payload = result.data.temp_out;\n\n                        var data_c = [];\n                        data_c.push('Temp นอกโรงเรือน : ผิดปกติ')\n                        data_c.push('Temp_Out : ' + result.data.temp_out + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_out',\n                            status: 'bad'\n                        }\n                        context.set('log_status_to', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_to === 'No') { log_status_to = get_db[i].status; }\n                    if (log_status_to === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Temp นอกโรงเรือน : ปกติ')\n                        data_c.push('Temp_Out : ' + result.data.temp_out + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_out',\n                            status: 'good'\n                        }\n                        context.set('log_status_to', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name == 'temp_in') {\n                if (result.data.temp_in <= 0 || result.data.temp_out > 55) {\n                    if (log_status_ti === 'No') { log_status_ti = get_db[i].status; }\n                    if (log_status_ti == 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Temp ในโรงเรือน : ผิดปกติ')\n                        data_c.push('Temp_In : ' + result.data.temp_in + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_ti', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_ti === 'No') { log_status_ti = get_db[i].status; }\n                    if (log_status_ti == 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Temp ในโรงเรือน : ปกติ')\n                        data_c.push('Temp_In : ' + result.data.temp_in + ' ℃')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'temp_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_ti', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'hum_out') {\n                if (result.data.hum_out <= 0 || result.data.hum_out > 100) {\n                    if (log_status_ho === 'No') { log_status_ho = get_db[i].status; }\n                    if (log_status_ho === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum นอกโรงเรือน : ผิดปกติ')\n                        data_c.push('Hum_Out : ' + result.data.hum_out + ' percentRh')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_out',\n                            status: 'bad'\n                        }\n                        context.set('log_status_ho', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_ho === 'No') { log_status_ho = get_db[i].status; }\n                    if (log_status_ho === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum นอกโรงเรือน : ปกติ')\n                        data_c.push('Hum_Out : ' + result.data.hum_out + ' percentRh')\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_out',\n                            status: 'good'\n                        }\n                        context.set('log_status_ho', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'hum_in') {\n                if (result.data.hum_in <= 0 || result.data.hum_out > 100) {\n                    if (log_status_hi === 'No') { log_status_hi = get_db[i].status; }\n                    if (log_status_hi === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Hum_In : ' + result.data.hum_in + ' percentRh');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_hi', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_hi === 'No') { log_status_hi = get_db[i].status; }\n                    if (log_status_hi == 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Hum ในโรงเรือน : ปกติ');\n                        data_c.push('Hum_In : ' + result.data.hum_in + ' percentRh');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'hum_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_hi', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'light_out') {\n                if (result.data.light_out < 0 || result.data.light_out > 260000) {\n                    if (log_status_lo === 'No') { log_status_lo = get_db[i].status; }\n                    if (log_status_lo === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light นอกโรงเรือน : ผิดปกติ');\n                        data_c.push('Light_Out : ' + result.data.light_out + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_out',\n                            status: 'bad'\n                        }\n                        context.set('log_status_lo', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_lo === 'No') { log_status_lo = get_db[i].status; }\n                    if (log_status_lo === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light นอกโรงเรือน : ปกติ');\n                        data_c.push('Light_Out : ' + result.data.light_out + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_out',\n                            status: 'good'\n                        }\n                        context.set('log_status_lo', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'light_in') {\n                if (result.data.light_in < 0 || result.data.light_out > 260000) {\n                    if (log_status_li === 'No') { log_status_li = get_db[i].status; }\n                    if (log_status_li === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Light_In : ' + result.data.light_in + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_li', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_li === 'No') { log_status_li = get_db[i].status; }\n                    if (log_status_li === 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Light ในโรงเรือน : ปกติ');\n                        data_c.push('Light_In : ' + result.data.light_in + ' Lux');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'light_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_li', 'good');\n                        return msg;\n                    }\n                }\n            }\n            else if (get_db[i].name === 'soil_in') {\n                if (result.data.soil_in <= 0 || result.data.soil_in > 100) {\n                    if (log_status_si === 'No') { log_status_si = get_db[i].status; }\n                    if (log_status_si === 'good' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Soil ในโรงเรือน : ผิดปกติ');\n                        data_c.push('Soil_In : ' + result.data.soil_in + ' percent');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'soil_in',\n                            status: 'bad'\n                        }\n                        context.set('log_status_si', 'bad');\n                        return msg;\n                    }\n                } else {\n                    if (log_status_si === 'No') { log_status_si = get_db[i].status; }\n                    if (log_status_si == 'bad' && log_status_to !== 'No') {\n                        var data_c = [];\n                        data_c.push('Soil ในโรงเรือน : ปกติ');\n                        data_c.push('Soil_In : ' + result.data.soil_in + ' percent');\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            sn: result.serial_id,\n                            output: JSON.stringify(data_c),\n                            sensor: 'soil_in',\n                            status: 'good'\n                        }\n                        context.set('log_status_si', 'good');\n                        return msg;\n                    }\n                }\n            }\n        }\n\n        // msg.payload = get_db[0] // JSON.stringify(jsonstring);\n        // return msg;\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "185e5520e955e438",
        "type": "debug",
        "z": "9ef40e3051cd8cc7",
        "name": "debug 55",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 220,
        "wires": []
    },
    {
        "id": "c51a15d6f53fb731",
        "type": "debug",
        "z": "9ef40e3051cd8cc7",
        "name": "debug 56",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 20,
        "wires": []
    },
    {
        "id": "ac5a8a3fee0c52eb",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "function 36",
        "func": "let data = msg.payload\nif (data.status === \"online\"){\n    msg.headers = {};\n    msg.method = \"POST\";\n    msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/get_config.php\";\n    msg.payload = { \n            'house_master': data.house_master, \n            'syst' : 1\n        }\n    msg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n    msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n    return msg;\n\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1480,
        "wires": [
            [
                "e0c49023ba40e99f"
            ]
        ]
    },
    {
        "id": "925072a687b76d88",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "connect/status/TUSMT008",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 350,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "828d1081134813dd",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "function 35",
        "func": "var data = msg.payload\nvar sn = msg.topic.split(\"/\")[2];\nmsg.payload = { 'status': data, sn};\nif (context.get('log') == undefined){\n    context.set('log', data)\n    return msg\n}else{\n    if (data != context.get('log')){\n        context.set('log', data)\n        return msg;\n    }\n}\n\n\n\n// var flag \n// if ((Object.keys(data).length <= 2) && (context.get('flag') == false )){\n//         // context.set('log', 0)\n//         msg.payload = 'disconnect'\n//         flag = context.set('flag', true)\n//         return msg;\n        \n// } else if ((Object.keys(data).length > 2) && (context.get('flag') == true)){\n//         // context.set('log', 1)\n//         msg.payload = 'connected'\n//         flag = context.set('flag', false)\n//         return msg;\n// }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflag = context.set('flag', true);",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1580,
        "wires": [
            [
                "93a10487fe833ffe"
            ]
        ]
    },
    {
        "id": "93a10487fe833ffe",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "line notify online",
        "func": "var response = msg.payload\nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/send_line_notify_connect.php\";\nmsg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\nmsg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\nmsg.payload = response;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1440,
        "wires": [
            [
                "0e5760c28314035c"
            ]
        ]
    },
    {
        "id": "0e5760c28314035c",
        "type": "http request",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1010,
        "y": 1440,
        "wires": [
            [
                "ac5a8a3fee0c52eb",
                "43904218590c7fe3"
            ]
        ]
    },
    {
        "id": "43904218590c7fe3",
        "type": "debug",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 1440,
        "wires": []
    },
    {
        "id": "e0c49023ba40e99f",
        "type": "http request",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1190,
        "y": 1480,
        "wires": [
            [
                "f8e7d1516d555a7a"
            ]
        ]
    },
    {
        "id": "5d3f1bd6eea9f6f6",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "connect/status/TUSMT001",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 350,
        "y": 1300,
        "wires": [
            [
                "b3110048578914fa"
            ]
        ]
    },
    {
        "id": "b3110048578914fa",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "function 37",
        "func": "var data = msg.payload\nvar sn = msg.topic.split(\"/\")[2];\nmsg.payload = { 'status': data, sn};\nif (context.get('log') == undefined){\n    context.set('log', data)\n    return msg\n}else{\n    if (data != context.get('log')){\n        context.set('log', data)\n        return msg;\n    }\n}\n\n\n\n// var flag \n// if ((Object.keys(data).length <= 2) && (context.get('flag') == false )){\n//         // context.set('log', 0)\n//         msg.payload = 'disconnect'\n//         flag = context.set('flag', true)\n//         return msg;\n        \n// } else if ((Object.keys(data).length > 2) && (context.get('flag') == true)){\n//         // context.set('log', 1)\n//         msg.payload = 'connected'\n//         flag = context.set('flag', false)\n//         return msg;\n// }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflag = context.set('flag', true);",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1300,
        "wires": [
            [
                "93a10487fe833ffe"
            ]
        ]
    },
    {
        "id": "2dde3dc0786ed53b",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "connect/status/TUSMT002",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 350,
        "y": 1340,
        "wires": [
            [
                "0244c36f489be83d"
            ]
        ]
    },
    {
        "id": "0244c36f489be83d",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "function 38",
        "func": "var data = msg.payload\nvar sn = msg.topic.split(\"/\")[2];\nmsg.payload = { 'status': data, sn};\nif (context.get('log') == undefined){\n    context.set('log', data)\n    return msg\n}else{\n    if (data != context.get('log')){\n        context.set('log', data)\n        return msg;\n    }\n}\n\n\n\n// var flag \n// if ((Object.keys(data).length <= 2) && (context.get('flag') == false )){\n//         // context.set('log', 0)\n//         msg.payload = 'disconnect'\n//         flag = context.set('flag', true)\n//         return msg;\n        \n// } else if ((Object.keys(data).length > 2) && (context.get('flag') == true)){\n//         // context.set('log', 1)\n//         msg.payload = 'connected'\n//         flag = context.set('flag', false)\n//         return msg;\n// }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflag = context.set('flag', true);",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1340,
        "wires": [
            [
                "93a10487fe833ffe"
            ]
        ]
    },
    {
        "id": "cca8202da2bc27d5",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "connect/status/TUSMT003",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 350,
        "y": 1380,
        "wires": [
            [
                "619ecb91e6800f58"
            ]
        ]
    },
    {
        "id": "619ecb91e6800f58",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "function 39",
        "func": "var data = msg.payload\nvar sn = msg.topic.split(\"/\")[2];\nmsg.payload = { 'status': data, sn};\nif (context.get('log') == undefined){\n    context.set('log', data)\n    return msg\n}else{\n    if (data != context.get('log')){\n        context.set('log', data)\n        return msg;\n    }\n}\n\n\n\n// var flag \n// if ((Object.keys(data).length <= 2) && (context.get('flag') == false )){\n//         // context.set('log', 0)\n//         msg.payload = 'disconnect'\n//         flag = context.set('flag', true)\n//         return msg;\n        \n// } else if ((Object.keys(data).length > 2) && (context.get('flag') == true)){\n//         // context.set('log', 1)\n//         msg.payload = 'connected'\n//         flag = context.set('flag', false)\n//         return msg;\n// }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflag = context.set('flag', true);",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1380,
        "wires": [
            [
                "93a10487fe833ffe"
            ]
        ]
    },
    {
        "id": "f1d4acab22fee0e6",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "connect/status/TUSMT004",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 350,
        "y": 1420,
        "wires": [
            [
                "a4a316ea606485e1"
            ]
        ]
    },
    {
        "id": "a4a316ea606485e1",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "function 40",
        "func": "var data = msg.payload\nvar sn = msg.topic.split(\"/\")[2];\nmsg.payload = { 'status': data, sn};\nif (context.get('log') == undefined){\n    context.set('log', data)\n    return msg\n}else{\n    if (data != context.get('log')){\n        context.set('log', data)\n        return msg;\n    }\n}\n\n\n\n// var flag \n// if ((Object.keys(data).length <= 2) && (context.get('flag') == false )){\n//         // context.set('log', 0)\n//         msg.payload = 'disconnect'\n//         flag = context.set('flag', true)\n//         return msg;\n        \n// } else if ((Object.keys(data).length > 2) && (context.get('flag') == true)){\n//         // context.set('log', 1)\n//         msg.payload = 'connected'\n//         flag = context.set('flag', false)\n//         return msg;\n// }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflag = context.set('flag', true);",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1420,
        "wires": [
            [
                "93a10487fe833ffe"
            ]
        ]
    },
    {
        "id": "5d0bd6e665a7c9d1",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "connect/status/TUSMT005",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 350,
        "y": 1460,
        "wires": [
            [
                "92d8a11ba4741629"
            ]
        ]
    },
    {
        "id": "92d8a11ba4741629",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "function 41",
        "func": "var data = msg.payload\nvar sn = msg.topic.split(\"/\")[2];\nmsg.payload = { 'status': data, sn};\nif (context.get('log') == undefined){\n    context.set('log', data)\n    return msg\n}else{\n    if (data != context.get('log')){\n        context.set('log', data)\n        return msg;\n    }\n}\n\n\n\n// var flag \n// if ((Object.keys(data).length <= 2) && (context.get('flag') == false )){\n//         // context.set('log', 0)\n//         msg.payload = 'disconnect'\n//         flag = context.set('flag', true)\n//         return msg;\n        \n// } else if ((Object.keys(data).length > 2) && (context.get('flag') == true)){\n//         // context.set('log', 1)\n//         msg.payload = 'connected'\n//         flag = context.set('flag', false)\n//         return msg;\n// }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflag = context.set('flag', true);",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1460,
        "wires": [
            [
                "93a10487fe833ffe"
            ]
        ]
    },
    {
        "id": "168718826a6cc101",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "connect/status/TUSMT006",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 350,
        "y": 1500,
        "wires": [
            [
                "de9cd6fa67088f58"
            ]
        ]
    },
    {
        "id": "de9cd6fa67088f58",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "function 42",
        "func": "var data = msg.payload\nvar sn = msg.topic.split(\"/\")[2];\nmsg.payload = { 'status': data, sn};\nif (context.get('log') == undefined){\n    context.set('log', data)\n    return msg\n}else{\n    if (data != context.get('log')){\n        context.set('log', data)\n        return msg;\n    }\n}\n\n\n\n// var flag \n// if ((Object.keys(data).length <= 2) && (context.get('flag') == false )){\n//         // context.set('log', 0)\n//         msg.payload = 'disconnect'\n//         flag = context.set('flag', true)\n//         return msg;\n        \n// } else if ((Object.keys(data).length > 2) && (context.get('flag') == true)){\n//         // context.set('log', 1)\n//         msg.payload = 'connected'\n//         flag = context.set('flag', false)\n//         return msg;\n// }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflag = context.set('flag', true);",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1500,
        "wires": [
            [
                "93a10487fe833ffe"
            ]
        ]
    },
    {
        "id": "4e8bd0f0772b761c",
        "type": "mqtt in",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "topic": "connect/status/TUSMT007",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 350,
        "y": 1540,
        "wires": [
            [
                "7c8da06ea44c71e0"
            ]
        ]
    },
    {
        "id": "7c8da06ea44c71e0",
        "type": "function",
        "z": "9ef40e3051cd8cc7",
        "name": "function 43",
        "func": "var data = msg.payload\nvar sn = msg.topic.split(\"/\")[2];\nmsg.payload = { 'status': data, sn};\nif (context.get('log') == undefined){\n    context.set('log', data)\n    return msg\n}else{\n    if (data != context.get('log')){\n        context.set('log', data)\n        return msg;\n    }\n}\n\n\n\n// var flag \n// if ((Object.keys(data).length <= 2) && (context.get('flag') == false )){\n//         // context.set('log', 0)\n//         msg.payload = 'disconnect'\n//         flag = context.set('flag', true)\n//         return msg;\n        \n// } else if ((Object.keys(data).length > 2) && (context.get('flag') == true)){\n//         // context.set('log', 1)\n//         msg.payload = 'connected'\n//         flag = context.set('flag', false)\n//         return msg;\n// }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nflag = context.set('flag', true);",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1540,
        "wires": [
            [
                "93a10487fe833ffe"
            ]
        ]
    },
    {
        "id": "f8e7d1516d555a7a",
        "type": "file",
        "z": "9ef40e3051cd8cc7",
        "name": "",
        "filename": "log_return_online.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1420,
        "y": 1480,
        "wires": [
            [
                "43904218590c7fe3"
            ]
        ]
    },
    {
        "id": "ed19e27091883280",
        "type": "inject",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "TUSMT001",
        "payloadType": "str",
        "x": 450,
        "y": 200,
        "wires": [
            [
                "9bd1f69a0e8f1013"
            ]
        ]
    },
    {
        "id": "9bd1f69a0e8f1013",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "Initial Last Data from DB",
        "func": "    var output = msg.payload;\n    // var pase_json = output.control_status;\n    // var parseJSON = JSON.parse(output);\n    // msg.payload =output;\n    \nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/get_config.php\"; \nmsg.payload = {house_master:output}\nmsg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\nmsg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 200,
        "wires": [
            [
                "f82c5e93498d7c4e"
            ]
        ]
    },
    {
        "id": "f4adf035b3dc867a",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "Change Topic to \"config\"",
        "func": "var output = msg.payload;\nmsg.topic = \"config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 240,
        "wires": [
            [
                "cd751c32ea2f8a53",
                "ac3da0475d60710c",
                "5115fbd29d8949cd"
            ]
        ]
    },
    {
        "id": "b4f100cb114d3232",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT001/control/response",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 500,
        "y": 320,
        "wires": [
            [
                "0f731a8379bd8041"
            ]
        ]
    },
    {
        "id": "0f731a8379bd8041",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"get_mqtt\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 320,
        "wires": [
            [
                "cd751c32ea2f8a53",
                "ac3da0475d60710c"
            ]
        ]
    },
    {
        "id": "cd751c32ea2f8a53",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "insert_control",
        "func": "let data_log = [];\nlet log_control = context.get('log_control') || 'No';\nif (msg.topic == \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic == \"config\") {\n    context.set('get_config', msg.payload);\n}\nif (msg.topic == \"get_mqtt\") {\n    context.set('get_mqtt', msg.payload);\n}\nlet get_status = context.get('get_status') || 0;\nlet n_config = context.get('get_config') || 0;\nlet get_mqtt = context.get('get_mqtt') || 0;\nif (n_config !== 0) {\n    // msg.payload = n_config.control_response;\n    // return msg;\n    // return false\n    if (get_status !== 0) {\n        if (get_status === \"online\") {\n            // msg.payload = get_status\n            // return msg\n            if (log_control === 'No') {\n                var cont_log = n_config.control_response;\n                // delete cont_log[\"mode\"];\n                delete cont_log[\"serial_id\"];\n                delete cont_log[\"user_control\"];\n                context.set('log_control', JSON.stringify(cont_log));\n\n                // msg.payload = context.get('log_control');\n                // return msg;\n                // return false;\n            }\n            if (get_mqtt !== 0) {\n                var result = JSON.parse(get_mqtt);\n                var output = JSON.stringify({\n                    \"mode\": result.mode,\n                    \"dripper_1\": result.dripper_1,\n                    \"dripper_2\": result.dripper_2,\n                    \"dripper_3\": result.dripper_3,\n                    \"dripper_4\": result.dripper_4,\n                    \"fan_1\": result.fan_1,\n                    \"fan_2\": result.fan_2,\n                    \"fan_3\": result.fan_3,\n                    \"fan_4\": result.fan_4,\n                    \"foggy_1\": result.foggy_1,\n                    \"foggy_2\": result.foggy_2,\n                    \"spray\": result.spray,\n                    \"shading\": result.shading\n                });\n                // delete result[\"serial_id\"];\n                // delete result[\"user_control\"];\n                // msg.payload = context.get('log_control')+\" <br> \"+ output;\n                // msg.payload = output\n                // return msg;\n                // return false;\n\n                if (context.get('log_control') === output) {\n                    // msg.payload = 'sum'\n                    // return msg;\n                } else {\n                    var _result = JSON.parse(context.get('log_control'));\n                    if (_result.mode === result.mode) { // โหลดทำงาน\n                        if (result.mode === 'Manual') {\n                            msg.headers = {};\n                            msg.method = \"POST\";\n                            msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                            msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                            msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                            msg.payload = {\n                                output: get_mqtt,//JSON.stringify(get_mqtt),\n                                mode: result.mode,\n                                load: '',\n                                channel: ''\n                            }\n                            context.set('log_control', output);\n                            return msg;\n                        } else { // Auto\n                            if (_result.dripper_1 !== result.dripper_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_1',\n                                    channel: 1\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_2 !== result.dripper_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_2',\n                                    channel: 2\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_3 !== result.dripper_3) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_3',\n                                    channel: 3\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_4 !== result.dripper_4) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_4',\n                                    channel: 4\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.fan_1 !== result.fan_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_1',\n                                    channel: 5\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_2 !== result.fan_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_2',\n                                    channel: 6\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_3 !== result.fan_3) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_3',\n                                    channel: 7\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_4 !== result.fan_4) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_4',\n                                    channel: 8\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.foggy_1 !== result.foggy_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'foggy_1',\n                                    channel: 9\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.foggy_2 !== result.foggy_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'foggy_2',\n                                    channel: 10\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.spray !== result.spray) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'spray',\n                                    channel: 11\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.shading !== result.shading) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'shading',\n                                    channel: 12\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                        }\n                    } else {\n                        // send_data(output, result.mode);\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            output: get_mqtt,//JSON.stringify(get_mqtt),\n                            mode: 'เปลี่ยนโหมด',\n                            load: '',\n                            channel: ''\n                        }\n                        context.set('log_control', output);\n                        return msg;\n                    }\n                    // function send_data(output, output2){\n                    //     msg.headers = {};\n                    //     msg.method = \"POST\";\n                    //     msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                    //     msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                    //     msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                    //     msg.payload = {\n                    //         output: output,//JSON.stringify(get_mqtt),\n                    //         data_c: output2//JSON.stringify(get_submode)\n                    //     }\n                    //     context.set('log_control', output);\n                    //     return msg;\n                    // }\n\n                }\n            }\n        }\n    }\n    // else{\n    //     msg.payload = 'get_status'\n    //     return msg\n    // }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 320,
        "wires": [
            [
                "640a3b041e5ba0e2",
                "8f69dc147bd1820a"
            ]
        ]
    },
    {
        "id": "89d9ea7656bd8378",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT001/control/set_config",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 500,
        "y": 360,
        "wires": [
            [
                "85d80441d789185d"
            ]
        ]
    },
    {
        "id": "ac3da0475d60710c",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "send_line_notify",
        "func": "var data_log = [];\nvar log_control = context.get('log_control') || 'No';\nif (msg.topic == \"config\"){\n    context.set('get_config',msg.payload);\n}\nif (msg.topic == \"get_mqtt\"){\n    context.set('get_mqtt',msg.payload);\n}\nif (msg.topic == \"get_cont_manual\"){\n    context.set('get_cont_manual',msg.payload);\n}\nvar n_config = context.get('get_config') || 0;\nvar get_mqtt = context.get('get_mqtt') || 0;\nvar cont_manual = context.get('get_cont_manual') || 0;\n\nif(n_config !== 0){\n    if(log_control === 'No'){\n        var cont_log = n_config.control_response;\n        delete cont_log[\"serial_id\"];\n        delete cont_log[\"user_control\"];\n        context.set('log_control', JSON.stringify(cont_log));\n    }else{\n        if(get_mqtt !== 0){\n            // msg.payload = cont_manual\n            // return msg\n            var result = JSON.parse(get_mqtt);\n            var output = JSON.stringify({\n                \"mode\":result.mode,\n                \"dripper_1\":result.dripper_1,\n                \"dripper_2\":result.dripper_2,\n                \"dripper_3\":result.dripper_3,\n                \"dripper_4\":result.dripper_4,\n                \"fan_1\":result.fan_1,\n                \"fan_2\":result.fan_2,\n                \"fan_3\":result.fan_3,\n                \"fan_4\":result.fan_4,\n                \"foggy_1\":result.foggy_1,\n                \"foggy_2\":result.foggy_2,\n                \"spray\":result.spray,\n                \"shading\":result.shading\n            });\n            var user_c = result.user_control;\n            var sn = result.serial_id;\n            // var house_numb = sn.substring(7, 8);\n            \n            // delete result[\"serial_id\"];\n            // delete result[\"user_control\"];\n            \n            // msg.payload = log_control +'!== '+ output\n            // return msg\n            if(log_control !== output){\n                var _result = JSON.parse(context.get('log_control'));\n                var data_c = [];\n                if (_result.mode === result.mode) { // โหลดทำงาน\n                    data_c.push('โหมด : ' + result.mode)\n                    if(result.mode === 'Manual'){\n                        if(cont_manual.dripper_1 == 'ON'){\n                            if(_result.dripper_1 !== result.dripper_1){\n                                data_c.push('น้ำหยด 1 : '+result.dripper_1)\n                            }\n                        }\n                        if(cont_manual.dripper_2 == 'ON'){\n                            if (_result.dripper_2 !== result.dripper_2) {\n                                data_c.push('น้ำหยด 2 : ' + result.dripper_2)\n                            }\n                        }\n                        if(cont_manual.dripper_3 == 'ON'){\n                            if (_result.dripper_3 !== result.dripper_3) {\n                                data_c.push('น้ำหยด 3 : ' + result.dripper_3)\n                            }\n                        }\n                        if(cont_manual.dripper_4 == 'ON'){\n                            if (_result.dripper_4 !== result.dripper_4) {\n                                data_c.push('น้ำหยด 4 : ' + result.dripper_4)\n                            }\n                         }\n                        if (cont_manual.fan_1 == 'ON') {\n                            if (_result.fan_1 !== result.fan_1) {\n                                data_c.push('พัดลม 1 : ' + result.fan_1)\n                            }\n                        }\n                        if (cont_manual.fan_2 === 'ON') {\n                            if (_result.fan_2 !== result.fan_2) {\n                                data_c.push('พัดลม 2 : ' + result.fan_2)\n                            }\n                        }\n                        if (cont_manual.fan_3 === 'ON') {\n                            if (_result.fan_3 !== result.fan_3) {\n                                data_c.push('พัดลม 3 : ' + result.fan_3)\n                            }\n                        }\n                        if (cont_manual.fan_4 === 'ON') {\n                            if (_result.fan_4 !== result.fan_4) {\n                                data_c.push('พัดลม 4 : ' + result.fan_4)\n                            }\n                        }\n                        if(cont_manual.foggy_1 === 'ON'){\n                            if(_result.foggy_1 !== result.foggy_1){\n                                data_c.push('พ่นหมอก 1 : '+result.foggy_1)\n                            }\n                        }\n                        if(cont_manual.foggy_2 === 'ON'){\n                            if(_result.foggy_2 !== result.foggy_2){\n                                data_c.push('พ่นหมอก 2 : '+result.foggy_2)\n                            }\n                        }\n                    }else{ // Auto\n                        if(_result.dripper_1 !== result.dripper_1){\n                            data_c.push('น้ำหยด 1 : '+result.dripper_1)\n                        }\n                        if(_result.dripper_2 !== result.dripper_2){\n                            data_c.push('น้ำหยด 2 : '+result.dripper_2)\n                        }\n                        if(_result.dripper_3 !== result.dripper_3){\n                            data_c.push('น้ำหยด 3 : '+result.dripper_3)\n                        }\n                        if(_result.dripper_4 !== result.dripper_4){\n                            data_c.push('น้ำหยด 4 : '+result.dripper_4)\n                        }\n                        if (_result.fan_1 !== result.fan_1) {\n                            data_c.push('พัดลม 1 : ' + result.fan_1)\n                        }\n                        if (_result.fan_2 !== result.fan_2) {\n                            data_c.push('พัดลม 2 : ' + result.fan_2)\n                        }\n                        if (_result.fan_3 !== result.fan_3) {\n                            data_c.push('พัดลม 3 : ' + result.fan_3)\n                        }\n                        if (_result.fan_4 !== result.fan_4) {\n                            data_c.push('พัดลม 4 : ' + result.fan_4)\n                        }\n                        if(_result.foggy_1 !== result.foggy_1){\n                            data_c.push('พ่นหมอก 1 : '+result.foggy_1)\n                        }\n                        if(_result.foggy_2 !== result.foggy_2){\n                            data_c.push('พ่นหมอก 2 : '+result.foggy_2)\n                        }\n                    }\n                    if (_result.spray !== result.spray) {\n                        data_c.push('สเปรย์ : ' + result.spray)\n                    }\n                    if (_result.shading !== result.shading) {\n                        data_c.push('แสลนพรางแสง : ' + result.shading)\n                    }\n                }else{\n                    if (result.mode === 'Manual'){\n                        data_c.push('เปลี่ยนโหมด : Auto เป็น ' + result.mode)\n                    }else{\n                        data_c.push('เปลี่ยนโหมด : Manual เป็น' + result.mode)\n                    }\n                }\n                data_c.push('ผู้สั่งงาน : ' + user_c)\n                msg.headers = {};\n                msg.method = \"POST\";\n                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                msg.payload = {\n                    sn: sn,\n                    output: JSON.stringify(data_c)\n                }\n                context.set('log_control', output);\n                return msg;\n            }\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 360,
        "wires": [
            [
                "fb39b4a8dfbb956d",
                "70b7494bb872824d"
            ]
        ]
    },
    {
        "id": "85d80441d789185d",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "// var result =msg.payload;\n// var n_result = result.split('\\r\\n');\nvar result = JSON.parse(msg.payload);\nmsg.payload = result.config_manual;\n            // {\n            //   \"dripper_1\":  result.split('\\r\\n')[2].split('=')[1],\n            //   \"dripper_2\":  result.split('\\r\\n')[3].split('=')[1],\n            //   \"dripper_3\":  result.split('\\r\\n')[4].split('=')[1],\n            //   \"dripper_4\":  result.split('\\r\\n')[5].split('=')[1],\n            //   \"fan_1\":      result.split('\\r\\n')[6].split('=')[1],\n            //   \"fan_2\":      result.split('\\r\\n')[7].split('=')[1],\n            //   \"fan_3\":      result.split('\\r\\n')[8].split('=')[1],\n            //   \"fan_4\":      result.split('\\r\\n')[9].split('=')[1],\n            //   \"foggy_1\":    result.split('\\r\\n')[10].split('=')[1],\n            //   \"foggy_2\":    result.split('\\r\\n')[11].split('=')[1]\n            // }\nmsg.topic = \"get_cont_manual\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 360,
        "wires": [
            [
                "ac3da0475d60710c"
            ]
        ]
    },
    {
        "id": "bfca6ac812601698",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 320,
        "wires": []
    },
    {
        "id": "5efda9c26a645c45",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 360,
        "wires": []
    },
    {
        "id": "640a3b041e5ba0e2",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1110,
        "y": 320,
        "wires": [
            [
                "bfca6ac812601698"
            ]
        ]
    },
    {
        "id": "fb39b4a8dfbb956d",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1110,
        "y": 360,
        "wires": [
            [
                "5efda9c26a645c45"
            ]
        ]
    },
    {
        "id": "f82c5e93498d7c4e",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 240,
        "wires": [
            [
                "f4adf035b3dc867a"
            ]
        ]
    },
    {
        "id": "8f69dc147bd1820a",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 57",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 240,
        "wires": []
    },
    {
        "id": "70b7494bb872824d",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 58",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 400,
        "wires": []
    },
    {
        "id": "5115fbd29d8949cd",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 59",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 220,
        "wires": []
    },
    {
        "id": "390c2e08686cb48f",
        "type": "inject",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "TUSMT002",
        "payloadType": "str",
        "x": 450,
        "y": 480,
        "wires": [
            [
                "f5e9fbdcaff64148"
            ]
        ]
    },
    {
        "id": "f5e9fbdcaff64148",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "Initial Last Data from DB",
        "func": "    var output = msg.payload;\n    // var pase_json = output.control_status;\n    // var parseJSON = JSON.parse(output);\n    // msg.payload =output;\n    \nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/get_config.php\"; \nmsg.payload = {house_master:output}\nmsg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\nmsg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 480,
        "wires": [
            [
                "abbf58a9afc5b751"
            ]
        ]
    },
    {
        "id": "41d7449e9878a716",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "Change Topic to \"config\"",
        "func": "var output = msg.payload;\nmsg.topic = \"config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 520,
        "wires": [
            [
                "930dd69e8b3640f0",
                "bbc9b7bbbf883f85",
                "b3693ac631f2a2c8"
            ]
        ]
    },
    {
        "id": "3435abe0df1b9214",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT002/control/response",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 500,
        "y": 600,
        "wires": [
            [
                "8aaed84c1e68225a"
            ]
        ]
    },
    {
        "id": "8aaed84c1e68225a",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"get_mqtt\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 600,
        "wires": [
            [
                "930dd69e8b3640f0",
                "bbc9b7bbbf883f85"
            ]
        ]
    },
    {
        "id": "930dd69e8b3640f0",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "insert_control",
        "func": "let data_log = [];\nlet log_control = context.get('log_control') || 'No';\nif (msg.topic == \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic == \"config\") {\n    context.set('get_config', msg.payload);\n}\nif (msg.topic == \"get_mqtt\") {\n    context.set('get_mqtt', msg.payload);\n}\nlet get_status = context.get('get_status') || 0;\nlet n_config = context.get('get_config') || 0;\nlet get_mqtt = context.get('get_mqtt') || 0;\nif (n_config !== 0) {\n    // msg.payload = n_config.control_response;\n    // return msg;\n    // return false\n    if (get_status !== 0) {\n        if (get_status === \"online\") {\n            // msg.payload = get_status\n            // return msg\n            if (log_control === 'No') {\n                var cont_log = n_config.control_response;\n                // delete cont_log[\"mode\"];\n                delete cont_log[\"serial_id\"];\n                delete cont_log[\"user_control\"];\n                context.set('log_control', JSON.stringify(cont_log));\n\n                // msg.payload = context.get('log_control');\n                // return msg;\n                // return false;\n            }\n            if (get_mqtt !== 0) {\n                var result = JSON.parse(get_mqtt);\n                var output = JSON.stringify({\n                    \"mode\": result.mode,\n                    \"dripper_1\": result.dripper_1,\n                    \"dripper_2\": result.dripper_2,\n                    \"dripper_3\": result.dripper_3,\n                    \"dripper_4\": result.dripper_4,\n                    \"fan_1\": result.fan_1,\n                    \"fan_2\": result.fan_2,\n                    \"fan_3\": result.fan_3,\n                    \"fan_4\": result.fan_4,\n                    \"foggy_1\": result.foggy_1,\n                    \"foggy_2\": result.foggy_2,\n                    \"spray\": result.spray,\n                    \"shading\": result.shading\n                });\n                // delete result[\"serial_id\"];\n                // delete result[\"user_control\"];\n                // msg.payload = context.get('log_control')+\" <br> \"+ output;\n                // msg.payload = output\n                // return msg;\n                // return false;\n\n                if (context.get('log_control') === output) {\n                    // msg.payload = 'sum'\n                    // return msg;\n                } else {\n                    var _result = JSON.parse(context.get('log_control'));\n                    if (_result.mode === result.mode) { // โหลดทำงาน\n                        if (result.mode === 'Manual') {\n                            msg.headers = {};\n                            msg.method = \"POST\";\n                            msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                            msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                            msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                            msg.payload = {\n                                output: get_mqtt,//JSON.stringify(get_mqtt),\n                                mode: result.mode,\n                                load: '',\n                                channel: ''\n                            }\n                            context.set('log_control', output);\n                            return msg;\n                        } else { // Auto\n                            if (_result.dripper_1 !== result.dripper_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_1',\n                                    channel: 1\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_2 !== result.dripper_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_2',\n                                    channel: 2\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_3 !== result.dripper_3) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_3',\n                                    channel: 3\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_4 !== result.dripper_4) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_4',\n                                    channel: 4\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.fan_1 !== result.fan_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_1',\n                                    channel: 5\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_2 !== result.fan_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_2',\n                                    channel: 6\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_3 !== result.fan_3) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_3',\n                                    channel: 7\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_4 !== result.fan_4) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_4',\n                                    channel: 8\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.foggy_1 !== result.foggy_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'foggy_1',\n                                    channel: 9\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.foggy_2 !== result.foggy_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'foggy_2',\n                                    channel: 10\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.spray !== result.spray) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'spray',\n                                    channel: 11\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.shading !== result.shading) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'shading',\n                                    channel: 12\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                        }\n                    } else {\n                        // send_data(output, result.mode);\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            output: get_mqtt,//JSON.stringify(get_mqtt),\n                            mode: 'เปลี่ยนโหมด',\n                            load: '',\n                            channel: ''\n                        }\n                        context.set('log_control', output);\n                        return msg;\n                    }\n                    // function send_data(output, output2){\n                    //     msg.headers = {};\n                    //     msg.method = \"POST\";\n                    //     msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                    //     msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                    //     msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                    //     msg.payload = {\n                    //         output: output,//JSON.stringify(get_mqtt),\n                    //         data_c: output2//JSON.stringify(get_submode)\n                    //     }\n                    //     context.set('log_control', output);\n                    //     return msg;\n                    // }\n\n                }\n            }\n        }\n    }\n    // else{\n    //     msg.payload = 'get_status'\n    //     return msg\n    // }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 600,
        "wires": [
            [
                "efbee53ff8b36bef",
                "621d9f510f3bacf6"
            ]
        ]
    },
    {
        "id": "8c0ac691ba0eb23d",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT002/control/set_config",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 500,
        "y": 640,
        "wires": [
            [
                "f30d75dcb50a8835"
            ]
        ]
    },
    {
        "id": "bbc9b7bbbf883f85",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "send_line_notify",
        "func": "var data_log = [];\nvar log_control = context.get('log_control') || 'No';\nif (msg.topic == \"config\"){\n    context.set('get_config',msg.payload);\n}\nif (msg.topic == \"get_mqtt\"){\n    context.set('get_mqtt',msg.payload);\n}\nif (msg.topic == \"get_cont_manual\"){\n    context.set('get_cont_manual',msg.payload);\n}\nvar n_config = context.get('get_config') || 0;\nvar get_mqtt = context.get('get_mqtt') || 0;\nvar cont_manual = context.get('get_cont_manual') || 0;\n\nif(n_config !== 0){\n    if(log_control === 'No'){\n        var cont_log = n_config.control_response;\n        delete cont_log[\"serial_id\"];\n        delete cont_log[\"user_control\"];\n        context.set('log_control', JSON.stringify(cont_log));\n    }else{\n        if(get_mqtt !== 0){\n            // msg.payload = cont_manual\n            // return msg\n            var result = JSON.parse(get_mqtt);\n            var output = JSON.stringify({\n                \"mode\":result.mode,\n                \"dripper_1\":result.dripper_1,\n                \"dripper_2\":result.dripper_2,\n                \"dripper_3\":result.dripper_3,\n                \"dripper_4\":result.dripper_4,\n                \"fan_1\":result.fan_1,\n                \"fan_2\":result.fan_2,\n                \"fan_3\":result.fan_3,\n                \"fan_4\":result.fan_4,\n                \"foggy_1\":result.foggy_1,\n                \"foggy_2\":result.foggy_2,\n                \"spray\":result.spray,\n                \"shading\":result.shading\n            });\n            var user_c = result.user_control;\n            var sn = result.serial_id;\n            // var house_numb = sn.substring(7, 8);\n            \n            // delete result[\"serial_id\"];\n            // delete result[\"user_control\"];\n            \n            // msg.payload = log_control +'!== '+ output\n            // return msg\n            if(log_control !== output){\n                var _result = JSON.parse(context.get('log_control'));\n                var data_c = [];\n                if (_result.mode === result.mode) { // โหลดทำงาน\n                    data_c.push('โหมด : ' + result.mode)\n                    if(result.mode === 'Manual'){\n                        if(cont_manual.dripper_1 == 'ON'){\n                            if(_result.dripper_1 !== result.dripper_1){\n                                data_c.push('น้ำหยด 1 : '+result.dripper_1)\n                            }\n                        }\n                        if(cont_manual.dripper_2 == 'ON'){\n                            if (_result.dripper_2 !== result.dripper_2) {\n                                data_c.push('น้ำหยด 2 : ' + result.dripper_2)\n                            }\n                        }\n                        if(cont_manual.dripper_3 == 'ON'){\n                            if (_result.dripper_3 !== result.dripper_3) {\n                                data_c.push('น้ำหยด 3 : ' + result.dripper_3)\n                            }\n                        }\n                        if(cont_manual.dripper_4 == 'ON'){\n                            if (_result.dripper_4 !== result.dripper_4) {\n                                data_c.push('น้ำหยด 4 : ' + result.dripper_4)\n                            }\n                         }\n                        if (cont_manual.fan_1 == 'ON') {\n                            if (_result.fan_1 !== result.fan_1) {\n                                data_c.push('พัดลม 1 : ' + result.fan_1)\n                            }\n                        }\n                        if (cont_manual.fan_2 === 'ON') {\n                            if (_result.fan_2 !== result.fan_2) {\n                                data_c.push('พัดลม 2 : ' + result.fan_2)\n                            }\n                        }\n                        if (cont_manual.fan_3 === 'ON') {\n                            if (_result.fan_3 !== result.fan_3) {\n                                data_c.push('พัดลม 3 : ' + result.fan_3)\n                            }\n                        }\n                        if (cont_manual.fan_4 === 'ON') {\n                            if (_result.fan_4 !== result.fan_4) {\n                                data_c.push('พัดลม 4 : ' + result.fan_4)\n                            }\n                        }\n                        if(cont_manual.foggy_1 === 'ON'){\n                            if(_result.foggy_1 !== result.foggy_1){\n                                data_c.push('พ่นหมอก 1 : '+result.foggy_1)\n                            }\n                        }\n                        if(cont_manual.foggy_2 === 'ON'){\n                            if(_result.foggy_2 !== result.foggy_2){\n                                data_c.push('พ่นหมอก 2 : '+result.foggy_2)\n                            }\n                        }\n                    }else{ // Auto\n                        if(_result.dripper_1 !== result.dripper_1){\n                            data_c.push('น้ำหยด 1 : '+result.dripper_1)\n                        }\n                        if(_result.dripper_2 !== result.dripper_2){\n                            data_c.push('น้ำหยด 2 : '+result.dripper_2)\n                        }\n                        if(_result.dripper_3 !== result.dripper_3){\n                            data_c.push('น้ำหยด 3 : '+result.dripper_3)\n                        }\n                        if(_result.dripper_4 !== result.dripper_4){\n                            data_c.push('น้ำหยด 4 : '+result.dripper_4)\n                        }\n                        if (_result.fan_1 !== result.fan_1) {\n                            data_c.push('พัดลม 1 : ' + result.fan_1)\n                        }\n                        if (_result.fan_2 !== result.fan_2) {\n                            data_c.push('พัดลม 2 : ' + result.fan_2)\n                        }\n                        if (_result.fan_3 !== result.fan_3) {\n                            data_c.push('พัดลม 3 : ' + result.fan_3)\n                        }\n                        if (_result.fan_4 !== result.fan_4) {\n                            data_c.push('พัดลม 4 : ' + result.fan_4)\n                        }\n                        if(_result.foggy_1 !== result.foggy_1){\n                            data_c.push('พ่นหมอก 1 : '+result.foggy_1)\n                        }\n                        if(_result.foggy_2 !== result.foggy_2){\n                            data_c.push('พ่นหมอก 2 : '+result.foggy_2)\n                        }\n                    }\n                    if (_result.spray !== result.spray) {\n                        data_c.push('สเปรย์ : ' + result.spray)\n                    }\n                    if (_result.shading !== result.shading) {\n                        data_c.push('แสลนพรางแสง : ' + result.shading)\n                    }\n                }else{\n                    if (result.mode === 'Manual'){\n                        data_c.push('เปลี่ยนโหมด : Auto เป็น ' + result.mode)\n                    }else{\n                        data_c.push('เปลี่ยนโหมด : Manual เป็น' + result.mode)\n                    }\n                }\n                data_c.push('ผู้สั่งงาน : ' + user_c)\n                msg.headers = {};\n                msg.method = \"POST\";\n                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                msg.payload = {\n                    sn: sn,\n                    output: JSON.stringify(data_c)\n                }\n                context.set('log_control', output);\n                return msg;\n            }\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 640,
        "wires": [
            [
                "57f29789fcb3fcad",
                "471ea4d737d0987f"
            ]
        ]
    },
    {
        "id": "f30d75dcb50a8835",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "// var result =msg.payload;\n// var n_result = result.split('\\r\\n');\nvar result = JSON.parse(msg.payload);\nmsg.payload = result.config_manual;\n            // {\n            //   \"dripper_1\":  result.split('\\r\\n')[2].split('=')[1],\n            //   \"dripper_2\":  result.split('\\r\\n')[3].split('=')[1],\n            //   \"dripper_3\":  result.split('\\r\\n')[4].split('=')[1],\n            //   \"dripper_4\":  result.split('\\r\\n')[5].split('=')[1],\n            //   \"fan_1\":      result.split('\\r\\n')[6].split('=')[1],\n            //   \"fan_2\":      result.split('\\r\\n')[7].split('=')[1],\n            //   \"fan_3\":      result.split('\\r\\n')[8].split('=')[1],\n            //   \"fan_4\":      result.split('\\r\\n')[9].split('=')[1],\n            //   \"foggy_1\":    result.split('\\r\\n')[10].split('=')[1],\n            //   \"foggy_2\":    result.split('\\r\\n')[11].split('=')[1]\n            // }\nmsg.topic = \"get_cont_manual\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 640,
        "wires": [
            [
                "bbc9b7bbbf883f85"
            ]
        ]
    },
    {
        "id": "49c061978d735e9c",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 600,
        "wires": []
    },
    {
        "id": "007ebfcb0f6ec6b8",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 640,
        "wires": []
    },
    {
        "id": "efbee53ff8b36bef",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1110,
        "y": 600,
        "wires": [
            [
                "49c061978d735e9c"
            ]
        ]
    },
    {
        "id": "57f29789fcb3fcad",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1110,
        "y": 640,
        "wires": [
            [
                "007ebfcb0f6ec6b8"
            ]
        ]
    },
    {
        "id": "abbf58a9afc5b751",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 520,
        "wires": [
            [
                "41d7449e9878a716"
            ]
        ]
    },
    {
        "id": "621d9f510f3bacf6",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 60",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 520,
        "wires": []
    },
    {
        "id": "471ea4d737d0987f",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 61",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 680,
        "wires": []
    },
    {
        "id": "b3693ac631f2a2c8",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 62",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 500,
        "wires": []
    },
    {
        "id": "4754e172bea44524",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "web_system",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 490,
        "y": 80,
        "wires": [
            [
                "3bc65fbdcaa2825e"
            ]
        ]
    },
    {
        "id": "3bc65fbdcaa2825e",
        "type": "moment",
        "z": "9ec4714069b3f5ce",
        "name": "timmer",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "hours",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "C",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 650,
        "y": 100,
        "wires": [
            [
                "67d80bf82456b1cd"
            ]
        ]
    },
    {
        "id": "67d80bf82456b1cd",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var timestamp = msg.timer;\nif (msg.topic == \"web_system\"){\n    context.set('output',msg.payload);\n}\nvar output = context.get('output') || 0;\nif(output != 0){\n    var result = JSON.parse(output);\n    var sparseKeys = Object.keys(result);\n    for(var i = 0; i < sparseKeys.length; i++){\n        if(result[sparseKeys[i]].dt < timestamp){\n             msg.payload = result[sparseKeys[0]].account_id;\n             \n            msg.headers = {};\n            msg.method = \"POST\";\n            msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/logout.php\"; \n            msg.payload = {\n                arr_ : output,\n                userID : result[sparseKeys[i]].account_id,\n                siteID : result[sparseKeys[i]].siteID,\n                count_site : result[sparseKeys[i]].count_site\n                \n            }\n            msg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n            msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n            return msg;\n        }\n        \n    }\n   \n    \n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 100,
        "wires": [
            [
                "f9fbb68191da2eaf"
            ]
        ]
    },
    {
        "id": "af2ca21863fe0e59",
        "type": "inject",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "props": [
            {
                "p": "time",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payloadType": "str",
        "x": 510,
        "y": 120,
        "wires": [
            [
                "3bc65fbdcaa2825e"
            ]
        ]
    },
    {
        "id": "b905057cd2e76803",
        "type": "mqtt out",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "web_system",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1150,
        "y": 100,
        "wires": []
    },
    {
        "id": "f9fbb68191da2eaf",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 964,
        "y": 101,
        "wires": [
            [
                "b905057cd2e76803"
            ]
        ]
    },
    {
        "id": "0dbb09b3e0ebb433",
        "type": "inject",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "TUSMT003",
        "payloadType": "str",
        "x": 430,
        "y": 740,
        "wires": [
            [
                "0fabf9e4a6e2d52e"
            ]
        ]
    },
    {
        "id": "0fabf9e4a6e2d52e",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "Initial Last Data from DB",
        "func": "    var output = msg.payload;\n    // var pase_json = output.control_status;\n    // var parseJSON = JSON.parse(output);\n    // msg.payload =output;\n    \nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/get_config.php\"; \nmsg.payload = {house_master:output}\nmsg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\nmsg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 740,
        "wires": [
            [
                "4c35cebfd5810557"
            ]
        ]
    },
    {
        "id": "fe61035b4e40c1b7",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "Change Topic to \"config\"",
        "func": "var output = msg.payload;\nmsg.topic = \"config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 780,
        "wires": [
            [
                "8fa8cf1c99c2cb24",
                "bebed8e38cc4eaca",
                "559903839efdf523"
            ]
        ]
    },
    {
        "id": "5d2cca4c8fd4ed60",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT003/control/response",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 480,
        "y": 860,
        "wires": [
            [
                "566369438ee4aa2d"
            ]
        ]
    },
    {
        "id": "566369438ee4aa2d",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"get_mqtt\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 860,
        "wires": [
            [
                "8fa8cf1c99c2cb24",
                "bebed8e38cc4eaca"
            ]
        ]
    },
    {
        "id": "8fa8cf1c99c2cb24",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "insert_control",
        "func": "let data_log = [];\nlet log_control = context.get('log_control') || 'No';\nif (msg.topic == \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic == \"config\") {\n    context.set('get_config', msg.payload);\n}\nif (msg.topic == \"get_mqtt\") {\n    context.set('get_mqtt', msg.payload);\n}\nlet get_status = context.get('get_status') || 0;\nlet n_config = context.get('get_config') || 0;\nlet get_mqtt = context.get('get_mqtt') || 0;\nif (n_config !== 0) {\n    // msg.payload = n_config.control_response;\n    // return msg;\n    // return false\n    if (get_status !== 0) {\n        if (get_status === \"online\") {\n            // msg.payload = get_status\n            // return msg\n            if (log_control === 'No') {\n                var cont_log = n_config.control_response;\n                // delete cont_log[\"mode\"];\n                delete cont_log[\"serial_id\"];\n                delete cont_log[\"user_control\"];\n                context.set('log_control', JSON.stringify(cont_log));\n\n                // msg.payload = context.get('log_control');\n                // return msg;\n                // return false;\n            }\n            if (get_mqtt !== 0) {\n                var result = JSON.parse(get_mqtt);\n                var output = JSON.stringify({\n                    \"mode\": result.mode,\n                    \"dripper_1\": result.dripper_1,\n                    \"dripper_2\": result.dripper_2,\n                    \"dripper_3\": result.dripper_3,\n                    \"dripper_4\": result.dripper_4,\n                    \"fan_1\": result.fan_1,\n                    \"fan_2\": result.fan_2,\n                    \"fan_3\": result.fan_3,\n                    \"fan_4\": result.fan_4,\n                    \"foggy_1\": result.foggy_1,\n                    \"foggy_2\": result.foggy_2,\n                    \"spray\": result.spray,\n                    \"shading\": result.shading\n                });\n                // delete result[\"serial_id\"];\n                // delete result[\"user_control\"];\n                // msg.payload = context.get('log_control')+\" <br> \"+ output;\n                // msg.payload = output\n                // return msg;\n                // return false;\n\n                if (context.get('log_control') === output) {\n                    // msg.payload = 'sum'\n                    // return msg;\n                } else {\n                    var _result = JSON.parse(context.get('log_control'));\n                    if (_result.mode === result.mode) { // โหลดทำงาน\n                        if (result.mode === 'Manual') {\n                            msg.headers = {};\n                            msg.method = \"POST\";\n                            msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                            msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                            msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                            msg.payload = {\n                                output: get_mqtt,//JSON.stringify(get_mqtt),\n                                mode: result.mode,\n                                load: '',\n                                channel: ''\n                            }\n                            context.set('log_control', output);\n                            return msg;\n                        } else { // Auto\n                            if (_result.dripper_1 !== result.dripper_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_1',\n                                    channel: 1\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_2 !== result.dripper_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_2',\n                                    channel: 2\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_3 !== result.dripper_3) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_3',\n                                    channel: 3\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_4 !== result.dripper_4) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_4',\n                                    channel: 4\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.fan_1 !== result.fan_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_1',\n                                    channel: 5\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_2 !== result.fan_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_2',\n                                    channel: 6\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_3 !== result.fan_3) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_3',\n                                    channel: 7\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_4 !== result.fan_4) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_4',\n                                    channel: 8\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.foggy_1 !== result.foggy_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'foggy_1',\n                                    channel: 9\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.foggy_2 !== result.foggy_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'foggy_2',\n                                    channel: 10\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.spray !== result.spray) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'spray',\n                                    channel: 11\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.shading !== result.shading) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'shading',\n                                    channel: 12\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                        }\n                    } else {\n                        // send_data(output, result.mode);\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            output: get_mqtt,//JSON.stringify(get_mqtt),\n                            mode: 'เปลี่ยนโหมด',\n                            load: '',\n                            channel: ''\n                        }\n                        context.set('log_control', output);\n                        return msg;\n                    }\n                    // function send_data(output, output2){\n                    //     msg.headers = {};\n                    //     msg.method = \"POST\";\n                    //     msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                    //     msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                    //     msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                    //     msg.payload = {\n                    //         output: output,//JSON.stringify(get_mqtt),\n                    //         data_c: output2//JSON.stringify(get_submode)\n                    //     }\n                    //     context.set('log_control', output);\n                    //     return msg;\n                    // }\n\n                }\n            }\n        }\n    }\n    // else{\n    //     msg.payload = 'get_status'\n    //     return msg\n    // }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 860,
        "wires": [
            [
                "6f29ea17f9ee3583",
                "d6bfeb77487d53ba"
            ]
        ]
    },
    {
        "id": "d77655f1a7b1445c",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT003/control/set_config",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 480,
        "y": 900,
        "wires": [
            [
                "178586b7ec0c500e"
            ]
        ]
    },
    {
        "id": "bebed8e38cc4eaca",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "send_line_notify",
        "func": "var data_log = [];\nvar log_control = context.get('log_control') || 'No';\nif (msg.topic == \"config\"){\n    context.set('get_config',msg.payload);\n}\nif (msg.topic == \"get_mqtt\"){\n    context.set('get_mqtt',msg.payload);\n}\nif (msg.topic == \"get_cont_manual\"){\n    context.set('get_cont_manual',msg.payload);\n}\nvar n_config = context.get('get_config') || 0;\nvar get_mqtt = context.get('get_mqtt') || 0;\nvar cont_manual = context.get('get_cont_manual') || 0;\n\nif(n_config !== 0){\n    if(log_control === 'No'){\n        var cont_log = n_config.control_response;\n        delete cont_log[\"serial_id\"];\n        delete cont_log[\"user_control\"];\n        context.set('log_control', JSON.stringify(cont_log));\n    }else{\n        if(get_mqtt !== 0){\n            // msg.payload = cont_manual\n            // return msg\n            var result = JSON.parse(get_mqtt);\n            var output = JSON.stringify({\n                \"mode\":result.mode,\n                \"dripper_1\":result.dripper_1,\n                \"dripper_2\":result.dripper_2,\n                \"dripper_3\":result.dripper_3,\n                \"dripper_4\":result.dripper_4,\n                \"fan_1\":result.fan_1,\n                \"fan_2\":result.fan_2,\n                \"fan_3\":result.fan_3,\n                \"fan_4\":result.fan_4,\n                \"foggy_1\":result.foggy_1,\n                \"foggy_2\":result.foggy_2,\n                \"spray\":result.spray,\n                \"shading\":result.shading\n            });\n            var user_c = result.user_control;\n            var sn = result.serial_id;\n            // var house_numb = sn.substring(7, 8);\n            \n            // delete result[\"serial_id\"];\n            // delete result[\"user_control\"];\n            \n            // msg.payload = log_control +'!== '+ output\n            // return msg\n            if(log_control !== output){\n                var _result = JSON.parse(context.get('log_control'));\n                var data_c = [];\n                if (_result.mode === result.mode) { // โหลดทำงาน\n                    data_c.push('โหมด : ' + result.mode)\n                    if(result.mode === 'Manual'){\n                        if(cont_manual.dripper_1 == 'ON'){\n                            if(_result.dripper_1 !== result.dripper_1){\n                                data_c.push('น้ำหยด 1 : '+result.dripper_1)\n                            }\n                        }\n                        if(cont_manual.dripper_2 == 'ON'){\n                            if (_result.dripper_2 !== result.dripper_2) {\n                                data_c.push('น้ำหยด 2 : ' + result.dripper_2)\n                            }\n                        }\n                        if(cont_manual.dripper_3 == 'ON'){\n                            if (_result.dripper_3 !== result.dripper_3) {\n                                data_c.push('น้ำหยด 3 : ' + result.dripper_3)\n                            }\n                        }\n                        if(cont_manual.dripper_4 == 'ON'){\n                            if (_result.dripper_4 !== result.dripper_4) {\n                                data_c.push('น้ำหยด 4 : ' + result.dripper_4)\n                            }\n                         }\n                        if (cont_manual.fan_1 == 'ON') {\n                            if (_result.fan_1 !== result.fan_1) {\n                                data_c.push('พัดลม 1 : ' + result.fan_1)\n                            }\n                        }\n                        if (cont_manual.fan_2 === 'ON') {\n                            if (_result.fan_2 !== result.fan_2) {\n                                data_c.push('พัดลม 2 : ' + result.fan_2)\n                            }\n                        }\n                        if (cont_manual.fan_3 === 'ON') {\n                            if (_result.fan_3 !== result.fan_3) {\n                                data_c.push('พัดลม 3 : ' + result.fan_3)\n                            }\n                        }\n                        if (cont_manual.fan_4 === 'ON') {\n                            if (_result.fan_4 !== result.fan_4) {\n                                data_c.push('พัดลม 4 : ' + result.fan_4)\n                            }\n                        }\n                        if(cont_manual.foggy_1 === 'ON'){\n                            if(_result.foggy_1 !== result.foggy_1){\n                                data_c.push('พ่นหมอก 1 : '+result.foggy_1)\n                            }\n                        }\n                        if(cont_manual.foggy_2 === 'ON'){\n                            if(_result.foggy_2 !== result.foggy_2){\n                                data_c.push('พ่นหมอก 2 : '+result.foggy_2)\n                            }\n                        }\n                    }else{ // Auto\n                        if(_result.dripper_1 !== result.dripper_1){\n                            data_c.push('น้ำหยด 1 : '+result.dripper_1)\n                        }\n                        if(_result.dripper_2 !== result.dripper_2){\n                            data_c.push('น้ำหยด 2 : '+result.dripper_2)\n                        }\n                        if(_result.dripper_3 !== result.dripper_3){\n                            data_c.push('น้ำหยด 3 : '+result.dripper_3)\n                        }\n                        if(_result.dripper_4 !== result.dripper_4){\n                            data_c.push('น้ำหยด 4 : '+result.dripper_4)\n                        }\n                        if (_result.fan_1 !== result.fan_1) {\n                            data_c.push('พัดลม 1 : ' + result.fan_1)\n                        }\n                        if (_result.fan_2 !== result.fan_2) {\n                            data_c.push('พัดลม 2 : ' + result.fan_2)\n                        }\n                        if (_result.fan_3 !== result.fan_3) {\n                            data_c.push('พัดลม 3 : ' + result.fan_3)\n                        }\n                        if (_result.fan_4 !== result.fan_4) {\n                            data_c.push('พัดลม 4 : ' + result.fan_4)\n                        }\n                        if(_result.foggy_1 !== result.foggy_1){\n                            data_c.push('พ่นหมอก 1 : '+result.foggy_1)\n                        }\n                        if(_result.foggy_2 !== result.foggy_2){\n                            data_c.push('พ่นหมอก 2 : '+result.foggy_2)\n                        }\n                    }\n                    if (_result.spray !== result.spray) {\n                        data_c.push('สเปรย์ : ' + result.spray)\n                    }\n                    if (_result.shading !== result.shading) {\n                        data_c.push('แสลนพรางแสง : ' + result.shading)\n                    }\n                }else{\n                    if (result.mode === 'Manual'){\n                        data_c.push('เปลี่ยนโหมด : Auto เป็น ' + result.mode)\n                    }else{\n                        data_c.push('เปลี่ยนโหมด : Manual เป็น' + result.mode)\n                    }\n                }\n                data_c.push('ผู้สั่งงาน : ' + user_c)\n                msg.headers = {};\n                msg.method = \"POST\";\n                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                msg.payload = {\n                    sn: sn,\n                    output: JSON.stringify(data_c)\n                }\n                context.set('log_control', output);\n                return msg;\n            }\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 900,
        "wires": [
            [
                "e62d5deb668b57d9",
                "756ce0b35d985a43"
            ]
        ]
    },
    {
        "id": "178586b7ec0c500e",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "// var result =msg.payload;\n// var n_result = result.split('\\r\\n');\nvar result = JSON.parse(msg.payload);\nmsg.payload = result.config_manual;\n            // {\n            //   \"dripper_1\":  result.split('\\r\\n')[2].split('=')[1],\n            //   \"dripper_2\":  result.split('\\r\\n')[3].split('=')[1],\n            //   \"dripper_3\":  result.split('\\r\\n')[4].split('=')[1],\n            //   \"dripper_4\":  result.split('\\r\\n')[5].split('=')[1],\n            //   \"fan_1\":      result.split('\\r\\n')[6].split('=')[1],\n            //   \"fan_2\":      result.split('\\r\\n')[7].split('=')[1],\n            //   \"fan_3\":      result.split('\\r\\n')[8].split('=')[1],\n            //   \"fan_4\":      result.split('\\r\\n')[9].split('=')[1],\n            //   \"foggy_1\":    result.split('\\r\\n')[10].split('=')[1],\n            //   \"foggy_2\":    result.split('\\r\\n')[11].split('=')[1]\n            // }\nmsg.topic = \"get_cont_manual\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 900,
        "wires": [
            [
                "bebed8e38cc4eaca"
            ]
        ]
    },
    {
        "id": "47f1c9d39fc4c39d",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 860,
        "wires": []
    },
    {
        "id": "0f7d724972cfbab7",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 900,
        "wires": []
    },
    {
        "id": "6f29ea17f9ee3583",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1090,
        "y": 860,
        "wires": [
            [
                "47f1c9d39fc4c39d"
            ]
        ]
    },
    {
        "id": "e62d5deb668b57d9",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1090,
        "y": 900,
        "wires": [
            [
                "0f7d724972cfbab7"
            ]
        ]
    },
    {
        "id": "4c35cebfd5810557",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 780,
        "wires": [
            [
                "fe61035b4e40c1b7"
            ]
        ]
    },
    {
        "id": "d6bfeb77487d53ba",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 81",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 780,
        "wires": []
    },
    {
        "id": "756ce0b35d985a43",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 82",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 940,
        "wires": []
    },
    {
        "id": "559903839efdf523",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 83",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 760,
        "wires": []
    },
    {
        "id": "e928767d71b8277a",
        "type": "inject",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "TUSMT004",
        "payloadType": "str",
        "x": 430,
        "y": 1000,
        "wires": [
            [
                "028fc8a48ae9c8b8"
            ]
        ]
    },
    {
        "id": "028fc8a48ae9c8b8",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "Initial Last Data from DB",
        "func": "    var output = msg.payload;\n    // var pase_json = output.control_status;\n    // var parseJSON = JSON.parse(output);\n    // msg.payload =output;\n    \nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/get_config.php\"; \nmsg.payload = {house_master:output}\nmsg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\nmsg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1000,
        "wires": [
            [
                "ec40b65850464070"
            ]
        ]
    },
    {
        "id": "9c56fdb10b2ff5ef",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "Change Topic to \"config\"",
        "func": "var output = msg.payload;\nmsg.topic = \"config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1040,
        "wires": [
            [
                "b2011fbb0e3ccef1",
                "cef2baee64a03bd1",
                "76c1dcb8c808bb94"
            ]
        ]
    },
    {
        "id": "47c47a547140cc36",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT004/control/response",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 480,
        "y": 1120,
        "wires": [
            [
                "e43974d4ba5650a4"
            ]
        ]
    },
    {
        "id": "e43974d4ba5650a4",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"get_mqtt\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1120,
        "wires": [
            [
                "b2011fbb0e3ccef1",
                "cef2baee64a03bd1"
            ]
        ]
    },
    {
        "id": "b2011fbb0e3ccef1",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "insert_control",
        "func": "let data_log = [];\nlet log_control = context.get('log_control') || 'No';\nif (msg.topic == \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic == \"config\") {\n    context.set('get_config', msg.payload);\n}\nif (msg.topic == \"get_mqtt\") {\n    context.set('get_mqtt', msg.payload);\n}\nlet get_status = context.get('get_status') || 0;\nlet n_config = context.get('get_config') || 0;\nlet get_mqtt = context.get('get_mqtt') || 0;\nif (n_config !== 0) {\n    // msg.payload = n_config.control_response;\n    // return msg;\n    // return false\n    if (get_status !== 0) {\n        if (get_status === \"online\") {\n            // msg.payload = get_status\n            // return msg\n            if (log_control === 'No') {\n                var cont_log = n_config.control_response;\n                // delete cont_log[\"mode\"];\n                delete cont_log[\"serial_id\"];\n                delete cont_log[\"user_control\"];\n                context.set('log_control', JSON.stringify(cont_log));\n\n                // msg.payload = context.get('log_control');\n                // return msg;\n                // return false;\n            }\n            if (get_mqtt !== 0) {\n                var result = JSON.parse(get_mqtt);\n                var output = JSON.stringify({\n                    \"mode\": result.mode,\n                    \"dripper_1\": result.dripper_1,\n                    \"dripper_2\": result.dripper_2,\n                    \"dripper_3\": result.dripper_3,\n                    \"dripper_4\": result.dripper_4,\n                    \"fan_1\": result.fan_1,\n                    \"fan_2\": result.fan_2,\n                    \"fan_3\": result.fan_3,\n                    \"fan_4\": result.fan_4,\n                    \"foggy_1\": result.foggy_1,\n                    \"foggy_2\": result.foggy_2,\n                    \"spray\": result.spray,\n                    \"shading\": result.shading\n                });\n                // delete result[\"serial_id\"];\n                // delete result[\"user_control\"];\n                // msg.payload = context.get('log_control')+\" <br> \"+ output;\n                // msg.payload = output\n                // return msg;\n                // return false;\n\n                if (context.get('log_control') === output) {\n                    // msg.payload = 'sum'\n                    // return msg;\n                } else {\n                    var _result = JSON.parse(context.get('log_control'));\n                    if (_result.mode === result.mode) { // โหลดทำงาน\n                        if (result.mode === 'Manual') {\n                            msg.headers = {};\n                            msg.method = \"POST\";\n                            msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                            msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                            msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                            msg.payload = {\n                                output: get_mqtt,//JSON.stringify(get_mqtt),\n                                mode: result.mode,\n                                load: '',\n                                channel: ''\n                            }\n                            context.set('log_control', output);\n                            return msg;\n                        } else { // Auto\n                            if (_result.dripper_1 !== result.dripper_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_1',\n                                    channel: 1\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_2 !== result.dripper_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_2',\n                                    channel: 2\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_3 !== result.dripper_3) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_3',\n                                    channel: 3\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_4 !== result.dripper_4) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_4',\n                                    channel: 4\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.fan_1 !== result.fan_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_1',\n                                    channel: 5\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_2 !== result.fan_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_2',\n                                    channel: 6\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_3 !== result.fan_3) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_3',\n                                    channel: 7\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_4 !== result.fan_4) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_4',\n                                    channel: 8\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.foggy_1 !== result.foggy_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'foggy_1',\n                                    channel: 9\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.foggy_2 !== result.foggy_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'foggy_2',\n                                    channel: 10\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.spray !== result.spray) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'spray',\n                                    channel: 11\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.shading !== result.shading) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'shading',\n                                    channel: 12\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                        }\n                    } else {\n                        // send_data(output, result.mode);\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            output: get_mqtt,//JSON.stringify(get_mqtt),\n                            mode: 'เปลี่ยนโหมด',\n                            load: '',\n                            channel: ''\n                        }\n                        context.set('log_control', output);\n                        return msg;\n                    }\n                    // function send_data(output, output2){\n                    //     msg.headers = {};\n                    //     msg.method = \"POST\";\n                    //     msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                    //     msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                    //     msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                    //     msg.payload = {\n                    //         output: output,//JSON.stringify(get_mqtt),\n                    //         data_c: output2//JSON.stringify(get_submode)\n                    //     }\n                    //     context.set('log_control', output);\n                    //     return msg;\n                    // }\n\n                }\n            }\n        }\n    }\n    // else{\n    //     msg.payload = 'get_status'\n    //     return msg\n    // }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1120,
        "wires": [
            [
                "43172b32187b0212",
                "e0df663a20c75b0f"
            ]
        ]
    },
    {
        "id": "a2b8ba24f1f927b6",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT004/control/set_config",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 480,
        "y": 1160,
        "wires": [
            [
                "38a8897d26e5dadd"
            ]
        ]
    },
    {
        "id": "cef2baee64a03bd1",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "send_line_notify",
        "func": "var data_log = [];\nvar log_control = context.get('log_control') || 'No';\nif (msg.topic == \"config\"){\n    context.set('get_config',msg.payload);\n}\nif (msg.topic == \"get_mqtt\"){\n    context.set('get_mqtt',msg.payload);\n}\nif (msg.topic == \"get_cont_manual\"){\n    context.set('get_cont_manual',msg.payload);\n}\nvar n_config = context.get('get_config') || 0;\nvar get_mqtt = context.get('get_mqtt') || 0;\nvar cont_manual = context.get('get_cont_manual') || 0;\n\nif(n_config !== 0){\n    if(log_control === 'No'){\n        var cont_log = n_config.control_response;\n        delete cont_log[\"serial_id\"];\n        delete cont_log[\"user_control\"];\n        context.set('log_control', JSON.stringify(cont_log));\n    }else{\n        if(get_mqtt !== 0){\n            // msg.payload = cont_manual\n            // return msg\n            var result = JSON.parse(get_mqtt);\n            var output = JSON.stringify({\n                \"mode\":result.mode,\n                \"dripper_1\":result.dripper_1,\n                \"dripper_2\":result.dripper_2,\n                \"dripper_3\":result.dripper_3,\n                \"dripper_4\":result.dripper_4,\n                \"fan_1\":result.fan_1,\n                \"fan_2\":result.fan_2,\n                \"fan_3\":result.fan_3,\n                \"fan_4\":result.fan_4,\n                \"foggy_1\":result.foggy_1,\n                \"foggy_2\":result.foggy_2,\n                \"spray\":result.spray,\n                \"shading\":result.shading\n            });\n            var user_c = result.user_control;\n            var sn = result.serial_id;\n            // var house_numb = sn.substring(7, 8);\n            \n            // delete result[\"serial_id\"];\n            // delete result[\"user_control\"];\n            \n            // msg.payload = log_control +'!== '+ output\n            // return msg\n            if(log_control !== output){\n                var _result = JSON.parse(context.get('log_control'));\n                var data_c = [];\n                if (_result.mode === result.mode) { // โหลดทำงาน\n                    data_c.push('โหมด : ' + result.mode)\n                    if(result.mode === 'Manual'){\n                        if(cont_manual.dripper_1 == 'ON'){\n                            if(_result.dripper_1 !== result.dripper_1){\n                                data_c.push('น้ำหยด 1 : '+result.dripper_1)\n                            }\n                        }\n                        if(cont_manual.dripper_2 == 'ON'){\n                            if (_result.dripper_2 !== result.dripper_2) {\n                                data_c.push('น้ำหยด 2 : ' + result.dripper_2)\n                            }\n                        }\n                        if(cont_manual.dripper_3 == 'ON'){\n                            if (_result.dripper_3 !== result.dripper_3) {\n                                data_c.push('น้ำหยด 3 : ' + result.dripper_3)\n                            }\n                        }\n                        if(cont_manual.dripper_4 == 'ON'){\n                            if (_result.dripper_4 !== result.dripper_4) {\n                                data_c.push('น้ำหยด 4 : ' + result.dripper_4)\n                            }\n                         }\n                        if (cont_manual.fan_1 == 'ON') {\n                            if (_result.fan_1 !== result.fan_1) {\n                                data_c.push('พัดลม 1 : ' + result.fan_1)\n                            }\n                        }\n                        if (cont_manual.fan_2 === 'ON') {\n                            if (_result.fan_2 !== result.fan_2) {\n                                data_c.push('พัดลม 2 : ' + result.fan_2)\n                            }\n                        }\n                        if (cont_manual.fan_3 === 'ON') {\n                            if (_result.fan_3 !== result.fan_3) {\n                                data_c.push('พัดลม 3 : ' + result.fan_3)\n                            }\n                        }\n                        if (cont_manual.fan_4 === 'ON') {\n                            if (_result.fan_4 !== result.fan_4) {\n                                data_c.push('พัดลม 4 : ' + result.fan_4)\n                            }\n                        }\n                        if(cont_manual.foggy_1 === 'ON'){\n                            if(_result.foggy_1 !== result.foggy_1){\n                                data_c.push('พ่นหมอก 1 : '+result.foggy_1)\n                            }\n                        }\n                        if(cont_manual.foggy_2 === 'ON'){\n                            if(_result.foggy_2 !== result.foggy_2){\n                                data_c.push('พ่นหมอก 2 : '+result.foggy_2)\n                            }\n                        }\n                    }else{ // Auto\n                        if(_result.dripper_1 !== result.dripper_1){\n                            data_c.push('น้ำหยด 1 : '+result.dripper_1)\n                        }\n                        if(_result.dripper_2 !== result.dripper_2){\n                            data_c.push('น้ำหยด 2 : '+result.dripper_2)\n                        }\n                        if(_result.dripper_3 !== result.dripper_3){\n                            data_c.push('น้ำหยด 3 : '+result.dripper_3)\n                        }\n                        if(_result.dripper_4 !== result.dripper_4){\n                            data_c.push('น้ำหยด 4 : '+result.dripper_4)\n                        }\n                        if (_result.fan_1 !== result.fan_1) {\n                            data_c.push('พัดลม 1 : ' + result.fan_1)\n                        }\n                        if (_result.fan_2 !== result.fan_2) {\n                            data_c.push('พัดลม 2 : ' + result.fan_2)\n                        }\n                        if (_result.fan_3 !== result.fan_3) {\n                            data_c.push('พัดลม 3 : ' + result.fan_3)\n                        }\n                        if (_result.fan_4 !== result.fan_4) {\n                            data_c.push('พัดลม 4 : ' + result.fan_4)\n                        }\n                        if(_result.foggy_1 !== result.foggy_1){\n                            data_c.push('พ่นหมอก 1 : '+result.foggy_1)\n                        }\n                        if(_result.foggy_2 !== result.foggy_2){\n                            data_c.push('พ่นหมอก 2 : '+result.foggy_2)\n                        }\n                    }\n                    if (_result.spray !== result.spray) {\n                        data_c.push('สเปรย์ : ' + result.spray)\n                    }\n                    if (_result.shading !== result.shading) {\n                        data_c.push('แสลนพรางแสง : ' + result.shading)\n                    }\n                }else{\n                    if (result.mode === 'Manual'){\n                        data_c.push('เปลี่ยนโหมด : Auto เป็น ' + result.mode)\n                    }else{\n                        data_c.push('เปลี่ยนโหมด : Manual เป็น' + result.mode)\n                    }\n                }\n                data_c.push('ผู้สั่งงาน : ' + user_c)\n                msg.headers = {};\n                msg.method = \"POST\";\n                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                msg.payload = {\n                    sn: sn,\n                    output: JSON.stringify(data_c)\n                }\n                context.set('log_control', output);\n                return msg;\n            }\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1160,
        "wires": [
            [
                "d23b53bbae4613b9",
                "59f00f8895d79214"
            ]
        ]
    },
    {
        "id": "38a8897d26e5dadd",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "// var result =msg.payload;\n// var n_result = result.split('\\r\\n');\nvar result = JSON.parse(msg.payload);\nmsg.payload = result.config_manual;\n            // {\n            //   \"dripper_1\":  result.split('\\r\\n')[2].split('=')[1],\n            //   \"dripper_2\":  result.split('\\r\\n')[3].split('=')[1],\n            //   \"dripper_3\":  result.split('\\r\\n')[4].split('=')[1],\n            //   \"dripper_4\":  result.split('\\r\\n')[5].split('=')[1],\n            //   \"fan_1\":      result.split('\\r\\n')[6].split('=')[1],\n            //   \"fan_2\":      result.split('\\r\\n')[7].split('=')[1],\n            //   \"fan_3\":      result.split('\\r\\n')[8].split('=')[1],\n            //   \"fan_4\":      result.split('\\r\\n')[9].split('=')[1],\n            //   \"foggy_1\":    result.split('\\r\\n')[10].split('=')[1],\n            //   \"foggy_2\":    result.split('\\r\\n')[11].split('=')[1]\n            // }\nmsg.topic = \"get_cont_manual\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1160,
        "wires": [
            [
                "cef2baee64a03bd1"
            ]
        ]
    },
    {
        "id": "b00deb0d5ee7ed40",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 1120,
        "wires": []
    },
    {
        "id": "e722d2df7572f12b",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 1160,
        "wires": []
    },
    {
        "id": "43172b32187b0212",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1090,
        "y": 1120,
        "wires": [
            [
                "b00deb0d5ee7ed40"
            ]
        ]
    },
    {
        "id": "d23b53bbae4613b9",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1090,
        "y": 1160,
        "wires": [
            [
                "e722d2df7572f12b"
            ]
        ]
    },
    {
        "id": "ec40b65850464070",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 1040,
        "wires": [
            [
                "9c56fdb10b2ff5ef"
            ]
        ]
    },
    {
        "id": "e0df663a20c75b0f",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 84",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1040,
        "wires": []
    },
    {
        "id": "59f00f8895d79214",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 85",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1200,
        "wires": []
    },
    {
        "id": "76c1dcb8c808bb94",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 86",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 1020,
        "wires": []
    },
    {
        "id": "58db57f8723c6da7",
        "type": "inject",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "TUSMT005",
        "payloadType": "str",
        "x": 430,
        "y": 1260,
        "wires": [
            [
                "f0e6841d986e9bdc"
            ]
        ]
    },
    {
        "id": "f0e6841d986e9bdc",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "Initial Last Data from DB",
        "func": "    var output = msg.payload;\n    // var pase_json = output.control_status;\n    // var parseJSON = JSON.parse(output);\n    // msg.payload =output;\n    \nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/get_config.php\"; \nmsg.payload = {house_master:output}\nmsg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\nmsg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1260,
        "wires": [
            [
                "0180a4a2450dc1e8"
            ]
        ]
    },
    {
        "id": "f99b362d6a53e71e",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "Change Topic to \"config\"",
        "func": "var output = msg.payload;\nmsg.topic = \"config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1300,
        "wires": [
            [
                "1baad3dfe59d7ffd",
                "7dfd679ae7c283c4",
                "cfb86eb835c001f7"
            ]
        ]
    },
    {
        "id": "fd487735c40ef244",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT005/control/response",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 480,
        "y": 1380,
        "wires": [
            [
                "c04a963c1a088b52"
            ]
        ]
    },
    {
        "id": "c04a963c1a088b52",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"get_mqtt\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1380,
        "wires": [
            [
                "1baad3dfe59d7ffd",
                "7dfd679ae7c283c4"
            ]
        ]
    },
    {
        "id": "1baad3dfe59d7ffd",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "insert_control",
        "func": "let data_log = [];\nlet log_control = context.get('log_control') || 'No';\nif (msg.topic == \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic == \"config\") {\n    context.set('get_config', msg.payload);\n}\nif (msg.topic == \"get_mqtt\") {\n    context.set('get_mqtt', msg.payload);\n}\nlet get_status = context.get('get_status') || 0;\nlet n_config = context.get('get_config') || 0;\nlet get_mqtt = context.get('get_mqtt') || 0;\nif (n_config !== 0) {\n    // msg.payload = n_config.control_response;\n    // return msg;\n    // return false\n    if (get_status !== 0) {\n        if (get_status === \"online\") {\n            // msg.payload = get_status\n            // return msg\n            if (log_control === 'No') {\n                var cont_log = n_config.control_response;\n                // delete cont_log[\"mode\"];\n                delete cont_log[\"serial_id\"];\n                delete cont_log[\"user_control\"];\n                context.set('log_control', JSON.stringify(cont_log));\n\n                // msg.payload = context.get('log_control');\n                // return msg;\n                // return false;\n            }\n            if (get_mqtt !== 0) {\n                var result = JSON.parse(get_mqtt);\n                var output = JSON.stringify({\n                    \"mode\": result.mode,\n                    \"dripper_1\": result.dripper_1,\n                    \"dripper_2\": result.dripper_2,\n                    \"dripper_3\": result.dripper_3,\n                    \"dripper_4\": result.dripper_4,\n                    \"fan_1\": result.fan_1,\n                    \"fan_2\": result.fan_2,\n                    \"fan_3\": result.fan_3,\n                    \"fan_4\": result.fan_4,\n                    \"foggy_1\": result.foggy_1,\n                    \"foggy_2\": result.foggy_2,\n                    \"spray\": result.spray,\n                    \"shading\": result.shading\n                });\n                // delete result[\"serial_id\"];\n                // delete result[\"user_control\"];\n                // msg.payload = context.get('log_control')+\" <br> \"+ output;\n                // msg.payload = output\n                // return msg;\n                // return false;\n\n                if (context.get('log_control') === output) {\n                    // msg.payload = 'sum'\n                    // return msg;\n                } else {\n                    var _result = JSON.parse(context.get('log_control'));\n                    if (_result.mode === result.mode) { // โหลดทำงาน\n                        if (result.mode === 'Manual') {\n                            msg.headers = {};\n                            msg.method = \"POST\";\n                            msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                            msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                            msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                            msg.payload = {\n                                output: get_mqtt,//JSON.stringify(get_mqtt),\n                                mode: result.mode,\n                                load: '',\n                                channel: ''\n                            }\n                            context.set('log_control', output);\n                            return msg;\n                        } else { // Auto\n                            if (_result.dripper_1 !== result.dripper_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_1',\n                                    channel: 1\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_2 !== result.dripper_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_2',\n                                    channel: 2\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_3 !== result.dripper_3) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_3',\n                                    channel: 3\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_4 !== result.dripper_4) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_4',\n                                    channel: 4\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.fan_1 !== result.fan_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_1',\n                                    channel: 5\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_2 !== result.fan_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_2',\n                                    channel: 6\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_3 !== result.fan_3) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_3',\n                                    channel: 7\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_4 !== result.fan_4) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_4',\n                                    channel: 8\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.foggy_1 !== result.foggy_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'foggy_1',\n                                    channel: 9\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.foggy_2 !== result.foggy_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'foggy_2',\n                                    channel: 10\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.spray !== result.spray) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'spray',\n                                    channel: 11\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.shading !== result.shading) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'shading',\n                                    channel: 12\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                        }\n                    } else {\n                        // send_data(output, result.mode);\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            output: get_mqtt,//JSON.stringify(get_mqtt),\n                            mode: 'เปลี่ยนโหมด',\n                            load: '',\n                            channel: ''\n                        }\n                        context.set('log_control', output);\n                        return msg;\n                    }\n                    // function send_data(output, output2){\n                    //     msg.headers = {};\n                    //     msg.method = \"POST\";\n                    //     msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                    //     msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                    //     msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                    //     msg.payload = {\n                    //         output: output,//JSON.stringify(get_mqtt),\n                    //         data_c: output2//JSON.stringify(get_submode)\n                    //     }\n                    //     context.set('log_control', output);\n                    //     return msg;\n                    // }\n\n                }\n            }\n        }\n    }\n    // else{\n    //     msg.payload = 'get_status'\n    //     return msg\n    // }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1380,
        "wires": [
            [
                "9560c46e6623ff55",
                "e30a54ccfe8e58f5"
            ]
        ]
    },
    {
        "id": "d822fd06d82c32f7",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT005/control/set_config",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 480,
        "y": 1420,
        "wires": [
            [
                "1bf0fc109c3b4b19"
            ]
        ]
    },
    {
        "id": "7dfd679ae7c283c4",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "send_line_notify",
        "func": "var data_log = [];\nvar log_control = context.get('log_control') || 'No';\nif (msg.topic == \"config\"){\n    context.set('get_config',msg.payload);\n}\nif (msg.topic == \"get_mqtt\"){\n    context.set('get_mqtt',msg.payload);\n}\nif (msg.topic == \"get_cont_manual\"){\n    context.set('get_cont_manual',msg.payload);\n}\nvar n_config = context.get('get_config') || 0;\nvar get_mqtt = context.get('get_mqtt') || 0;\nvar cont_manual = context.get('get_cont_manual') || 0;\n\nif(n_config !== 0){\n    if(log_control === 'No'){\n        var cont_log = n_config.control_response;\n        delete cont_log[\"serial_id\"];\n        delete cont_log[\"user_control\"];\n        context.set('log_control', JSON.stringify(cont_log));\n    }else{\n        if(get_mqtt !== 0){\n            // msg.payload = cont_manual\n            // return msg\n            var result = JSON.parse(get_mqtt);\n            var output = JSON.stringify({\n                \"mode\":result.mode,\n                \"dripper_1\":result.dripper_1,\n                \"dripper_2\":result.dripper_2,\n                \"dripper_3\":result.dripper_3,\n                \"dripper_4\":result.dripper_4,\n                \"fan_1\":result.fan_1,\n                \"fan_2\":result.fan_2,\n                \"fan_3\":result.fan_3,\n                \"fan_4\":result.fan_4,\n                \"foggy_1\":result.foggy_1,\n                \"foggy_2\":result.foggy_2,\n                \"spray\":result.spray,\n                \"shading\":result.shading\n            });\n            var user_c = result.user_control;\n            var sn = result.serial_id;\n            // var house_numb = sn.substring(7, 8);\n            \n            // delete result[\"serial_id\"];\n            // delete result[\"user_control\"];\n            \n            // msg.payload = log_control +'!== '+ output\n            // return msg\n            if(log_control !== output){\n                var _result = JSON.parse(context.get('log_control'));\n                var data_c = [];\n                if (_result.mode === result.mode) { // โหลดทำงาน\n                    data_c.push('โหมด : ' + result.mode)\n                    if(result.mode === 'Manual'){\n                        if(cont_manual.dripper_1 == 'ON'){\n                            if(_result.dripper_1 !== result.dripper_1){\n                                data_c.push('น้ำหยด 1 : '+result.dripper_1)\n                            }\n                        }\n                        if(cont_manual.dripper_2 == 'ON'){\n                            if (_result.dripper_2 !== result.dripper_2) {\n                                data_c.push('น้ำหยด 2 : ' + result.dripper_2)\n                            }\n                        }\n                        if(cont_manual.dripper_3 == 'ON'){\n                            if (_result.dripper_3 !== result.dripper_3) {\n                                data_c.push('น้ำหยด 3 : ' + result.dripper_3)\n                            }\n                        }\n                        if(cont_manual.dripper_4 == 'ON'){\n                            if (_result.dripper_4 !== result.dripper_4) {\n                                data_c.push('น้ำหยด 4 : ' + result.dripper_4)\n                            }\n                         }\n                        if (cont_manual.fan_1 == 'ON') {\n                            if (_result.fan_1 !== result.fan_1) {\n                                data_c.push('พัดลม 1 : ' + result.fan_1)\n                            }\n                        }\n                        if (cont_manual.fan_2 === 'ON') {\n                            if (_result.fan_2 !== result.fan_2) {\n                                data_c.push('พัดลม 2 : ' + result.fan_2)\n                            }\n                        }\n                        if (cont_manual.fan_3 === 'ON') {\n                            if (_result.fan_3 !== result.fan_3) {\n                                data_c.push('พัดลม 3 : ' + result.fan_3)\n                            }\n                        }\n                        if (cont_manual.fan_4 === 'ON') {\n                            if (_result.fan_4 !== result.fan_4) {\n                                data_c.push('พัดลม 4 : ' + result.fan_4)\n                            }\n                        }\n                        if(cont_manual.foggy_1 === 'ON'){\n                            if(_result.foggy_1 !== result.foggy_1){\n                                data_c.push('พ่นหมอก 1 : '+result.foggy_1)\n                            }\n                        }\n                        if(cont_manual.foggy_2 === 'ON'){\n                            if(_result.foggy_2 !== result.foggy_2){\n                                data_c.push('พ่นหมอก 2 : '+result.foggy_2)\n                            }\n                        }\n                    }else{ // Auto\n                        if(_result.dripper_1 !== result.dripper_1){\n                            data_c.push('น้ำหยด 1 : '+result.dripper_1)\n                        }\n                        if(_result.dripper_2 !== result.dripper_2){\n                            data_c.push('น้ำหยด 2 : '+result.dripper_2)\n                        }\n                        if(_result.dripper_3 !== result.dripper_3){\n                            data_c.push('น้ำหยด 3 : '+result.dripper_3)\n                        }\n                        if(_result.dripper_4 !== result.dripper_4){\n                            data_c.push('น้ำหยด 4 : '+result.dripper_4)\n                        }\n                        if (_result.fan_1 !== result.fan_1) {\n                            data_c.push('พัดลม 1 : ' + result.fan_1)\n                        }\n                        if (_result.fan_2 !== result.fan_2) {\n                            data_c.push('พัดลม 2 : ' + result.fan_2)\n                        }\n                        if (_result.fan_3 !== result.fan_3) {\n                            data_c.push('พัดลม 3 : ' + result.fan_3)\n                        }\n                        if (_result.fan_4 !== result.fan_4) {\n                            data_c.push('พัดลม 4 : ' + result.fan_4)\n                        }\n                        if(_result.foggy_1 !== result.foggy_1){\n                            data_c.push('พ่นหมอก 1 : '+result.foggy_1)\n                        }\n                        if(_result.foggy_2 !== result.foggy_2){\n                            data_c.push('พ่นหมอก 2 : '+result.foggy_2)\n                        }\n                    }\n                    if (_result.spray !== result.spray) {\n                        data_c.push('สเปรย์ : ' + result.spray)\n                    }\n                    if (_result.shading !== result.shading) {\n                        data_c.push('แสลนพรางแสง : ' + result.shading)\n                    }\n                }else{\n                    if (result.mode === 'Manual'){\n                        data_c.push('เปลี่ยนโหมด : Auto เป็น ' + result.mode)\n                    }else{\n                        data_c.push('เปลี่ยนโหมด : Manual เป็น' + result.mode)\n                    }\n                }\n                data_c.push('ผู้สั่งงาน : ' + user_c)\n                msg.headers = {};\n                msg.method = \"POST\";\n                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                msg.payload = {\n                    sn: sn,\n                    output: JSON.stringify(data_c)\n                }\n                context.set('log_control', output);\n                return msg;\n            }\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1420,
        "wires": [
            [
                "742f209be433588e",
                "ae5ef1ad427a2910"
            ]
        ]
    },
    {
        "id": "1bf0fc109c3b4b19",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "// var result =msg.payload;\n// var n_result = result.split('\\r\\n');\nvar result = JSON.parse(msg.payload);\nmsg.payload = result.config_manual;\n            // {\n            //   \"dripper_1\":  result.split('\\r\\n')[2].split('=')[1],\n            //   \"dripper_2\":  result.split('\\r\\n')[3].split('=')[1],\n            //   \"dripper_3\":  result.split('\\r\\n')[4].split('=')[1],\n            //   \"dripper_4\":  result.split('\\r\\n')[5].split('=')[1],\n            //   \"fan_1\":      result.split('\\r\\n')[6].split('=')[1],\n            //   \"fan_2\":      result.split('\\r\\n')[7].split('=')[1],\n            //   \"fan_3\":      result.split('\\r\\n')[8].split('=')[1],\n            //   \"fan_4\":      result.split('\\r\\n')[9].split('=')[1],\n            //   \"foggy_1\":    result.split('\\r\\n')[10].split('=')[1],\n            //   \"foggy_2\":    result.split('\\r\\n')[11].split('=')[1]\n            // }\nmsg.topic = \"get_cont_manual\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1420,
        "wires": [
            [
                "7dfd679ae7c283c4"
            ]
        ]
    },
    {
        "id": "c6606eafea1fb673",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 1380,
        "wires": []
    },
    {
        "id": "627e9d43106c31a3",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 1420,
        "wires": []
    },
    {
        "id": "9560c46e6623ff55",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1090,
        "y": 1380,
        "wires": [
            [
                "c6606eafea1fb673"
            ]
        ]
    },
    {
        "id": "742f209be433588e",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1090,
        "y": 1420,
        "wires": [
            [
                "627e9d43106c31a3"
            ]
        ]
    },
    {
        "id": "0180a4a2450dc1e8",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 1300,
        "wires": [
            [
                "f99b362d6a53e71e"
            ]
        ]
    },
    {
        "id": "e30a54ccfe8e58f5",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 87",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 1340,
        "wires": []
    },
    {
        "id": "ae5ef1ad427a2910",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 88",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1460,
        "wires": []
    },
    {
        "id": "cfb86eb835c001f7",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 89",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 1280,
        "wires": []
    },
    {
        "id": "12056e79075b6ad6",
        "type": "inject",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "TUSMT006",
        "payloadType": "str",
        "x": 430,
        "y": 1500,
        "wires": [
            [
                "8c3f5d68ec826ab0"
            ]
        ]
    },
    {
        "id": "8c3f5d68ec826ab0",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "Initial Last Data from DB",
        "func": "    var output = msg.payload;\n    // var pase_json = output.control_status;\n    // var parseJSON = JSON.parse(output);\n    // msg.payload =output;\n    \nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/get_config.php\"; \nmsg.payload = {house_master:output}\nmsg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\nmsg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1500,
        "wires": [
            [
                "dfd27e5b7b3cea7b"
            ]
        ]
    },
    {
        "id": "f1a8cbbbb5b31e59",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "Change Topic to \"config\"",
        "func": "var output = msg.payload;\nmsg.topic = \"config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1540,
        "wires": [
            [
                "6986c490f30070d2",
                "d2026b73ef8b853b",
                "1b5d2f8e25e8a9ea"
            ]
        ]
    },
    {
        "id": "2043a7f91c8c78e6",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT006/control/response",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 480,
        "y": 1620,
        "wires": [
            [
                "d6a34af9fff15b1b"
            ]
        ]
    },
    {
        "id": "d6a34af9fff15b1b",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"get_mqtt\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1620,
        "wires": [
            [
                "6986c490f30070d2",
                "d2026b73ef8b853b"
            ]
        ]
    },
    {
        "id": "6986c490f30070d2",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "insert_control",
        "func": "let data_log = [];\nlet log_control = context.get('log_control') || 'No';\nif (msg.topic == \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic == \"config\") {\n    context.set('get_config', msg.payload);\n}\nif (msg.topic == \"get_mqtt\") {\n    context.set('get_mqtt', msg.payload);\n}\nlet get_status = context.get('get_status') || 0;\nlet n_config = context.get('get_config') || 0;\nlet get_mqtt = context.get('get_mqtt') || 0;\nif (n_config !== 0) {\n    // msg.payload = n_config.control_response;\n    // return msg;\n    // return false\n    if (get_status !== 0) {\n        if (get_status === \"online\") {\n            // msg.payload = get_status\n            // return msg\n            if (log_control === 'No') {\n                var cont_log = n_config.control_response;\n                // delete cont_log[\"mode\"];\n                delete cont_log[\"serial_id\"];\n                delete cont_log[\"user_control\"];\n                context.set('log_control', JSON.stringify(cont_log));\n\n                // msg.payload = context.get('log_control');\n                // return msg;\n                // return false;\n            }\n            if (get_mqtt !== 0) {\n                var result = JSON.parse(get_mqtt);\n                var output = JSON.stringify({\n                    \"mode\": result.mode,\n                    \"dripper_1\": result.dripper_1,\n                    \"dripper_2\": result.dripper_2,\n                    \"dripper_3\": result.dripper_3,\n                    \"dripper_4\": result.dripper_4,\n                    \"fan_1\": result.fan_1,\n                    \"fan_2\": result.fan_2,\n                    \"fan_3\": result.fan_3,\n                    \"fan_4\": result.fan_4,\n                    \"foggy_1\": result.foggy_1,\n                    \"foggy_2\": result.foggy_2,\n                    \"spray\": result.spray,\n                    \"shading\": result.shading\n                });\n                // delete result[\"serial_id\"];\n                // delete result[\"user_control\"];\n                // msg.payload = context.get('log_control')+\" <br> \"+ output;\n                // msg.payload = output\n                // return msg;\n                // return false;\n\n                if (context.get('log_control') === output) {\n                    // msg.payload = 'sum'\n                    // return msg;\n                } else {\n                    var _result = JSON.parse(context.get('log_control'));\n                    if (_result.mode === result.mode) { // โหลดทำงาน\n                        if (result.mode === 'Manual') {\n                            msg.headers = {};\n                            msg.method = \"POST\";\n                            msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                            msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                            msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                            msg.payload = {\n                                output: get_mqtt,//JSON.stringify(get_mqtt),\n                                mode: result.mode,\n                                load: '',\n                                channel: ''\n                            }\n                            context.set('log_control', output);\n                            return msg;\n                        } else { // Auto\n                            if (_result.dripper_1 !== result.dripper_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_1',\n                                    channel: 1\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_2 !== result.dripper_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_2',\n                                    channel: 2\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_3 !== result.dripper_3) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_3',\n                                    channel: 3\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_4 !== result.dripper_4) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_4',\n                                    channel: 4\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.fan_1 !== result.fan_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_1',\n                                    channel: 5\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_2 !== result.fan_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_2',\n                                    channel: 6\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_3 !== result.fan_3) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_3',\n                                    channel: 7\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_4 !== result.fan_4) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_4',\n                                    channel: 8\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.foggy_1 !== result.foggy_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'foggy_1',\n                                    channel: 9\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.foggy_2 !== result.foggy_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'foggy_2',\n                                    channel: 10\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.spray !== result.spray) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'spray',\n                                    channel: 11\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.shading !== result.shading) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'shading',\n                                    channel: 12\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                        }\n                    } else {\n                        // send_data(output, result.mode);\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            output: get_mqtt,//JSON.stringify(get_mqtt),\n                            mode: 'เปลี่ยนโหมด',\n                            load: '',\n                            channel: ''\n                        }\n                        context.set('log_control', output);\n                        return msg;\n                    }\n                    // function send_data(output, output2){\n                    //     msg.headers = {};\n                    //     msg.method = \"POST\";\n                    //     msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                    //     msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                    //     msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                    //     msg.payload = {\n                    //         output: output,//JSON.stringify(get_mqtt),\n                    //         data_c: output2//JSON.stringify(get_submode)\n                    //     }\n                    //     context.set('log_control', output);\n                    //     return msg;\n                    // }\n\n                }\n            }\n        }\n    }\n    // else{\n    //     msg.payload = 'get_status'\n    //     return msg\n    // }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1620,
        "wires": [
            [
                "65b90f9ccaf40308",
                "6f9e6f183cf91e68"
            ]
        ]
    },
    {
        "id": "921052882b2d3389",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT006/control/set_config",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 480,
        "y": 1660,
        "wires": [
            [
                "239db4e9bc87721f"
            ]
        ]
    },
    {
        "id": "d2026b73ef8b853b",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "send_line_notify",
        "func": "var data_log = [];\nvar log_control = context.get('log_control') || 'No';\nif (msg.topic == \"config\"){\n    context.set('get_config',msg.payload);\n}\nif (msg.topic == \"get_mqtt\"){\n    context.set('get_mqtt',msg.payload);\n}\nif (msg.topic == \"get_cont_manual\"){\n    context.set('get_cont_manual',msg.payload);\n}\nvar n_config = context.get('get_config') || 0;\nvar get_mqtt = context.get('get_mqtt') || 0;\nvar cont_manual = context.get('get_cont_manual') || 0;\n\nif(n_config !== 0){\n    if(log_control === 'No'){\n        var cont_log = n_config.control_response;\n        delete cont_log[\"serial_id\"];\n        delete cont_log[\"user_control\"];\n        context.set('log_control', JSON.stringify(cont_log));\n    }else{\n        if(get_mqtt !== 0){\n            // msg.payload = cont_manual\n            // return msg\n            var result = JSON.parse(get_mqtt);\n            var output = JSON.stringify({\n                \"mode\":result.mode,\n                \"dripper_1\":result.dripper_1,\n                \"dripper_2\":result.dripper_2,\n                \"dripper_3\":result.dripper_3,\n                \"dripper_4\":result.dripper_4,\n                \"fan_1\":result.fan_1,\n                \"fan_2\":result.fan_2,\n                \"fan_3\":result.fan_3,\n                \"fan_4\":result.fan_4,\n                \"foggy_1\":result.foggy_1,\n                \"foggy_2\":result.foggy_2,\n                \"spray\":result.spray,\n                \"shading\":result.shading\n            });\n            var user_c = result.user_control;\n            var sn = result.serial_id;\n            // var house_numb = sn.substring(7, 8);\n            \n            // delete result[\"serial_id\"];\n            // delete result[\"user_control\"];\n            \n            // msg.payload = log_control +'!== '+ output\n            // return msg\n            if(log_control !== output){\n                var _result = JSON.parse(context.get('log_control'));\n                var data_c = [];\n                if (_result.mode === result.mode) { // โหลดทำงาน\n                    data_c.push('โหมด : ' + result.mode)\n                    if(result.mode === 'Manual'){\n                        if(cont_manual.dripper_1 == 'ON'){\n                            if(_result.dripper_1 !== result.dripper_1){\n                                data_c.push('น้ำหยด 1 : '+result.dripper_1)\n                            }\n                        }\n                        if(cont_manual.dripper_2 == 'ON'){\n                            if (_result.dripper_2 !== result.dripper_2) {\n                                data_c.push('น้ำหยด 2 : ' + result.dripper_2)\n                            }\n                        }\n                        if(cont_manual.dripper_3 == 'ON'){\n                            if (_result.dripper_3 !== result.dripper_3) {\n                                data_c.push('น้ำหยด 3 : ' + result.dripper_3)\n                            }\n                        }\n                        if(cont_manual.dripper_4 == 'ON'){\n                            if (_result.dripper_4 !== result.dripper_4) {\n                                data_c.push('น้ำหยด 4 : ' + result.dripper_4)\n                            }\n                         }\n                        if (cont_manual.fan_1 == 'ON') {\n                            if (_result.fan_1 !== result.fan_1) {\n                                data_c.push('พัดลม 1 : ' + result.fan_1)\n                            }\n                        }\n                        if (cont_manual.fan_2 === 'ON') {\n                            if (_result.fan_2 !== result.fan_2) {\n                                data_c.push('พัดลม 2 : ' + result.fan_2)\n                            }\n                        }\n                        if (cont_manual.fan_3 === 'ON') {\n                            if (_result.fan_3 !== result.fan_3) {\n                                data_c.push('พัดลม 3 : ' + result.fan_3)\n                            }\n                        }\n                        if (cont_manual.fan_4 === 'ON') {\n                            if (_result.fan_4 !== result.fan_4) {\n                                data_c.push('พัดลม 4 : ' + result.fan_4)\n                            }\n                        }\n                        if(cont_manual.foggy_1 === 'ON'){\n                            if(_result.foggy_1 !== result.foggy_1){\n                                data_c.push('พ่นหมอก 1 : '+result.foggy_1)\n                            }\n                        }\n                        if(cont_manual.foggy_2 === 'ON'){\n                            if(_result.foggy_2 !== result.foggy_2){\n                                data_c.push('พ่นหมอก 2 : '+result.foggy_2)\n                            }\n                        }\n                    }else{ // Auto\n                        if(_result.dripper_1 !== result.dripper_1){\n                            data_c.push('น้ำหยด 1 : '+result.dripper_1)\n                        }\n                        if(_result.dripper_2 !== result.dripper_2){\n                            data_c.push('น้ำหยด 2 : '+result.dripper_2)\n                        }\n                        if(_result.dripper_3 !== result.dripper_3){\n                            data_c.push('น้ำหยด 3 : '+result.dripper_3)\n                        }\n                        if(_result.dripper_4 !== result.dripper_4){\n                            data_c.push('น้ำหยด 4 : '+result.dripper_4)\n                        }\n                        if (_result.fan_1 !== result.fan_1) {\n                            data_c.push('พัดลม 1 : ' + result.fan_1)\n                        }\n                        if (_result.fan_2 !== result.fan_2) {\n                            data_c.push('พัดลม 2 : ' + result.fan_2)\n                        }\n                        if (_result.fan_3 !== result.fan_3) {\n                            data_c.push('พัดลม 3 : ' + result.fan_3)\n                        }\n                        if (_result.fan_4 !== result.fan_4) {\n                            data_c.push('พัดลม 4 : ' + result.fan_4)\n                        }\n                        if(_result.foggy_1 !== result.foggy_1){\n                            data_c.push('พ่นหมอก 1 : '+result.foggy_1)\n                        }\n                        if(_result.foggy_2 !== result.foggy_2){\n                            data_c.push('พ่นหมอก 2 : '+result.foggy_2)\n                        }\n                    }\n                    if (_result.spray !== result.spray) {\n                        data_c.push('สเปรย์ : ' + result.spray)\n                    }\n                    if (_result.shading !== result.shading) {\n                        data_c.push('แสลนพรางแสง : ' + result.shading)\n                    }\n                }else{\n                    if (result.mode === 'Manual'){\n                        data_c.push('เปลี่ยนโหมด : Auto เป็น ' + result.mode)\n                    }else{\n                        data_c.push('เปลี่ยนโหมด : Manual เป็น' + result.mode)\n                    }\n                }\n                data_c.push('ผู้สั่งงาน : ' + user_c)\n                msg.headers = {};\n                msg.method = \"POST\";\n                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                msg.payload = {\n                    sn: sn,\n                    output: JSON.stringify(data_c)\n                }\n                context.set('log_control', output);\n                return msg;\n            }\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1660,
        "wires": [
            [
                "e7023e44edbec3a7",
                "0e5df7a9b549b862"
            ]
        ]
    },
    {
        "id": "239db4e9bc87721f",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "// var result =msg.payload;\n// var n_result = result.split('\\r\\n');\nvar result = JSON.parse(msg.payload);\nmsg.payload = result.config_manual;\n            // {\n            //   \"dripper_1\":  result.split('\\r\\n')[2].split('=')[1],\n            //   \"dripper_2\":  result.split('\\r\\n')[3].split('=')[1],\n            //   \"dripper_3\":  result.split('\\r\\n')[4].split('=')[1],\n            //   \"dripper_4\":  result.split('\\r\\n')[5].split('=')[1],\n            //   \"fan_1\":      result.split('\\r\\n')[6].split('=')[1],\n            //   \"fan_2\":      result.split('\\r\\n')[7].split('=')[1],\n            //   \"fan_3\":      result.split('\\r\\n')[8].split('=')[1],\n            //   \"fan_4\":      result.split('\\r\\n')[9].split('=')[1],\n            //   \"foggy_1\":    result.split('\\r\\n')[10].split('=')[1],\n            //   \"foggy_2\":    result.split('\\r\\n')[11].split('=')[1]\n            // }\nmsg.topic = \"get_cont_manual\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1660,
        "wires": [
            [
                "d2026b73ef8b853b"
            ]
        ]
    },
    {
        "id": "5e35ef0dd06f1473",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 1620,
        "wires": []
    },
    {
        "id": "567ac0a69789a06b",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 1660,
        "wires": []
    },
    {
        "id": "65b90f9ccaf40308",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1090,
        "y": 1620,
        "wires": [
            [
                "5e35ef0dd06f1473"
            ]
        ]
    },
    {
        "id": "e7023e44edbec3a7",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1090,
        "y": 1660,
        "wires": [
            [
                "567ac0a69789a06b"
            ]
        ]
    },
    {
        "id": "dfd27e5b7b3cea7b",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 1540,
        "wires": [
            [
                "f1a8cbbbb5b31e59"
            ]
        ]
    },
    {
        "id": "6f9e6f183cf91e68",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 90",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1540,
        "wires": []
    },
    {
        "id": "0e5df7a9b549b862",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 91",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1700,
        "wires": []
    },
    {
        "id": "1b5d2f8e25e8a9ea",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 92",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 1520,
        "wires": []
    },
    {
        "id": "1c76b13bf818c82b",
        "type": "inject",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "TUSMT007",
        "payloadType": "str",
        "x": 430,
        "y": 1740,
        "wires": [
            [
                "3ffa203e88d12aec"
            ]
        ]
    },
    {
        "id": "3ffa203e88d12aec",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "Initial Last Data from DB",
        "func": "    var output = msg.payload;\n    // var pase_json = output.control_status;\n    // var parseJSON = JSON.parse(output);\n    // msg.payload =output;\n    \nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/get_config.php\"; \nmsg.payload = {house_master:output}\nmsg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\nmsg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1740,
        "wires": [
            [
                "1d3b3cc8a16aecf1"
            ]
        ]
    },
    {
        "id": "12271e2d7d20f9c6",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "Change Topic to \"config\"",
        "func": "var output = msg.payload;\nmsg.topic = \"config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 1780,
        "wires": [
            [
                "3c4b798d914db2a4",
                "40f7e7b70b13354b",
                "34f9f1911927efee"
            ]
        ]
    },
    {
        "id": "ee5879a283cdd0cb",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT007/control/response",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 480,
        "y": 1860,
        "wires": [
            [
                "976022e06189f869"
            ]
        ]
    },
    {
        "id": "976022e06189f869",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"get_mqtt\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1860,
        "wires": [
            [
                "3c4b798d914db2a4",
                "40f7e7b70b13354b"
            ]
        ]
    },
    {
        "id": "3c4b798d914db2a4",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "insert_control",
        "func": "let data_log = [];\nlet log_control = context.get('log_control') || 'No';\nif (msg.topic == \"get_status\") {\n    context.set('get_status', msg.payload);\n}\nif (msg.topic == \"config\") {\n    context.set('get_config', msg.payload);\n}\nif (msg.topic == \"get_mqtt\") {\n    context.set('get_mqtt', msg.payload);\n}\nlet get_status = context.get('get_status') || 0;\nlet n_config = context.get('get_config') || 0;\nlet get_mqtt = context.get('get_mqtt') || 0;\nif (n_config !== 0) {\n    // msg.payload = n_config.control_response;\n    // return msg;\n    // return false\n    if (get_status !== 0) {\n        if (get_status === \"online\") {\n            // msg.payload = get_status\n            // return msg\n            if (log_control === 'No') {\n                var cont_log = n_config.control_response;\n                // delete cont_log[\"mode\"];\n                delete cont_log[\"serial_id\"];\n                delete cont_log[\"user_control\"];\n                context.set('log_control', JSON.stringify(cont_log));\n\n                // msg.payload = context.get('log_control');\n                // return msg;\n                // return false;\n            }\n            if (get_mqtt !== 0) {\n                var result = JSON.parse(get_mqtt);\n                var output = JSON.stringify({\n                    \"mode\": result.mode,\n                    \"dripper_1\": result.dripper_1,\n                    \"dripper_2\": result.dripper_2,\n                    \"dripper_3\": result.dripper_3,\n                    \"dripper_4\": result.dripper_4,\n                    \"fan_1\": result.fan_1,\n                    \"fan_2\": result.fan_2,\n                    \"fan_3\": result.fan_3,\n                    \"fan_4\": result.fan_4,\n                    \"foggy_1\": result.foggy_1,\n                    \"foggy_2\": result.foggy_2,\n                    \"spray\": result.spray,\n                    \"shading\": result.shading\n                });\n                // delete result[\"serial_id\"];\n                // delete result[\"user_control\"];\n                // msg.payload = context.get('log_control')+\" <br> \"+ output;\n                // msg.payload = output\n                // return msg;\n                // return false;\n\n                if (context.get('log_control') === output) {\n                    // msg.payload = 'sum'\n                    // return msg;\n                } else {\n                    var _result = JSON.parse(context.get('log_control'));\n                    if (_result.mode === result.mode) { // โหลดทำงาน\n                        if (result.mode === 'Manual') {\n                            msg.headers = {};\n                            msg.method = \"POST\";\n                            msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                            msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                            msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                            msg.payload = {\n                                output: get_mqtt,//JSON.stringify(get_mqtt),\n                                mode: result.mode,\n                                load: '',\n                                channel: ''\n                            }\n                            context.set('log_control', output);\n                            return msg;\n                        } else { // Auto\n                            if (_result.dripper_1 !== result.dripper_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_1',\n                                    channel: 1\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_2 !== result.dripper_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_2',\n                                    channel: 2\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_3 !== result.dripper_3) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_3',\n                                    channel: 3\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.dripper_4 !== result.dripper_4) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,//JSON.stringify(get_mqtt),\n                                    mode: result.mode,\n                                    load: 'dripper_4',\n                                    channel: 4\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            else if (_result.fan_1 !== result.fan_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_1',\n                                    channel: 5\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_2 !== result.fan_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_2',\n                                    channel: 6\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_3 !== result.fan_3) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_3',\n                                    channel: 7\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.fan_4 !== result.fan_4) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'fan_4',\n                                    channel: 8\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.foggy_1 !== result.foggy_1) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'foggy_1',\n                                    channel: 9\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.foggy_2 !== result.foggy_2) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'foggy_2',\n                                    channel: 10\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.spray !== result.spray) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'spray',\n                                    channel: 11\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                            if (_result.shading !== result.shading) {\n                                msg.headers = {};\n                                msg.method = \"POST\";\n                                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                                msg.payload = {\n                                    output: get_mqtt,\n                                    mode: result.mode,\n                                    load: 'shading',\n                                    channel: 12\n                                }\n                                context.set('log_control', output);\n                                return msg;\n                            }\n                        }\n                    } else {\n                        // send_data(output, result.mode);\n                        msg.headers = {};\n                        msg.method = \"POST\";\n                        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                        msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                        msg.payload = {\n                            output: get_mqtt,//JSON.stringify(get_mqtt),\n                            mode: 'เปลี่ยนโหมด',\n                            load: '',\n                            channel: ''\n                        }\n                        context.set('log_control', output);\n                        return msg;\n                    }\n                    // function send_data(output, output2){\n                    //     msg.headers = {};\n                    //     msg.method = \"POST\";\n                    //     msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_control.php\";\n                    //     msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                    //     msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                    //     msg.payload = {\n                    //         output: output,//JSON.stringify(get_mqtt),\n                    //         data_c: output2//JSON.stringify(get_submode)\n                    //     }\n                    //     context.set('log_control', output);\n                    //     return msg;\n                    // }\n\n                }\n            }\n        }\n    }\n    // else{\n    //     msg.payload = 'get_status'\n    //     return msg\n    // }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1860,
        "wires": [
            [
                "50c26f713abf4c85",
                "fa0f793192c836e8"
            ]
        ]
    },
    {
        "id": "9051f554750a73af",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT007/control/set_config",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 480,
        "y": 1900,
        "wires": [
            [
                "f533c94b7b0791d4"
            ]
        ]
    },
    {
        "id": "40f7e7b70b13354b",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "send_line_notify",
        "func": "var data_log = [];\nvar log_control = context.get('log_control') || 'No';\nif (msg.topic == \"config\"){\n    context.set('get_config',msg.payload);\n}\nif (msg.topic == \"get_mqtt\"){\n    context.set('get_mqtt',msg.payload);\n}\nif (msg.topic == \"get_cont_manual\"){\n    context.set('get_cont_manual',msg.payload);\n}\nvar n_config = context.get('get_config') || 0;\nvar get_mqtt = context.get('get_mqtt') || 0;\nvar cont_manual = context.get('get_cont_manual') || 0;\n\nif(n_config !== 0){\n    if(log_control === 'No'){\n        var cont_log = n_config.control_response;\n        delete cont_log[\"serial_id\"];\n        delete cont_log[\"user_control\"];\n        context.set('log_control', JSON.stringify(cont_log));\n    }else{\n        if(get_mqtt !== 0){\n            // msg.payload = cont_manual\n            // return msg\n            var result = JSON.parse(get_mqtt);\n            var output = JSON.stringify({\n                \"mode\":result.mode,\n                \"dripper_1\":result.dripper_1,\n                \"dripper_2\":result.dripper_2,\n                \"dripper_3\":result.dripper_3,\n                \"dripper_4\":result.dripper_4,\n                \"fan_1\":result.fan_1,\n                \"fan_2\":result.fan_2,\n                \"fan_3\":result.fan_3,\n                \"fan_4\":result.fan_4,\n                \"foggy_1\":result.foggy_1,\n                \"foggy_2\":result.foggy_2,\n                \"spray\":result.spray,\n                \"shading\":result.shading\n            });\n            var user_c = result.user_control;\n            var sn = result.serial_id;\n            // var house_numb = sn.substring(7, 8);\n            \n            // delete result[\"serial_id\"];\n            // delete result[\"user_control\"];\n            \n            // msg.payload = log_control +'!== '+ output\n            // return msg\n            if(log_control !== output){\n                var _result = JSON.parse(context.get('log_control'));\n                var data_c = [];\n                if (_result.mode === result.mode) { // โหลดทำงาน\n                    data_c.push('โหมด : ' + result.mode)\n                    if(result.mode === 'Manual'){\n                        if(cont_manual.dripper_1 == 'ON'){\n                            if(_result.dripper_1 !== result.dripper_1){\n                                data_c.push('น้ำหยด 1 : '+result.dripper_1)\n                            }\n                        }\n                        if(cont_manual.dripper_2 == 'ON'){\n                            if (_result.dripper_2 !== result.dripper_2) {\n                                data_c.push('น้ำหยด 2 : ' + result.dripper_2)\n                            }\n                        }\n                        if(cont_manual.dripper_3 == 'ON'){\n                            if (_result.dripper_3 !== result.dripper_3) {\n                                data_c.push('น้ำหยด 3 : ' + result.dripper_3)\n                            }\n                        }\n                        if(cont_manual.dripper_4 == 'ON'){\n                            if (_result.dripper_4 !== result.dripper_4) {\n                                data_c.push('น้ำหยด 4 : ' + result.dripper_4)\n                            }\n                         }\n                        if (cont_manual.fan_1 == 'ON') {\n                            if (_result.fan_1 !== result.fan_1) {\n                                data_c.push('พัดลม 1 : ' + result.fan_1)\n                            }\n                        }\n                        if (cont_manual.fan_2 === 'ON') {\n                            if (_result.fan_2 !== result.fan_2) {\n                                data_c.push('พัดลม 2 : ' + result.fan_2)\n                            }\n                        }\n                        if (cont_manual.fan_3 === 'ON') {\n                            if (_result.fan_3 !== result.fan_3) {\n                                data_c.push('พัดลม 3 : ' + result.fan_3)\n                            }\n                        }\n                        if (cont_manual.fan_4 === 'ON') {\n                            if (_result.fan_4 !== result.fan_4) {\n                                data_c.push('พัดลม 4 : ' + result.fan_4)\n                            }\n                        }\n                        if(cont_manual.foggy_1 === 'ON'){\n                            if(_result.foggy_1 !== result.foggy_1){\n                                data_c.push('พ่นหมอก 1 : '+result.foggy_1)\n                            }\n                        }\n                        if(cont_manual.foggy_2 === 'ON'){\n                            if(_result.foggy_2 !== result.foggy_2){\n                                data_c.push('พ่นหมอก 2 : '+result.foggy_2)\n                            }\n                        }\n                    }else{ // Auto\n                        if(_result.dripper_1 !== result.dripper_1){\n                            data_c.push('น้ำหยด 1 : '+result.dripper_1)\n                        }\n                        if(_result.dripper_2 !== result.dripper_2){\n                            data_c.push('น้ำหยด 2 : '+result.dripper_2)\n                        }\n                        if(_result.dripper_3 !== result.dripper_3){\n                            data_c.push('น้ำหยด 3 : '+result.dripper_3)\n                        }\n                        if(_result.dripper_4 !== result.dripper_4){\n                            data_c.push('น้ำหยด 4 : '+result.dripper_4)\n                        }\n                        if (_result.fan_1 !== result.fan_1) {\n                            data_c.push('พัดลม 1 : ' + result.fan_1)\n                        }\n                        if (_result.fan_2 !== result.fan_2) {\n                            data_c.push('พัดลม 2 : ' + result.fan_2)\n                        }\n                        if (_result.fan_3 !== result.fan_3) {\n                            data_c.push('พัดลม 3 : ' + result.fan_3)\n                        }\n                        if (_result.fan_4 !== result.fan_4) {\n                            data_c.push('พัดลม 4 : ' + result.fan_4)\n                        }\n                        if(_result.foggy_1 !== result.foggy_1){\n                            data_c.push('พ่นหมอก 1 : '+result.foggy_1)\n                        }\n                        if(_result.foggy_2 !== result.foggy_2){\n                            data_c.push('พ่นหมอก 2 : '+result.foggy_2)\n                        }\n                    }\n                    if (_result.spray !== result.spray) {\n                        data_c.push('สเปรย์ : ' + result.spray)\n                    }\n                    if (_result.shading !== result.shading) {\n                        data_c.push('แสลนพรางแสง : ' + result.shading)\n                    }\n                }else{\n                    if (result.mode === 'Manual'){\n                        data_c.push('เปลี่ยนโหมด : Auto เป็น ' + result.mode)\n                    }else{\n                        data_c.push('เปลี่ยนโหมด : Manual เป็น' + result.mode)\n                    }\n                }\n                data_c.push('ผู้สั่งงาน : ' + user_c)\n                msg.headers = {};\n                msg.method = \"POST\";\n                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/send_line_notify.php\";\n                msg.headers[\"content-type\"] = 'application/x-www-form-urlencoded';\n                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                msg.payload = {\n                    sn: sn,\n                    output: JSON.stringify(data_c)\n                }\n                context.set('log_control', output);\n                return msg;\n            }\n        }\n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1900,
        "wires": [
            [
                "cc9acaa91e109d55",
                "98c1f4b394d77a89"
            ]
        ]
    },
    {
        "id": "f533c94b7b0791d4",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "// var result =msg.payload;\n// var n_result = result.split('\\r\\n');\nvar result = JSON.parse(msg.payload);\nmsg.payload = result.config_manual;\n            // {\n            //   \"dripper_1\":  result.split('\\r\\n')[2].split('=')[1],\n            //   \"dripper_2\":  result.split('\\r\\n')[3].split('=')[1],\n            //   \"dripper_3\":  result.split('\\r\\n')[4].split('=')[1],\n            //   \"dripper_4\":  result.split('\\r\\n')[5].split('=')[1],\n            //   \"fan_1\":      result.split('\\r\\n')[6].split('=')[1],\n            //   \"fan_2\":      result.split('\\r\\n')[7].split('=')[1],\n            //   \"fan_3\":      result.split('\\r\\n')[8].split('=')[1],\n            //   \"fan_4\":      result.split('\\r\\n')[9].split('=')[1],\n            //   \"foggy_1\":    result.split('\\r\\n')[10].split('=')[1],\n            //   \"foggy_2\":    result.split('\\r\\n')[11].split('=')[1]\n            // }\nmsg.topic = \"get_cont_manual\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1900,
        "wires": [
            [
                "40f7e7b70b13354b"
            ]
        ]
    },
    {
        "id": "2a0b7e82e925f248",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 1860,
        "wires": []
    },
    {
        "id": "c252ec8ad50808bd",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 1900,
        "wires": []
    },
    {
        "id": "50c26f713abf4c85",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1090,
        "y": 1860,
        "wires": [
            [
                "2a0b7e82e925f248"
            ]
        ]
    },
    {
        "id": "cc9acaa91e109d55",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1090,
        "y": 1900,
        "wires": [
            [
                "c252ec8ad50808bd"
            ]
        ]
    },
    {
        "id": "1d3b3cc8a16aecf1",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 1780,
        "wires": [
            [
                "12271e2d7d20f9c6"
            ]
        ]
    },
    {
        "id": "fa0f793192c836e8",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 93",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 1820,
        "wires": []
    },
    {
        "id": "98c1f4b394d77a89",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 94",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1940,
        "wires": []
    },
    {
        "id": "34f9f1911927efee",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 95",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 1760,
        "wires": []
    },
    {
        "id": "844d1f48e92d5a17",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 2420,
        "wires": []
    },
    {
        "id": "9fd04a697390c28d",
        "type": "inject",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "TUSMT",
        "payloadType": "str",
        "x": 660,
        "y": 2020,
        "wires": [
            [
                "76f636d9dfe172a9"
            ]
        ]
    },
    {
        "id": "76f636d9dfe172a9",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "Grt data",
        "func": "var output = msg.payload;\n    \nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/get_config_insert.php\"; \nmsg.payload = {house_master:output}\nmsg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\nmsg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 2020,
        "wires": [
            [
                "281bce8ec53f9d6d"
            ]
        ]
    },
    {
        "id": "28ec1348d0f74dbb",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "Topic to \"config\"",
        "func": "var output = msg.payload;\nmsg.topic = \"config\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2100,
        "wires": [
            [
                "7ecf44738ecfc6e7",
                "7ac1a7a0f2343c5c",
                "a9c5035b2a310343",
                "9dc48acc6edd844e",
                "032fe048e8653bd8",
                "859b919e0c339b28",
                "20031457090efee8",
                "97a8ef7003abf39e",
                "b7f346ea8906f5b1",
                "4cccce2a23bb3231"
            ]
        ]
    },
    {
        "id": "62ec9dc43e675f32",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT001/data_sensor/filter",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 480,
        "y": 2180,
        "wires": [
            [
                "3a97a7185da85a8e"
            ]
        ]
    },
    {
        "id": "3a97a7185da85a8e",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_1\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2180,
        "wires": [
            [
                "7c140ed915c3bc81"
            ]
        ]
    },
    {
        "id": "4b225c426bef84a5",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT002/data_sensor/filter",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 480,
        "y": 2220,
        "wires": [
            [
                "d38dbfa1666ca768"
            ]
        ]
    },
    {
        "id": "d38dbfa1666ca768",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_2\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2220,
        "wires": [
            [
                "7c140ed915c3bc81"
            ]
        ]
    },
    {
        "id": "bba31e0adc163a66",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT003/data_sensor/filter",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 480,
        "y": 2260,
        "wires": [
            [
                "1c53481b8d4eb80a"
            ]
        ]
    },
    {
        "id": "1c53481b8d4eb80a",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_3\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2260,
        "wires": [
            [
                "7c140ed915c3bc81"
            ]
        ]
    },
    {
        "id": "08a7334c92da2078",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT004/data_sensor/filter",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 480,
        "y": 2300,
        "wires": [
            [
                "b3c9d3762c3db660"
            ]
        ]
    },
    {
        "id": "b3c9d3762c3db660",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_4\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2300,
        "wires": [
            [
                "7c140ed915c3bc81"
            ]
        ]
    },
    {
        "id": "9f1b95497eb63214",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT005/data_sensor/filter",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 480,
        "y": 2340,
        "wires": [
            [
                "38b4a1b980cb2cb1"
            ]
        ]
    },
    {
        "id": "38b4a1b980cb2cb1",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_5\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2340,
        "wires": [
            [
                "7c140ed915c3bc81"
            ]
        ]
    },
    {
        "id": "462bd149116b0970",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT006/data_sensor/filter",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 480,
        "y": 2380,
        "wires": [
            [
                "266fb4237cfabf57"
            ]
        ]
    },
    {
        "id": "266fb4237cfabf57",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_6\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2380,
        "wires": [
            [
                "7c140ed915c3bc81"
            ]
        ]
    },
    {
        "id": "355bb52a55a13b77",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT007/data_sensor/filter",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 480,
        "y": 2420,
        "wires": [
            [
                "053c4eb4910fb5e2"
            ]
        ]
    },
    {
        "id": "053c4eb4910fb5e2",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_7\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2420,
        "wires": [
            [
                "7c140ed915c3bc81"
            ]
        ]
    },
    {
        "id": "7c140ed915c3bc81",
        "type": "moment",
        "z": "9ec4714069b3f5ce",
        "name": "timmer",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "hours",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "C",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 850,
        "y": 2420,
        "wires": [
            [
                "0f8a40b31d9a8967"
            ]
        ]
    },
    {
        "id": "0f8a40b31d9a8967",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "filter data",
        "func": "let timestamp = msg.timer;\nlet ntime = timestamp.split(\" \");\nlet nowtime = ntime[1];\n\nlet nminute = nowtime.split(\":\");\nlet nowminute = Number(nminute[1]);\nlet old_minute = context.get('old_nowminute') || 0;\nold_minute = Number(old_minute)\n\n\nif (msg.topic == \"mqtt_1\") {\n    context.set('mqtt_1', msg.payload);\n}\nif (msg.topic == \"mqtt_2\") {\n    context.set('mqtt_2', msg.payload);\n}\nif (msg.topic == \"mqtt_3\") {\n    context.set('mqtt_3', msg.payload);\n}\nif (msg.topic == \"mqtt_4\") {\n    context.set('mqtt_4', msg.payload);\n}\nif (msg.topic == \"mqtt_5\") {\n    context.set('mqtt_5', msg.payload);\n}\nif (msg.topic == \"mqtt_6\") {\n    context.set('mqtt_6', msg.payload);\n}\nif (msg.topic == \"mqtt_7\") {\n    context.set('mqtt_7', msg.payload);\n}\nlet mqtt_1 = context.get('mqtt_1') || 0;\nlet mqtt_2 = context.get('mqtt_2') || 0;\nlet mqtt_3 = context.get('mqtt_3') || 0;\nlet mqtt_4 = context.get('mqtt_4') || 0;\nlet mqtt_5 = context.get('mqtt_5') || 0;\nlet mqtt_6 = context.get('mqtt_6') || 0;\nlet mqtt_7 = context.get('mqtt_7') || 0;\n\nlet count_ = context.get('count_') || 0;\n\nif (count_ >= 3) {\n    context.set('count_', 0)\n    if (old_minute != nowminute) {\n        context.set('old_nowminute', nowminute);\n        let tmin = 0;\n        let tmax = 50;\n        let hmin = 0;\n        let hmax = 100;\n        let lmin = 0;\n        let lmax = 100000;\n        let smin = 0;\n        let smax = 100;\n\n        let data_1 = [], data_2 = [], data_3 = [];\n        let data_4 = [], data_5 = [], data_6 = [], data_7 = [];\n        let res_1, res_2, res_3, res_4, res_5, res_6, res_7;\n\n        if (mqtt_1 != 0) {\n            let result_1 = JSON.parse(mqtt_1);\n            if (result_1.data.temp_out > tmax ||\n                result_1.data.temp_out < tmin ||\n                result_1.data.hum_out > hmax ||\n                result_1.data.hum_out < hmin ||\n                result_1.data.light_out > lmax ||\n                result_1.data.light_out < lmin ||\n                result_1.data.temp_in > tmax ||\n                result_1.data.temp_in < tmin ||\n                result_1.data.hum_in > hmax ||\n                result_1.data.hum_in < hmin ||\n                result_1.data.light_in > lmax ||\n                result_1.data.light_in < lmin ||\n                result_1.data.soil_in > smax ||\n                result_1.data.soil_in < smin\n            ) {\n                res_1 = 1;\n            } else {\n                res_1 = 0;\n            }\n            data_1 = {\n                \"date_time1\": result_1.date + ' ' + result_1.time.substring(0, 5),\n                \"temp_out1\": result_1.data.temp_out,\n                \"hum_out1\": result_1.data.hum_out,\n                \"light_out1\": result_1.data.light_out,\n                \"temp_in1\": result_1.data.temp_in,\n                \"hum_in1\": result_1.data.hum_in,\n                \"light_in1\": result_1.data.light_in,\n                \"soil_in1\": result_1.data.soil_in,\n                \"res_1\": res_1\n            };\n        }//else{ data_1 = {\"date_time1\":''}  }\n        if (mqtt_2 != 0) {\n            let result_2 = JSON.parse(mqtt_2);\n            if (result_2.data.temp_out > tmax ||\n                result_2.data.temp_out < tmin ||\n                result_2.data.hum_out > hmax ||\n                result_2.data.hum_out < hmin ||\n                result_2.data.light_out > lmax ||\n                result_2.data.light_out < lmin ||\n                result_2.data.temp_in > tmax ||\n                result_2.data.temp_in < tmin ||\n                result_2.data.hum_in > hmax ||\n                result_2.data.hum_in < hmin ||\n                result_2.data.light_in > lmax ||\n                result_2.data.light_in < lmin ||\n                result_2.data.soil_in > smax ||\n                result_2.data.soil_in < smin\n            ) {\n                res_2 = 1;\n            } else {\n                res_2 = 0;\n            }\n            data_2 = {\n                \"date_time2\": result_2.date + ' ' + result_2.time.substring(0, 5),\n                \"temp_out2\": result_2.data.temp_out,\n                \"hum_out2\": result_2.data.hum_out,\n                \"light_out2\": result_2.data.light_out,\n                \"temp_in2\": result_2.data.temp_in,\n                \"hum_in2\": result_2.data.hum_in,\n                \"light_in2\": result_2.data.light_in,\n                \"soil_in2\": result_2.data.soil_in,\n                \"res_2\": res_2\n            };\n        }//else{ data_2 = {\"date_time2\":''}  }\n        if (mqtt_3 != 0) {\n            let result_3 = JSON.parse(mqtt_3);\n            if (result_3.data.temp_out > tmax ||\n                result_3.data.temp_out < tmin ||\n                result_3.data.hum_out > hmax ||\n                result_3.data.hum_out < hmin ||\n                result_3.data.light_out > lmax ||\n                result_3.data.light_out < lmin ||\n                result_3.data.temp_in > tmax ||\n                result_3.data.temp_in < tmin ||\n                result_3.data.hum_in > hmax ||\n                result_3.data.hum_in < hmin ||\n                result_3.data.light_in > lmax ||\n                result_3.data.light_in < lmin ||\n                result_3.data.soil_in > smax ||\n                result_3.data.soil_in < smin\n            ) {\n                res_3 = 1;\n            } else {\n                res_3 = 0;\n            }\n            data_3 = {\n                \"date_time3\": result_3.date + ' ' + result_3.time.substring(0, 5),\n                \"temp_out3\": result_3.data.temp_out,\n                \"hum_out3\": result_3.data.hum_out,\n                \"light_out3\": result_3.data.light_out,\n                \"temp_in3\": result_3.data.temp_in,\n                \"hum_in3\": result_3.data.hum_in,\n                \"light_in3\": result_3.data.light_in,\n                \"soil_in3\": result_3.data.soil_in,\n                \"res_3\": res_3\n            };\n        }//else{ data_3 = {\"date_time3\":''}  }\n        if (mqtt_4 != 0) {\n            let result_4 = JSON.parse(mqtt_4);\n            if (result_4.data.temp_out > tmax ||\n                result_4.data.temp_out < tmin ||\n                result_4.data.hum_out > hmax ||\n                result_4.data.hum_out < hmin ||\n                result_4.data.light_out > lmax ||\n                result_4.data.light_out < lmin ||\n                result_4.data.temp_in > tmax ||\n                result_4.data.temp_in < tmin ||\n                result_4.data.hum_in > hmax ||\n                result_4.data.hum_in < hmin ||\n                result_4.data.light_in > lmax ||\n                result_4.data.light_in < lmin ||\n                result_4.data.soil_in > smax ||\n                result_4.data.soil_in < smin\n            ) {\n                res_4 = 1;\n            } else {\n                res_4 = 0;\n            }\n            data_4 = {\n                \"date_time4\": result_4.date + ' ' + result_4.time.substring(0, 5),\n                \"temp_out4\": result_4.data.temp_out,\n                \"hum_out4\": result_4.data.hum_out,\n                \"light_out4\": result_4.data.light_out,\n                \"temp_in4\": result_4.data.temp_in,\n                \"hum_in4\": result_4.data.hum_in,\n                \"light_in4\": result_4.data.light_in,\n                \"soil_in4\": result_4.data.soil_in,\n                \"res_4\": res_4\n            };\n        }//else{ data_4 = {\"date_time4\":''}  }\n        if (mqtt_5 != 0) {\n            let result_5 = JSON.parse(mqtt_5);\n            if (result_5.data.temp_out > tmax ||\n                result_5.data.temp_out < tmin ||\n                result_5.data.hum_out > hmax ||\n                result_5.data.hum_out < hmin ||\n                result_5.data.light_out > lmax ||\n                result_5.data.light_out < lmin ||\n                result_5.data.temp_in > tmax ||\n                result_5.data.temp_in < tmin ||\n                result_5.data.hum_in > hmax ||\n                result_5.data.hum_in < hmin ||\n                result_5.data.light_in > lmax ||\n                result_5.data.light_in < lmin ||\n                result_5.data.soil_in > smax ||\n                result_5.data.soil_in < smin\n            ) {\n                res_5 = 1;\n            } else {\n                res_5 = 0;\n            }\n            data_5 = {\n                \"date_time5\": result_5.date + ' ' + result_5.time.substring(0, 5),\n                \"temp_out5\": result_5.data.temp_out,\n                \"hum_out5\": result_5.data.hum_out,\n                \"light_out5\": result_5.data.light_out,\n                \"temp_in5\": result_5.data.temp_in,\n                \"hum_in5\": result_5.data.hum_in,\n                \"light_in5\": result_5.data.light_in,\n                \"soil_in5\": result_5.data.soil_in,\n                \"res_5\": res_5\n            };\n        }//else{ data_5 = {\"date_time5\":''}  }\n        if (mqtt_6 != 0) {\n            let result_6 = JSON.parse(mqtt_6);\n            if (result_6.data.temp_out > tmax ||\n                result_6.data.temp_out < tmin ||\n                result_6.data.hum_out > hmax ||\n                result_6.data.hum_out < hmin ||\n                result_6.data.light_out > lmax ||\n                result_6.data.light_out < lmin ||\n                result_6.data.temp_in > tmax ||\n                result_6.data.temp_in < tmin ||\n                result_6.data.hum_in > hmax ||\n                result_6.data.hum_in < hmin ||\n                result_6.data.light_in > lmax ||\n                result_6.data.light_in < lmin ||\n                result_6.data.soil_in > smax ||\n                result_6.data.soil_in < smin\n            ) {\n                res_6 = 1;\n            } else {\n                res_6 = 0;\n            }\n            data_6 = {\n                \"date_time6\": result_6.date + ' ' + result_6.time.substring(0, 5),\n                \"temp_out6\": result_6.data.temp_out,\n                \"hum_out6\": result_6.data.hum_out,\n                \"light_out6\": result_6.data.light_out,\n                \"temp_in6\": result_6.data.temp_in,\n                \"hum_in6\": result_6.data.hum_in,\n                \"light_in6\": result_6.data.light_in,\n                \"soil_in6\": result_6.data.soil_in,\n                \"res_6\": res_6\n            };\n        }//else{ data_6 = {\"date_time6\":''}  }\n        if (mqtt_7 != 0) {\n            let result_7 = JSON.parse(mqtt_7);\n            if (result_7.data.temp_out > tmax ||\n                result_7.data.temp_out < tmin ||\n                result_7.data.hum_out > hmax ||\n                result_7.data.hum_out < hmin ||\n                result_7.data.light_out > lmax ||\n                result_7.data.light_out < lmin ||\n                result_7.data.temp_in > tmax ||\n                result_7.data.temp_in < tmin ||\n                result_7.data.hum_in > hmax ||\n                result_7.data.hum_in < hmin ||\n                result_7.data.light_in > lmax ||\n                result_7.data.light_in < lmin ||\n                result_7.data.soil_in > smax ||\n                result_7.data.soil_in < smin\n            ) {\n                res_7 = 1;\n            } else {\n                res_7 = 0;\n            }\n            data_7 = {\n                \"date_time7\": result_7.date + ' ' + result_7.time.substring(0, 5),\n                \"temp_out7\": result_7.data.temp_out,\n                \"hum_out7\": result_7.data.hum_out,\n                \"light_out7\": result_7.data.light_out,\n                \"temp_in7\": result_7.data.temp_in,\n                \"hum_in7\": result_7.data.hum_in,\n                \"light_in7\": result_7.data.light_in,\n                \"soil_in7\": result_7.data.soil_in,\n                \"res_7\": res_7\n            };\n        }//else{ data_7 = {\"date_time7\":''}  }\n\n        let data = []\n        data.push(data_1, data_2, data_3, data_4, data_5, data_6, data_7, ntime[0] + ' ' + nminute[0] + ':' + nminute[1])\n\n        msg.payload = data;\n        msg.topic = \"data_mqtt\";\n        return msg;\n\n    }\n}else{\n    context.set('count_', count_+1);\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2420,
        "wires": [
            [
                "b7f346ea8906f5b1"
            ]
        ]
    },
    {
        "id": "b7f346ea8906f5b1",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "insert data tu",
        "func": "var get_config;\nvar date_time_s = context.get('get_time_log') || 'No'\n\nif (msg.topic == \"config\"){\n    context.set('get_config',msg.payload);\n}\nif (msg.topic == \"data_mqtt\"){\n    context.set('get_data_mqtt',msg.payload);\n}\nvar n_config = context.get('get_config') || 0;\nvar data_mqtt = context.get('get_data_mqtt') || 0;\n\nif(n_config !== 0){\n    if(date_time_s === 'No'){\n        if(n_config.data == false){\n            context.set('get_time_log',n_config.datetime_sever)\n            // msg.payload = data_mqtt[7]// context.get('get_time_log')\n            // return msg;\n            \n            msg.headers = {};\n            msg.method = \"POST\";\n            msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_data.php\"; \n            msg.payload = {\n                sn:'TUSMT',\n                data_1:JSON.stringify(data_mqtt[0]),\n                data_2:JSON.stringify(data_mqtt[1]),\n                data_3:JSON.stringify(data_mqtt[2]),\n                data_4:JSON.stringify(data_mqtt[3]),\n                data_5:JSON.stringify(data_mqtt[4]),\n                data_6:JSON.stringify(data_mqtt[5]),\n                data_7:JSON.stringify(data_mqtt[6]),\n            }\n            msg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n            msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n            return msg;\n        }else{\n            if(n_config.data.data_timestamp.substring(0, 16) === data_mqtt[7]){\n                // msg.payload = 'sum' //date_time_s //context.get('get_time_log')\n                // return msg\n            }else{\n                context.set('get_time_log',data_mqtt[7])\n                msg.headers = {};\n                msg.method = \"POST\";\n                msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_data.php\"; \n                msg.payload = {\n                    sn:'TUSMT',\n                    data_1:JSON.stringify(data_mqtt[0]),\n                    data_2:JSON.stringify(data_mqtt[1]),\n                    data_3:JSON.stringify(data_mqtt[2]),\n                    data_4:JSON.stringify(data_mqtt[3]),\n                    data_5:JSON.stringify(data_mqtt[4]),\n                    data_6:JSON.stringify(data_mqtt[5]),\n                    data_7:JSON.stringify(data_mqtt[6]),\n                }\n                msg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n                msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                return msg;\n            }\n        }\n    }else{\n        // msg.payload = date_time_s// n_config.data.data_timestamp.substring(0, 16)\n        // return msg\n        // return false\n        if(date_time_s === data_mqtt[7]){\n            // msg.payload = 'sum' //date_time_s //context.get('get_time_log')\n            // return msg\n        }else{\n            context.set('get_time_log',data_mqtt[7])\n            msg.headers = {};\n            msg.method = \"POST\";\n            msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_data.php\"; \n            msg.payload = {\n                sn:'TUSMT',\n                data_1:JSON.stringify(data_mqtt[0]),\n                data_2:JSON.stringify(data_mqtt[1]),\n                data_3:JSON.stringify(data_mqtt[2]),\n                data_4:JSON.stringify(data_mqtt[3]),\n                data_5:JSON.stringify(data_mqtt[4]),\n                data_6:JSON.stringify(data_mqtt[5]),\n                data_7:JSON.stringify(data_mqtt[6]),\n            }\n            msg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n            msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n            return msg;\n        }\n    }\n}\n   ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 2420,
        "wires": [
            [
                "1787450f6f48cead",
                "f9856c7d2f3751e2"
            ]
        ]
    },
    {
        "id": "b6fd4adfb0e75930",
        "type": "mqtt out",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT001/data_sensor/realtime",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1540,
        "y": 2020,
        "wires": []
    },
    {
        "id": "c7760921460f6bf9",
        "type": "mqtt out",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT002/data_sensor/realtime",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1540,
        "y": 2060,
        "wires": []
    },
    {
        "id": "b79454dd18805714",
        "type": "mqtt out",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT003/data_sensor/realtime",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1540,
        "y": 2100,
        "wires": []
    },
    {
        "id": "e118e34f07522282",
        "type": "mqtt out",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT004/data_sensor/realtime",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1540,
        "y": 2140,
        "wires": []
    },
    {
        "id": "122c23da920277c3",
        "type": "mqtt out",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT005/data_sensor/realtime",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1540,
        "y": 2180,
        "wires": []
    },
    {
        "id": "713b8554d01d8144",
        "type": "mqtt out",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT006/data_sensor/realtime",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1540,
        "y": 2220,
        "wires": []
    },
    {
        "id": "3476f76a06d1fe8a",
        "type": "mqtt out",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT007/data_sensor/realtime",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1540,
        "y": 2260,
        "wires": []
    },
    {
        "id": "7ecf44738ecfc6e7",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "data set 1",
        "func": "var n_config = msg.payload\n\nif(n_config.data != false){\n    var jsonstring ={};\n    if(n_config.data.data_timestamp_1 != ''){\n        jsonstring = {\n        \"serial_id\": \"TUSMT001\", \n        \"date\": n_config.data.data_timestamp_1.substring(0, 10), \n        \"time\":n_config.data.data_timestamp_1.substring(11, 16),\n        \"data\":{ \n            \"temp_out\":n_config.data.data_temp_out_1, \n            \"hum_out\":n_config.data.data_hum_out_1, \n            \"light_out\":n_config.data.data_light_out_1,  \n            \"temp_in\":n_config.data.data_temp_in_1, \n            \"hum_in\":n_config.data.data_hum_in_1, \n            \"light_in\":n_config.data.data_light_in_1,  \n            \"soil_in\":n_config.data.data_soil_in_1,  \n        } \n    };\n    msg.payload = JSON.stringify(jsonstring);\n    return msg;   \n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 2020,
        "wires": [
            [
                "b6fd4adfb0e75930"
            ]
        ]
    },
    {
        "id": "7ac1a7a0f2343c5c",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "data set 2",
        "func": "var n_config = msg.payload\n\nif(n_config.data != false){\n    var jsonstring ={};\n    if(n_config.data.data_timestamp_2 != ''){\n        jsonstring = {\n        \"serial_id\": \"TUSMT002\", \n        \"date\": n_config.data.data_timestamp_2.substring(0, 10), \n        \"time\":n_config.data.data_timestamp_2.substring(11, 16),\n        \"data\":{ \n            \"temp_out\":n_config.data.data_temp_out_2, \n            \"hum_out\":n_config.data.data_hum_out_2, \n            \"light_out\":n_config.data.data_light_out_2,  \n            \"temp_in\":n_config.data.data_temp_in_2, \n            \"hum_in\":n_config.data.data_hum_in_2, \n            \"light_in\":n_config.data.data_light_in_2,  \n            \"soil_in\":n_config.data.data_soil_in_2,  \n        } \n    };\n    msg.payload = JSON.stringify(jsonstring);\n    return msg;   \n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 2060,
        "wires": [
            [
                "c7760921460f6bf9"
            ]
        ]
    },
    {
        "id": "a9c5035b2a310343",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "data set 3",
        "func": "var n_config = msg.payload\n\nif(n_config.data != false){\n    var jsonstring ={};\n    if(n_config.data.data_timestamp_3 != ''){\n        jsonstring = {\n        \"serial_id\": \"TUSMT003\", \n        \"date\": n_config.data.data_timestamp_3.substring(0, 10), \n        \"time\":n_config.data.data_timestamp_3.substring(11, 16),\n        \"data\":{ \n            \"temp_out\":n_config.data.data_temp_out_3, \n            \"hum_out\":n_config.data.data_hum_out_3, \n            \"light_out\":n_config.data.data_light_out_3,  \n            \"temp_in\":n_config.data.data_temp_in_3, \n            \"hum_in\":n_config.data.data_hum_in_3, \n            \"light_in\":n_config.data.data_light_in_3,  \n            \"soil_in\":n_config.data.data_soil_in_3,  \n        } \n    };\n    msg.payload = JSON.stringify(jsonstring);\n    return msg;   \n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 2100,
        "wires": [
            [
                "b79454dd18805714"
            ]
        ]
    },
    {
        "id": "9dc48acc6edd844e",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "data set 4",
        "func": "var n_config = msg.payload\n\nif(n_config.data != false){\n    var jsonstring ={};\n    if(n_config.data.data_timestamp_4 != ''){\n        jsonstring = {\n        \"serial_id\": \"TUSMT004\", \n        \"date\": n_config.data.data_timestamp_4.substring(0, 10), \n        \"time\":n_config.data.data_timestamp_4.substring(11, 16),\n        \"data\":{ \n            \"temp_out\":n_config.data.data_temp_out_4, \n            \"hum_out\":n_config.data.data_hum_out_4, \n            \"light_out\":n_config.data.data_light_out_4,  \n            \"temp_in\":n_config.data.data_temp_in_4, \n            \"hum_in\":n_config.data.data_hum_in_4, \n            \"light_in\":n_config.data.data_light_in_4,  \n            \"soil_in\":n_config.data.data_soil_in_4,  \n        } \n    };\n    msg.payload = JSON.stringify(jsonstring);\n    return msg;   \n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 2140,
        "wires": [
            [
                "e118e34f07522282"
            ]
        ]
    },
    {
        "id": "032fe048e8653bd8",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "data set 5",
        "func": "var n_config = msg.payload\n\nif(n_config.data != false){\n    var jsonstring ={};\n    if(n_config.data.data_timestamp_5 != ''){\n        jsonstring = {\n        \"serial_id\": \"TUSMT005\", \n        \"date\": n_config.data.data_timestamp_5.substring(0, 10), \n        \"time\":n_config.data.data_timestamp_5.substring(11, 16),\n        \"data\":{ \n            \"temp_out\":n_config.data.data_temp_out_5, \n            \"hum_out\":n_config.data.data_hum_out_5, \n            \"light_out\":n_config.data.data_light_out_5,  \n            \"temp_in\":n_config.data.data_temp_in_5, \n            \"hum_in\":n_config.data.data_hum_in_5, \n            \"light_in\":n_config.data.data_light_in_5,  \n            \"soil_in\":n_config.data.data_soil_in_5,  \n        } \n    };\n    msg.payload = JSON.stringify(jsonstring);\n    return msg;   \n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 2180,
        "wires": [
            [
                "122c23da920277c3"
            ]
        ]
    },
    {
        "id": "859b919e0c339b28",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "data set 6",
        "func": "var n_config = msg.payload\n\nif(n_config.data != false){\n    var jsonstring ={};\n    if(n_config.data.data_timestamp_6 != ''){\n        jsonstring = {\n        \"serial_id\": \"TUSMT006\", \n        \"date\": n_config.data.data_timestamp_6.substring(0, 10), \n        \"time\":n_config.data.data_timestamp_6.substring(11, 16),\n        \"data\":{ \n            \"temp_out\":n_config.data.data_temp_out_6, \n            \"hum_out\":n_config.data.data_hum_out_6, \n            \"light_out\":n_config.data.data_light_out_6,  \n            \"temp_in\":n_config.data.data_temp_in_6, \n            \"hum_in\":n_config.data.data_hum_in_6, \n            \"light_in\":n_config.data.data_light_in_6,  \n            \"soil_in\":n_config.data.data_soil_in_6,  \n        } \n    };\n    msg.payload = JSON.stringify(jsonstring);\n    return msg;   \n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 2220,
        "wires": [
            [
                "713b8554d01d8144"
            ]
        ]
    },
    {
        "id": "20031457090efee8",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "data set 7",
        "func": "var n_config = msg.payload\n\nif(n_config.data != false){\n    var jsonstring ={};\n    if(n_config.data.data_timestamp_7 != ''){\n        jsonstring = {\n        \"serial_id\": \"TUSMT007\", \n        \"date\": n_config.data.data_timestamp_7.substring(0, 10), \n        \"time\":n_config.data.data_timestamp_7.substring(11, 16),\n        \"data\":{ \n            \"temp_out\":n_config.data.data_temp_out_7, \n            \"hum_out\":n_config.data.data_hum_out_7, \n            \"light_out\":n_config.data.data_light_out_7,  \n            \"temp_in\":n_config.data.data_temp_in_7, \n            \"hum_in\":n_config.data.data_hum_in_7, \n            \"light_in\":n_config.data.data_light_in_7,  \n            \"soil_in\":n_config.data.data_soil_in_7,  \n        } \n    };\n    msg.payload = JSON.stringify(jsonstring);\n    return msg;   \n    }\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 2260,
        "wires": [
            [
                "3476f76a06d1fe8a"
            ]
        ]
    },
    {
        "id": "97a8ef7003abf39e",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "insert data tu",
        "func": "var n_config = msg.payload\n\n// if(n_config.log_re_login != false){\n    msg.payload = JSON.stringify( n_config.log_re_login);\n    return msg;   \n// }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 2300,
        "wires": [
            [
                "7da0f54db0b9b5bf"
            ]
        ]
    },
    {
        "id": "7da0f54db0b9b5bf",
        "type": "mqtt out",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "web_system",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "8116f63f.e78778",
        "x": 1470,
        "y": 2300,
        "wires": []
    },
    {
        "id": "be66366ce09adaa4",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT001/data_sensor/filter_eq",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 470,
        "y": 2480,
        "wires": [
            [
                "fde4ef7110bf2ee7"
            ]
        ]
    },
    {
        "id": "fde4ef7110bf2ee7",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_1\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2480,
        "wires": [
            [
                "a513635d0a1e3658"
            ]
        ]
    },
    {
        "id": "aed386c2db5c925f",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT002/data_sensor/filter_eq",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 470,
        "y": 2520,
        "wires": [
            [
                "f7d96400e49cd5cb"
            ]
        ]
    },
    {
        "id": "f7d96400e49cd5cb",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_2\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2520,
        "wires": [
            [
                "a513635d0a1e3658"
            ]
        ]
    },
    {
        "id": "08b07eb90cbca90f",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT003/data_sensor/filter_eq",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 470,
        "y": 2560,
        "wires": [
            [
                "cf0b348bf32daedf"
            ]
        ]
    },
    {
        "id": "cf0b348bf32daedf",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_3\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2560,
        "wires": [
            [
                "a513635d0a1e3658"
            ]
        ]
    },
    {
        "id": "179450d6ae5d3823",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT004/data_sensor/filter_eq",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 470,
        "y": 2600,
        "wires": [
            [
                "ad7fdb8ae0308174"
            ]
        ]
    },
    {
        "id": "ad7fdb8ae0308174",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_4\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2600,
        "wires": [
            [
                "a513635d0a1e3658"
            ]
        ]
    },
    {
        "id": "036af19f8804ac3d",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT005/data_sensor/filter_eq",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 470,
        "y": 2640,
        "wires": [
            [
                "67c830e0e1914904"
            ]
        ]
    },
    {
        "id": "67c830e0e1914904",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_5\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2640,
        "wires": [
            [
                "a513635d0a1e3658"
            ]
        ]
    },
    {
        "id": "52102143d81af2af",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT006/data_sensor/filter_eq",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 470,
        "y": 2680,
        "wires": [
            [
                "3d2cad0315d23151"
            ]
        ]
    },
    {
        "id": "3d2cad0315d23151",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_6\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2680,
        "wires": [
            [
                "a513635d0a1e3658"
            ]
        ]
    },
    {
        "id": "50149dd08eab7a95",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "TUSMT007/data_sensor/filter_eq",
        "qos": "1",
        "datatype": "auto",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 470,
        "y": 2720,
        "wires": [
            [
                "f84c12f8cea0a513"
            ]
        ]
    },
    {
        "id": "f84c12f8cea0a513",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "var output = msg.payload;\nmsg.topic = \"mqtt_7\";\nmsg.payload = output;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2720,
        "wires": [
            [
                "a513635d0a1e3658"
            ]
        ]
    },
    {
        "id": "a513635d0a1e3658",
        "type": "moment",
        "z": "9ec4714069b3f5ce",
        "name": "timmer",
        "topic": "",
        "input": "",
        "inputType": "date",
        "inTz": "Asia/Bangkok",
        "adjAmount": "0",
        "adjType": "hours",
        "adjDir": "subtract",
        "format": "YYYY-MM-DD HH:mm:ss",
        "locale": "C",
        "output": "timer",
        "outputType": "msg",
        "outTz": "Asia/Bangkok",
        "x": 850,
        "y": 2480,
        "wires": [
            [
                "65197957209cd92b"
            ]
        ]
    },
    {
        "id": "65197957209cd92b",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "filter data",
        "func": "let timestamp = msg.timer;\nlet ntime = timestamp.split(\" \");\nlet nowtime = ntime[1];\n\nlet nminute = nowtime.split(\":\");\nlet nowminute = Number(nminute[1]);\nlet old_minute = context.get('old_nowminute') || 0;\nold_minute = Number(old_minute)\n\n\nif (msg.topic == \"mqtt_1\") {\n    context.set('mqtt_1', msg.payload);\n}\nif (msg.topic == \"mqtt_2\") {\n    context.set('mqtt_2', msg.payload);\n}\nif (msg.topic == \"mqtt_3\") {\n    context.set('mqtt_3', msg.payload);\n}\nif (msg.topic == \"mqtt_4\") {\n    context.set('mqtt_4', msg.payload);\n}\nif (msg.topic == \"mqtt_5\") {\n    context.set('mqtt_5', msg.payload);\n}\nif (msg.topic == \"mqtt_6\") {\n    context.set('mqtt_6', msg.payload);\n}\nif (msg.topic == \"mqtt_7\") {\n    context.set('mqtt_7', msg.payload);\n}\nlet mqtt_1 = context.get('mqtt_1') || 0;\nlet mqtt_2 = context.get('mqtt_2') || 0;\nlet mqtt_3 = context.get('mqtt_3') || 0;\nlet mqtt_4 = context.get('mqtt_4') || 0;\nlet mqtt_5 = context.get('mqtt_5') || 0;\nlet mqtt_6 = context.get('mqtt_6') || 0;\nlet mqtt_7 = context.get('mqtt_7') || 0;\n\nlet count_ = context.get('count_') || 0;\n\nif (count_ >= 3) {\n    context.set('count_', 0)\n    if (old_minute != nowminute) {\n        context.set('old_nowminute', nowminute);\n        let tmin = 0;\n        let tmax = 50;\n        let hmin = 0;\n        let hmax = 100;\n        let lmin = 0;\n        let lmax = 100000;\n        let smin = 0;\n        let smax = 100;\n\n        let data_1 = [], data_2 = [], data_3 = [];\n        let data_4 = [], data_5 = [], data_6 = [], data_7 = [];\n        let res_1, res_2, res_3, res_4, res_5, res_6, res_7;\n\n        if (mqtt_1 != 0) {\n            let result_1 = JSON.parse(mqtt_1);\n            if (result_1.data.temp_out > tmax ||\n                result_1.data.temp_out < tmin ||\n                result_1.data.hum_out > hmax ||\n                result_1.data.hum_out < hmin ||\n                result_1.data.light_out > lmax ||\n                result_1.data.light_out < lmin ||\n                result_1.data.temp_in > tmax ||\n                result_1.data.temp_in < tmin ||\n                result_1.data.hum_in > hmax ||\n                result_1.data.hum_in < hmin ||\n                result_1.data.light_in > lmax ||\n                result_1.data.light_in < lmin ||\n                result_1.data.soil_in > smax ||\n                result_1.data.soil_in < smin\n            ) {\n                res_1 = 1;\n            } else {\n                res_1 = 0;\n            }\n            data_1 = {\n                \"date_time1\": result_1.date + ' ' + result_1.time.substring(0, 5),\n                \"temp_out1\": result_1.data.temp_out,\n                \"hum_out1\": result_1.data.hum_out,\n                \"light_out1\": result_1.data.light_out,\n                \"temp_in1\": result_1.data.temp_in,\n                \"hum_in1\": result_1.data.hum_in,\n                \"light_in1\": result_1.data.light_in,\n                \"soil_in1\": result_1.data.soil_in,\n                \"res_1\": res_1\n            };\n        }//else{ data_1 = {\"date_time1\":''}  }\n        if (mqtt_2 != 0) {\n            let result_2 = JSON.parse(mqtt_2);\n            if (result_2.data.temp_out > tmax ||\n                result_2.data.temp_out < tmin ||\n                result_2.data.hum_out > hmax ||\n                result_2.data.hum_out < hmin ||\n                result_2.data.light_out > lmax ||\n                result_2.data.light_out < lmin ||\n                result_2.data.temp_in > tmax ||\n                result_2.data.temp_in < tmin ||\n                result_2.data.hum_in > hmax ||\n                result_2.data.hum_in < hmin ||\n                result_2.data.light_in > lmax ||\n                result_2.data.light_in < lmin ||\n                result_2.data.soil_in > smax ||\n                result_2.data.soil_in < smin\n            ) {\n                res_2 = 1;\n            } else {\n                res_2 = 0;\n            }\n            data_2 = {\n                \"date_time2\": result_2.date + ' ' + result_2.time.substring(0, 5),\n                \"temp_out2\": result_2.data.temp_out,\n                \"hum_out2\": result_2.data.hum_out,\n                \"light_out2\": result_2.data.light_out,\n                \"temp_in2\": result_2.data.temp_in,\n                \"hum_in2\": result_2.data.hum_in,\n                \"light_in2\": result_2.data.light_in,\n                \"soil_in2\": result_2.data.soil_in,\n                \"res_2\": res_2\n            };\n        }//else{ data_2 = {\"date_time2\":''}  }\n        if (mqtt_3 != 0) {\n            let result_3 = JSON.parse(mqtt_3);\n            if (result_3.data.temp_out > tmax ||\n                result_3.data.temp_out < tmin ||\n                result_3.data.hum_out > hmax ||\n                result_3.data.hum_out < hmin ||\n                result_3.data.light_out > lmax ||\n                result_3.data.light_out < lmin ||\n                result_3.data.temp_in > tmax ||\n                result_3.data.temp_in < tmin ||\n                result_3.data.hum_in > hmax ||\n                result_3.data.hum_in < hmin ||\n                result_3.data.light_in > lmax ||\n                result_3.data.light_in < lmin ||\n                result_3.data.soil_in > smax ||\n                result_3.data.soil_in < smin\n            ) {\n                res_3 = 1;\n            } else {\n                res_3 = 0;\n            }\n            data_3 = {\n                \"date_time3\": result_3.date + ' ' + result_3.time.substring(0, 5),\n                \"temp_out3\": result_3.data.temp_out,\n                \"hum_out3\": result_3.data.hum_out,\n                \"light_out3\": result_3.data.light_out,\n                \"temp_in3\": result_3.data.temp_in,\n                \"hum_in3\": result_3.data.hum_in,\n                \"light_in3\": result_3.data.light_in,\n                \"soil_in3\": result_3.data.soil_in,\n                \"res_3\": res_3\n            };\n        }//else{ data_3 = {\"date_time3\":''}  }\n        if (mqtt_4 != 0) {\n            let result_4 = JSON.parse(mqtt_4);\n            if (result_4.data.temp_out > tmax ||\n                result_4.data.temp_out < tmin ||\n                result_4.data.hum_out > hmax ||\n                result_4.data.hum_out < hmin ||\n                result_4.data.light_out > lmax ||\n                result_4.data.light_out < lmin ||\n                result_4.data.temp_in > tmax ||\n                result_4.data.temp_in < tmin ||\n                result_4.data.hum_in > hmax ||\n                result_4.data.hum_in < hmin ||\n                result_4.data.light_in > lmax ||\n                result_4.data.light_in < lmin ||\n                result_4.data.soil_in > smax ||\n                result_4.data.soil_in < smin\n            ) {\n                res_4 = 1;\n            } else {\n                res_4 = 0;\n            }\n            data_4 = {\n                \"date_time4\": result_4.date + ' ' + result_4.time.substring(0, 5),\n                \"temp_out4\": result_4.data.temp_out,\n                \"hum_out4\": result_4.data.hum_out,\n                \"light_out4\": result_4.data.light_out,\n                \"temp_in4\": result_4.data.temp_in,\n                \"hum_in4\": result_4.data.hum_in,\n                \"light_in4\": result_4.data.light_in,\n                \"soil_in4\": result_4.data.soil_in,\n                \"res_4\": res_4\n            };\n        }//else{ data_4 = {\"date_time4\":''}  }\n        if (mqtt_5 != 0) {\n            let result_5 = JSON.parse(mqtt_5);\n            if (result_5.data.temp_out > tmax ||\n                result_5.data.temp_out < tmin ||\n                result_5.data.hum_out > hmax ||\n                result_5.data.hum_out < hmin ||\n                result_5.data.light_out > lmax ||\n                result_5.data.light_out < lmin ||\n                result_5.data.temp_in > tmax ||\n                result_5.data.temp_in < tmin ||\n                result_5.data.hum_in > hmax ||\n                result_5.data.hum_in < hmin ||\n                result_5.data.light_in > lmax ||\n                result_5.data.light_in < lmin ||\n                result_5.data.soil_in > smax ||\n                result_5.data.soil_in < smin\n            ) {\n                res_5 = 1;\n            } else {\n                res_5 = 0;\n            }\n            data_5 = {\n                \"date_time5\": result_5.date + ' ' + result_5.time.substring(0, 5),\n                \"temp_out5\": result_5.data.temp_out,\n                \"hum_out5\": result_5.data.hum_out,\n                \"light_out5\": result_5.data.light_out,\n                \"temp_in5\": result_5.data.temp_in,\n                \"hum_in5\": result_5.data.hum_in,\n                \"light_in5\": result_5.data.light_in,\n                \"soil_in5\": result_5.data.soil_in,\n                \"res_5\": res_5\n            };\n        }//else{ data_5 = {\"date_time5\":''}  }\n        if (mqtt_6 != 0) {\n            let result_6 = JSON.parse(mqtt_6);\n            if (result_6.data.temp_out > tmax ||\n                result_6.data.temp_out < tmin ||\n                result_6.data.hum_out > hmax ||\n                result_6.data.hum_out < hmin ||\n                result_6.data.light_out > lmax ||\n                result_6.data.light_out < lmin ||\n                result_6.data.temp_in > tmax ||\n                result_6.data.temp_in < tmin ||\n                result_6.data.hum_in > hmax ||\n                result_6.data.hum_in < hmin ||\n                result_6.data.light_in > lmax ||\n                result_6.data.light_in < lmin ||\n                result_6.data.soil_in > smax ||\n                result_6.data.soil_in < smin\n            ) {\n                res_6 = 1;\n            } else {\n                res_6 = 0;\n            }\n            data_6 = {\n                \"date_time6\": result_6.date + ' ' + result_6.time.substring(0, 5),\n                \"temp_out6\": result_6.data.temp_out,\n                \"hum_out6\": result_6.data.hum_out,\n                \"light_out6\": result_6.data.light_out,\n                \"temp_in6\": result_6.data.temp_in,\n                \"hum_in6\": result_6.data.hum_in,\n                \"light_in6\": result_6.data.light_in,\n                \"soil_in6\": result_6.data.soil_in,\n                \"res_6\": res_6\n            };\n        }//else{ data_6 = {\"date_time6\":''}  }\n        if (mqtt_7 != 0) {\n            let result_7 = JSON.parse(mqtt_7);\n            if (result_7.data.temp_out > tmax ||\n                result_7.data.temp_out < tmin ||\n                result_7.data.hum_out > hmax ||\n                result_7.data.hum_out < hmin ||\n                result_7.data.light_out > lmax ||\n                result_7.data.light_out < lmin ||\n                result_7.data.temp_in > tmax ||\n                result_7.data.temp_in < tmin ||\n                result_7.data.hum_in > hmax ||\n                result_7.data.hum_in < hmin ||\n                result_7.data.light_in > lmax ||\n                result_7.data.light_in < lmin ||\n                result_7.data.soil_in > smax ||\n                result_7.data.soil_in < smin\n            ) {\n                res_7 = 1;\n            } else {\n                res_7 = 0;\n            }\n            data_7 = {\n                \"date_time7\": result_7.date + ' ' + result_7.time.substring(0, 5),\n                \"temp_out7\": result_7.data.temp_out,\n                \"hum_out7\": result_7.data.hum_out,\n                \"light_out7\": result_7.data.light_out,\n                \"temp_in7\": result_7.data.temp_in,\n                \"hum_in7\": result_7.data.hum_in,\n                \"light_in7\": result_7.data.light_in,\n                \"soil_in7\": result_7.data.soil_in,\n                \"res_7\": res_7\n            };\n        }//else{ data_7 = {\"date_time7\":''}  }\n\n        let data = []\n        data.push(data_1, data_2, data_3, data_4, data_5, data_6, data_7, ntime[0] + ' ' + nminute[0] + ':' + nminute[1])\n\n        msg.payload = data;\n        msg.topic = \"data_mqtt\";\n        return msg;\n\n    }\n}else{\n    context.set('count_', count_+1)\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 2480,
        "wires": [
            [
                "4cccce2a23bb3231"
            ]
        ]
    },
    {
        "id": "4cccce2a23bb3231",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "insert data tu",
        "func": "var get_config;\nvar date_time_s = context.get('get_time_log') || 'No'\n\nif (msg.topic == \"config\"){\n    context.set('get_config',msg.payload);\n}\nif (msg.topic == \"data_mqtt\"){\n    context.set('get_data_mqtt',msg.payload);\n}\nvar n_config = context.get('get_config') || 0;\nvar data_mqtt = context.get('get_data_mqtt') || 0;\n\nif(n_config == 0){\n    return false\n}\n\nif(data_mqtt == 0){\n    return false\n}\n\n// msg.payload = data_mqtt;\n// return msg;\n// return false\n    \nif(date_time_s == 'No'){\n    if(n_config.data == false){\n        context.set('get_time_log',n_config.datetime_sever)\n        // msg.payload = data_mqtt[7]// context.get('get_time_log')\n        // return msg;\n        \n        msg.headers = {};\n        msg.method = \"POST\";\n        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_data_eq.php\"; \n        msg.payload = {\n            sn:'TUSMT',\n            data_1:JSON.stringify(data_mqtt[0]),\n            data_2:JSON.stringify(data_mqtt[1]),\n            data_3:JSON.stringify(data_mqtt[2]),\n            data_4:JSON.stringify(data_mqtt[3]),\n            data_5:JSON.stringify(data_mqtt[4]),\n            data_6:JSON.stringify(data_mqtt[5]),\n            data_7:JSON.stringify(data_mqtt[6]),\n        }\n        msg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n        return msg;\n    }else{\n        if(n_config.data.data_timestamp.substring(0, 16) === data_mqtt[7]){\n            // msg.payload = 'sum' //date_time_s //context.get('get_time_log')\n            // return msg\n        }else{\n            context.set('get_time_log',data_mqtt[7])\n            msg.headers = {};\n            msg.method = \"POST\";\n            msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_data_eq.php\"; \n            msg.payload = {\n                sn:'TUSMT',\n                data_1:JSON.stringify(data_mqtt[0]),\n                data_2:JSON.stringify(data_mqtt[1]),\n                data_3:JSON.stringify(data_mqtt[2]),\n                data_4:JSON.stringify(data_mqtt[3]),\n                data_5:JSON.stringify(data_mqtt[4]),\n                data_6:JSON.stringify(data_mqtt[5]),\n                data_7:JSON.stringify(data_mqtt[6]),\n            }\n            msg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n            msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n            return msg;\n        }\n    }\n}else{\n    // msg.payload = date_time_s// n_config.data.data_timestamp.substring(0, 16)\n    // return msg\n    // return false\n    if(date_time_s == data_mqtt[7]){\n        // msg.payload = 'sum' //date_time_s //context.get('get_time_log')\n        // return msg\n    }else{\n        context.set('get_time_log',data_mqtt[7])\n        msg.headers = {};\n        msg.method = \"POST\";\n        msg.url = \"http://decc-bigdata.com/smartfarm/server/insert_data/tu/insert_data_eq.php\"; \n        msg.payload = {\n            sn:'TUSMT',\n            data_1:JSON.stringify(data_mqtt[0]),\n            data_2:JSON.stringify(data_mqtt[1]),\n            data_3:JSON.stringify(data_mqtt[2]),\n            data_4:JSON.stringify(data_mqtt[3]),\n            data_5:JSON.stringify(data_mqtt[4]),\n            data_6:JSON.stringify(data_mqtt[5]),\n            data_7:JSON.stringify(data_mqtt[6]),\n        }\n        msg.headers[\"content-type\"] = \"application/x-www-form-urlencoded\";\n        msg.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n        return msg;\n    }\n}\n   ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 2480,
        "wires": [
            [
                "8b9f0f598399753d",
                "91cba0aa01e08654"
            ]
        ]
    },
    {
        "id": "1ac7310cc5c97f88",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 2480,
        "wires": []
    },
    {
        "id": "281bce8ec53f9d6d",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1010,
        "y": 2020,
        "wires": [
            [
                "28ec1348d0f74dbb"
            ]
        ]
    },
    {
        "id": "91cba0aa01e08654",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1390,
        "y": 2480,
        "wires": [
            [
                "1ac7310cc5c97f88"
            ]
        ]
    },
    {
        "id": "f9856c7d2f3751e2",
        "type": "http request",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1390,
        "y": 2420,
        "wires": [
            [
                "844d1f48e92d5a17"
            ]
        ]
    },
    {
        "id": "8b9f0f598399753d",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 25",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 2520,
        "wires": []
    },
    {
        "id": "1787450f6f48cead",
        "type": "debug",
        "z": "9ec4714069b3f5ce",
        "name": "debug 27",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1340,
        "y": 2380,
        "wires": []
    },
    {
        "id": "6f0ac14ef6c58813",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "let data = msg.payload;\nmsg.payload = data;\nmsg.topic = \"get_status\";\nif (context.get('log') == undefined) {\n    context.set('log', data)\n    return msg\n} else {\n    if (data != context.get('log')) {\n        context.set('log', data)\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1820,
        "wires": [
            [
                "3c4b798d914db2a4"
            ]
        ]
    },
    {
        "id": "345f594fb088b278",
        "type": "delay",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 540,
        "y": 1820,
        "wires": [
            [
                "6f0ac14ef6c58813"
            ]
        ]
    },
    {
        "id": "66f612af5ff8e063",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "connect/status/TUSMT007",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 1820,
        "wires": [
            [
                "345f594fb088b278"
            ]
        ]
    },
    {
        "id": "9625033dd2589410",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "let data = msg.payload;\nmsg.payload = data;\nmsg.topic = \"get_status\";\nif (context.get('log') == undefined) {\n    context.set('log', data)\n    return msg\n} else {\n    if (data != context.get('log')) {\n        context.set('log', data)\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1580,
        "wires": [
            [
                "6986c490f30070d2"
            ]
        ]
    },
    {
        "id": "4501d2683719e645",
        "type": "delay",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 540,
        "y": 1580,
        "wires": [
            [
                "9625033dd2589410"
            ]
        ]
    },
    {
        "id": "20143bbe02fc8a37",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "connect/status/TUSMT006",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 1580,
        "wires": [
            [
                "4501d2683719e645"
            ]
        ]
    },
    {
        "id": "ff0e02529cbde863",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "let data = msg.payload;\nmsg.payload = data;\nmsg.topic = \"get_status\";\nif (context.get('log') == undefined) {\n    context.set('log', data)\n    return msg\n} else {\n    if (data != context.get('log')) {\n        context.set('log', data)\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1340,
        "wires": [
            [
                "1baad3dfe59d7ffd"
            ]
        ]
    },
    {
        "id": "9e241b6fd18ae4e4",
        "type": "delay",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 540,
        "y": 1340,
        "wires": [
            [
                "ff0e02529cbde863"
            ]
        ]
    },
    {
        "id": "9322b66fc6a16975",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "connect/status/TUSMT005",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 1340,
        "wires": [
            [
                "9e241b6fd18ae4e4"
            ]
        ]
    },
    {
        "id": "db57d8c668f650f9",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "let data = msg.payload;\nmsg.payload = data;\nmsg.topic = \"get_status\";\nif (context.get('log') == undefined) {\n    context.set('log', data)\n    return msg\n} else {\n    if (data != context.get('log')) {\n        context.set('log', data)\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1080,
        "wires": [
            [
                "b2011fbb0e3ccef1"
            ]
        ]
    },
    {
        "id": "6b67226f2c5a23cf",
        "type": "delay",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 540,
        "y": 1080,
        "wires": [
            [
                "db57d8c668f650f9"
            ]
        ]
    },
    {
        "id": "e6f6c4b77507c58b",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "connect/status/TUSMT004",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 1080,
        "wires": [
            [
                "6b67226f2c5a23cf"
            ]
        ]
    },
    {
        "id": "f4c1352f51b50886",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "let data = msg.payload;\nmsg.payload = data;\nmsg.topic = \"get_status\";\nif (context.get('log') == undefined) {\n    context.set('log', data)\n    return msg\n} else {\n    if (data != context.get('log')) {\n        context.set('log', data)\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 820,
        "wires": [
            [
                "8fa8cf1c99c2cb24"
            ]
        ]
    },
    {
        "id": "a9a32f58c75855a3",
        "type": "delay",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 540,
        "y": 820,
        "wires": [
            [
                "f4c1352f51b50886"
            ]
        ]
    },
    {
        "id": "a865f14ea235e9b7",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "connect/status/TUSMT003",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 310,
        "y": 820,
        "wires": [
            [
                "a9a32f58c75855a3"
            ]
        ]
    },
    {
        "id": "da41da28811818de",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "let data = msg.payload;\nmsg.payload = data;\nmsg.topic = \"get_status\";\nif (context.get('log') == undefined) {\n    context.set('log', data)\n    return msg\n} else {\n    if (data != context.get('log')) {\n        context.set('log', data)\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 560,
        "wires": [
            [
                "930dd69e8b3640f0"
            ]
        ]
    },
    {
        "id": "d4bf2b174b8c899a",
        "type": "delay",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 560,
        "y": 560,
        "wires": [
            [
                "da41da28811818de"
            ]
        ]
    },
    {
        "id": "e6e2d55a0e2e0e65",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "connect/status/TUSMT002",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 330,
        "y": 560,
        "wires": [
            [
                "d4bf2b174b8c899a"
            ]
        ]
    },
    {
        "id": "793bcd757fb74e84",
        "type": "function",
        "z": "9ec4714069b3f5ce",
        "name": "topic",
        "func": "let data = msg.payload;\nmsg.payload = data;\nmsg.topic = \"get_status\";\nif (context.get('log') == undefined) {\n    context.set('log', data)\n    return msg\n} else {\n    if (data != context.get('log')) {\n        context.set('log', data)\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 280,
        "wires": [
            [
                "cd751c32ea2f8a53"
            ]
        ]
    },
    {
        "id": "40f05b9a55b65904",
        "type": "delay",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 560,
        "y": 280,
        "wires": [
            [
                "793bcd757fb74e84"
            ]
        ]
    },
    {
        "id": "e8de0a5aee76b33f",
        "type": "mqtt in",
        "z": "9ec4714069b3f5ce",
        "name": "",
        "topic": "connect/status/TUSMT001",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "8116f63f.e78778",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 330,
        "y": 280,
        "wires": [
            [
                "40f05b9a55b65904"
            ]
        ]
    }
]